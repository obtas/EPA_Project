import {
  createSingletonState
} from "./chunk-455JEJF4.js";

// node_modules/@cloudscape-design/components/internal/events/index.js
var CustomEventStub = function() {
  function CustomEventStub2(cancelable, detail) {
    if (cancelable === void 0) {
      cancelable = false;
    }
    if (detail === void 0) {
      detail = null;
    }
    this.cancelable = cancelable;
    this.detail = detail;
    this.defaultPrevented = false;
    this.cancelBubble = false;
  }
  CustomEventStub2.prototype.preventDefault = function() {
    this.defaultPrevented = true;
  };
  CustomEventStub2.prototype.stopPropagation = function() {
    this.cancelBubble = true;
  };
  return CustomEventStub2;
}();
function createCustomEvent(_a) {
  var cancelable = _a.cancelable, detail = _a.detail;
  return new CustomEventStub(cancelable, detail);
}
function fireNonCancelableEvent(handler, detail) {
  if (!handler) {
    return;
  }
  var event = createCustomEvent({ cancelable: false, detail });
  handler(event);
}
function fireCancelableEvent(handler, detail, sourceEvent) {
  if (!handler) {
    return false;
  }
  var event = createCustomEvent({ cancelable: true, detail });
  handler(event);
  if (event.defaultPrevented && sourceEvent) {
    sourceEvent.preventDefault();
  }
  if (event.cancelBubble && sourceEvent) {
    sourceEvent.stopPropagation();
  }
  return event.defaultPrevented;
}
function fireKeyboardEvent(handler, reactEvent) {
  return fireCancelableEvent(handler, {
    keyCode: reactEvent.keyCode,
    key: reactEvent.key,
    ctrlKey: reactEvent.ctrlKey,
    shiftKey: reactEvent.shiftKey,
    altKey: reactEvent.altKey,
    metaKey: reactEvent.metaKey
  }, reactEvent);
}
var isMouseEvent = function(e) {
  return e.button !== void 0;
};
function isPlainLeftClick(event) {
  return event && (!isMouseEvent(event) || event.button === 0) && !event.ctrlKey && !event.altKey && !event.shiftKey && !event.metaKey;
}

// node_modules/@cloudscape-design/components/internal/keycode.js
var KeyCode;
(function(KeyCode2) {
  KeyCode2[KeyCode2["pageUp"] = 33] = "pageUp";
  KeyCode2[KeyCode2["pageDown"] = 34] = "pageDown";
  KeyCode2[KeyCode2["end"] = 35] = "end";
  KeyCode2[KeyCode2["home"] = 36] = "home";
  KeyCode2[KeyCode2["backspace"] = 8] = "backspace";
  KeyCode2[KeyCode2["space"] = 32] = "space";
  KeyCode2[KeyCode2["down"] = 40] = "down";
  KeyCode2[KeyCode2["left"] = 37] = "left";
  KeyCode2[KeyCode2["right"] = 39] = "right";
  KeyCode2[KeyCode2["up"] = 38] = "up";
  KeyCode2[KeyCode2["escape"] = 27] = "escape";
  KeyCode2[KeyCode2["enter"] = 13] = "enter";
  KeyCode2[KeyCode2["tab"] = 9] = "tab";
  KeyCode2[KeyCode2["shift"] = 16] = "shift";
  KeyCode2[KeyCode2["control"] = 17] = "control";
  KeyCode2[KeyCode2["alt"] = 18] = "alt";
  KeyCode2[KeyCode2["meta"] = 91] = "meta";
})(KeyCode || (KeyCode = {}));

// node_modules/@cloudscape-design/components/internal/hooks/focus-visible/index.js
var useFocusSingleton = createSingletonState({
  initialState: false,
  factory: function(setIsKeyboard) {
    var handleMousedown = function() {
      return setIsKeyboard(false);
    };
    var handleKeydown = function(event) {
      var isSpecialKey = [KeyCode.shift, KeyCode.alt, KeyCode.control, KeyCode.meta].indexOf(event.keyCode) > -1;
      if (!isSpecialKey) {
        setIsKeyboard(true);
      }
    };
    document.addEventListener("mousedown", handleMousedown);
    document.addEventListener("keydown", handleKeydown);
    return function() {
      document.removeEventListener("mousedown", handleMousedown);
      document.removeEventListener("keydown", handleKeydown);
    };
  }
});
function useFocusVisible() {
  var visible = useFocusSingleton();
  return visible ? { "data-awsui-focus-visible": visible } : {};
}

export {
  fireNonCancelableEvent,
  fireCancelableEvent,
  fireKeyboardEvent,
  isPlainLeftClick,
  KeyCode,
  useFocusVisible
};
//# sourceMappingURL=chunk-CVSDZ3HK.js.map

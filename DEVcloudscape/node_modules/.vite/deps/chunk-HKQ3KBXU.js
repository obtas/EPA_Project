import {
  useEffectOnUpdate
} from "./chunk-3B73VQSS.js";
import {
  custom_css_properties_default
} from "./chunk-LUGY6UQ7.js";
import {
  Transition,
  useContainerQuery,
  useResizeObserver
} from "./chunk-SIDBM5Q2.js";
import {
  useMobile
} from "./chunk-XI4RR77K.js";
import {
  fireNonCancelableEvent
} from "./chunk-CVSDZ3HK.js";
import {
  isDevelopment,
  warnOnce
} from "./chunk-3AAOFNJY.js";
import {
  __assign,
  __rest,
  clsx_m_default
} from "./chunk-XTANDRJM.js";
import {
  require_react
} from "./chunk-JLBVE3FS.js";
import {
  __toESM
} from "./chunk-HUBM7RA2.js";

// node_modules/@cloudscape-design/components/internal/hooks/use-controllable/index.js
var React = __toESM(require_react());
function useControllable(controlledValue, handler, defaultValue, _a) {
  var componentName = _a.componentName, changeHandler = _a.changeHandler, controlledProp = _a.controlledProp;
  var isControlled = React.useState(controlledValue !== void 0)[0];
  if (isDevelopment) {
    React.useEffect(function() {
      if (isControlled && handler === void 0) {
        warnOnce(componentName, "You provided a `".concat(controlledProp, "` prop without an `").concat(changeHandler, "` handler. This will render a non-interactive component."));
      }
    }, [handler, isControlled, componentName, changeHandler, controlledProp]);
    React.useEffect(function() {
      var isControlledNow = controlledValue !== void 0;
      if (isControlled !== isControlledNow) {
        var initialMode = isControlled ? "controlled" : "uncontrolled";
        var modeNow = isControlledNow ? "controlled" : "uncontrolled";
        warnOnce(componentName, "A component tried to change ".concat(initialMode, " '").concat(controlledProp, "' property to be ").concat(modeNow, ". ") + "This is not supported. Properties should not switch from ".concat(initialMode, " to ").concat(modeNow, " (or vice versa). ") + "Decide between using a controlled or uncontrolled mode for the lifetime of the component. More info: https://fb.me/react-controlled-components");
      }
    }, [isControlled, controlledProp, componentName, controlledValue]);
  }
  var _b = React.useState(defaultValue), valueState = _b[0], setValue = _b[1];
  var _c = React.useState(false), valueHasBeenSet = _c[0], setValueHasBeenSet = _c[1];
  var currentUncontrolledValue = valueHasBeenSet ? valueState : defaultValue;
  var setUncontrolledValue = React.useCallback(function(newValue) {
    setValue(newValue);
    setValueHasBeenSet(true);
  }, [setValue, setValueHasBeenSet]);
  if (isControlled) {
    return [controlledValue, defaultCallback];
  } else {
    return [currentUncontrolledValue, setUncontrolledValue];
  }
}
function defaultCallback() {
  return void 0;
}

// node_modules/@cloudscape-design/components/split-panel/utils/size-utils.js
var CONSTRAINED_PAGE_HEIGHT = 400;
var MAIN_PANEL_MIN_HEIGHT = 250;
var CONSTRAINED_MAIN_PANEL_MIN_HEIGHT = 40;
function getSplitPanelDefaultSize(position) {
  if (typeof document === "undefined") {
    return 0;
  }
  return position === "side" ? document.documentElement.clientWidth / 3 : document.documentElement.clientHeight / 2;
}

// node_modules/@cloudscape-design/components/app-layout/defaults.js
var defaultContentTypeState = {
  navigationOpen: true,
  minContentWidth: 280,
  maxContentWidth: void 0
};
var defaults = {
  "default": __assign({}, defaultContentTypeState),
  cards: {
    navigationOpen: true,
    minContentWidth: 280,
    maxContentWidth: void 0
  },
  form: {
    navigationOpen: false,
    minContentWidth: 280,
    maxContentWidth: 800
  },
  table: {
    navigationOpen: true,
    minContentWidth: 280,
    maxContentWidth: void 0
  },
  wizard: {
    navigationOpen: false,
    minContentWidth: 280,
    maxContentWidth: 1080
  }
};
function applyDefaults(contentType, stateFromProps, isRefresh) {
  var _a, _b, _c, _d;
  var contentTypeDefaults = isRefresh ? __assign(__assign({}, defaults[contentType]), { maxContentWidth: void 0 }) : defaults[contentType];
  return {
    maxContentWidth: (_a = stateFromProps.maxContentWidth) !== null && _a !== void 0 ? _a : contentTypeDefaults.maxContentWidth,
    minContentWidth: (_b = stateFromProps.minContentWidth) !== null && _b !== void 0 ? _b : contentTypeDefaults.minContentWidth,
    navigationOpen: (_c = stateFromProps.navigationOpen) !== null && _c !== void 0 ? _c : contentTypeDefaults.navigationOpen,
    toolsOpen: (_d = stateFromProps.toolsOpen) !== null && _d !== void 0 ? _d : contentTypeDefaults.toolsOpen
  };
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-focus-control.js
var import_react = __toESM(require_react());
function useFocusControl(isOpen, restoreFocus) {
  if (restoreFocus === void 0) {
    restoreFocus = false;
  }
  var refs = {
    toggle: (0, import_react.useRef)(null),
    close: (0, import_react.useRef)(null)
  };
  var previousFocusedElement = (0, import_react.useRef)();
  var setFocus = (0, import_react.useCallback)(function() {
    var _a, _b;
    if (!(refs.toggle.current || refs.close.current)) {
      return;
    }
    if (isOpen) {
      previousFocusedElement.current = document.activeElement;
      (_a = refs.close.current) === null || _a === void 0 ? void 0 : _a.focus();
    } else {
      if (restoreFocus && previousFocusedElement.current && document.contains(previousFocusedElement.current)) {
        previousFocusedElement.current.focus();
        previousFocusedElement.current = void 0;
      } else {
        (_b = refs.toggle.current) === null || _b === void 0 ? void 0 : _b.focus();
      }
    }
  }, [isOpen, restoreFocus, refs.close, refs.toggle]);
  var loseFocus = (0, import_react.useCallback)(function() {
    previousFocusedElement.current = void 0;
  }, []);
  (0, import_react.useLayoutEffect)(setFocus, [isOpen, restoreFocus]);
  return { refs, setFocus, loseFocus };
}

// node_modules/@cloudscape-design/components/internal/context/split-panel-context.js
var import_react2 = __toESM(require_react());
var SplitPanelContext = (0, import_react2.createContext)({
  topOffset: 0,
  bottomOffset: 0,
  leftOffset: 0,
  rightOffset: 0,
  position: "bottom",
  size: 0,
  getMaxWidth: function() {
    return 0;
  },
  getMaxHeight: function() {
    return 0;
  },
  getHeader: function() {
    return null;
  },
  isCopy: false,
  isOpen: true,
  isMobile: false,
  isRefresh: false,
  isForcedPosition: false,
  lastInteraction: void 0,
  splitPanelRef: void 0,
  splitPanelHeaderRef: void 0,
  onResize: function() {
  },
  onToggle: function() {
  },
  onPreferencesChange: function() {
  },
  reportSize: function() {
  }
});

// node_modules/@cloudscape-design/components/app-layout/utils/use-observed-element.js
var import_react3 = __toESM(require_react());
function useObservedElement(selectorOrRef) {
  var getElement = (0, import_react3.useCallback)(function() {
    var _a2, _b;
    if (typeof selectorOrRef === "string") {
      return document.querySelector(selectorOrRef);
    } else if (typeof selectorOrRef === "function") {
      return (_a2 = selectorOrRef()) !== null && _a2 !== void 0 ? _a2 : null;
    } else {
      return (_b = selectorOrRef === null || selectorOrRef === void 0 ? void 0 : selectorOrRef.current) !== null && _b !== void 0 ? _b : null;
    }
  }, [selectorOrRef]);
  var _a = (0, import_react3.useState)(0), height = _a[0], setHeight = _a[1];
  useResizeObserver(getElement, function(entry) {
    return setHeight(entry.borderBoxHeight);
  });
  return height;
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/split-panel.js
var import_react5 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/context.js
var import_react4 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/app-layout/visual-refresh/styles.scoped.css";
var styles_css_default = {
  "appbar": "awsui_appbar_hyvsj_8eynx_93",
  "appbar-nav": "awsui_appbar-nav_hyvsj_8eynx_117",
  "breadcrumbs": "awsui_breadcrumbs_hyvsj_8eynx_121",
  "appbar-tools": "awsui_appbar-tools_hyvsj_8eynx_125",
  "has-breadcrumbs": "awsui_has-breadcrumbs_hyvsj_8eynx_166",
  "has-notifications-content": "awsui_has-notifications-content_hyvsj_8eynx_173",
  "has-header": "awsui_has-header_hyvsj_8eynx_179",
  "has-dynamic-overlap-height": "awsui_has-dynamic-overlap-height_hyvsj_8eynx_179",
  "content-type-wizard": "awsui_content-type-wizard_hyvsj_8eynx_180",
  "content-type-cards": "awsui_content-type-cards_hyvsj_8eynx_183",
  "content-type-table": "awsui_content-type-table_hyvsj_8eynx_184",
  "has-sticky-background": "awsui_has-sticky-background_hyvsj_8eynx_187",
  "background": "awsui_background_hyvsj_8eynx_221",
  "notifications-appbar-header": "awsui_notifications-appbar-header_hyvsj_8eynx_224",
  "sticky-notifications": "awsui_sticky-notifications_hyvsj_8eynx_236",
  "overlap": "awsui_overlap_hyvsj_8eynx_242",
  "content": "awsui_content_hyvsj_8eynx_180",
  "layout": "awsui_layout_hyvsj_8eynx_329",
  "has-max-content-width": "awsui_has-max-content-width_hyvsj_8eynx_411",
  "is-overlap-disabled": "awsui_is-overlap-disabled_hyvsj_8eynx_438",
  "disable-body-scroll": "awsui_disable-body-scroll_hyvsj_8eynx_441",
  "has-sticky-notifications": "awsui_has-sticky-notifications_hyvsj_8eynx_445",
  "has-split-panel": "awsui_has-split-panel_hyvsj_8eynx_459",
  "split-panel-position-bottom": "awsui_split-panel-position-bottom_hyvsj_8eynx_459",
  "has-content-gap-left": "awsui_has-content-gap-left_hyvsj_8eynx_471",
  "has-content-gap-right": "awsui_has-content-gap-right_hyvsj_8eynx_474",
  "block-body-scroll": "awsui_block-body-scroll_hyvsj_8eynx_489",
  "container": "awsui_container_hyvsj_8eynx_497",
  "disable-content-paddings": "awsui_disable-content-paddings_hyvsj_8eynx_514",
  "is-navigation-open": "awsui_is-navigation-open_hyvsj_8eynx_519",
  "is-tools-open": "awsui_is-tools-open_hyvsj_8eynx_522",
  "is-split-panel-open": "awsui_is-split-panel-open_hyvsj_8eynx_522",
  "split-panel-position-side": "awsui_split-panel-position-side_hyvsj_8eynx_522",
  "content-type-default": "awsui_content-type-default_hyvsj_8eynx_542",
  "content-type-form": "awsui_content-type-form_hyvsj_8eynx_542",
  "unfocusable": "awsui_unfocusable_hyvsj_8eynx_583",
  "navigation-container": "awsui_navigation-container_hyvsj_8eynx_591",
  "show-navigation": "awsui_show-navigation_hyvsj_8eynx_626",
  "animating": "awsui_animating_hyvsj_8eynx_648",
  "showButtons": "awsui_showButtons_hyvsj_8eynx_1",
  "navigation": "awsui_navigation_hyvsj_8eynx_591",
  "openNavigation": "awsui_openNavigation_hyvsj_8eynx_1",
  "animated-content": "awsui_animated-content_hyvsj_8eynx_709",
  "hide-navigation": "awsui_hide-navigation_hyvsj_8eynx_718",
  "notifications": "awsui_notifications_hyvsj_8eynx_224",
  "split-panel-bottom": "awsui_split-panel-bottom_hyvsj_8eynx_785",
  "position-bottom": "awsui_position-bottom_hyvsj_8eynx_820",
  "openSplitPanelBottom": "awsui_openSplitPanelBottom_hyvsj_8eynx_1",
  "split-panel-side": "awsui_split-panel-side_hyvsj_8eynx_849",
  "position-side": "awsui_position-side_hyvsj_8eynx_877",
  "openSplitPanelSide": "awsui_openSplitPanelSide_hyvsj_8eynx_1",
  "tools-container": "awsui_tools-container_hyvsj_8eynx_914",
  "tools": "awsui_tools_hyvsj_8eynx_914",
  "openTools": "awsui_openTools_hyvsj_8eynx_1",
  "has-tools-form-persistence": "awsui_has-tools-form-persistence_hyvsj_8eynx_999",
  "hide-tools": "awsui_hide-tools_hyvsj_8eynx_1009",
  "show-tools": "awsui_show-tools_hyvsj_8eynx_1021",
  "has-tools-form": "awsui_has-tools-form_hyvsj_8eynx_999",
  "trigger": "awsui_trigger_hyvsj_8eynx_1078",
  "selected": "awsui_selected_hyvsj_8eynx_1117"
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/context.js
var defaults2 = {
  breadcrumbs: null,
  content: null,
  contentHeader: null,
  contentType: "default",
  disableBodyScroll: false,
  disableContentHeaderOverlap: false,
  disableContentPaddings: false,
  dynamicOverlapHeight: 0,
  headerHeight: 0,
  footerHeight: 0,
  handleNavigationClick: function(value) {
    return value;
  },
  handleSplitPanelClick: function() {
  },
  handleSplitPanelPreferencesChange: function() {
  },
  handleSplitPanelResize: function() {
  },
  handleToolsClick: function(value) {
    return value;
  },
  hasDefaultToolsWidth: true,
  hasNotificationsContent: false,
  hasStickyBackground: false,
  isAnyPanelOpen: false,
  isMobile: false,
  isNavigationOpen: false,
  isSplitPanelForcedPosition: false,
  isSplitPanelOpen: false,
  isToolsOpen: false,
  layoutElement: (0, import_react4.createRef)(),
  layoutWidth: 0,
  mainElement: (0, import_react4.createRef)(),
  mainOffsetLeft: 0,
  maxContentWidth: 0,
  minContentWidth: 280,
  navigation: null,
  navigationHide: false,
  navigationOpen: false,
  notifications: null,
  notificationsElement: (0, import_react4.createRef)(),
  notificationsHeight: 0,
  offsetBottom: 0,
  onNavigationChange: function() {
  },
  onSplitPanelResize: function() {
  },
  onSplitPanelToggle: function() {
  },
  onSplitPanelPreferencesChange: function() {
  },
  setDynamicOverlapHeight: function(value) {
    return void 0;
  },
  setHasStickyBackground: function(value) {
    return value;
  },
  setIsNavigationOpen: function(value) {
    return value;
  },
  setIsToolsOpen: function(value) {
    return value;
  },
  setOffsetBottom: function(value) {
    return void 0;
  },
  setSplitPanelReportedSize: function(value) {
    return void 0;
  },
  splitPanelMaxWidth: 280,
  splitPanelMinWidth: 280,
  splitPanelOpen: false,
  splitPanelPosition: "bottom",
  splitPanelPreferences: { position: "bottom" },
  splitPanelReportedSize: 0,
  splitPanelSize: 0,
  stickyNotifications: false,
  tools: null,
  toolsFocusControl: {}
};
var AppLayoutContext = (0, import_react4.createContext)(__assign({}, defaults2));
var AppLayoutProvider = import_react4.default.forwardRef(function(_a, forwardRef) {
  var _b, _c, _d;
  var toolsHide = _a.toolsHide, controlledToolsOpen = _a.toolsOpen, navigationHide = _a.navigationHide, controlledNavigationOpen = _a.navigationOpen, _e = _a.contentType, contentType = _e === void 0 ? "default" : _e, _f = _a.headerSelector, headerSelector = _f === void 0 ? "#b #h" : _f, _g = _a.footerSelector, footerSelector = _g === void 0 ? "#b #h" : _g, children = _a.children, props = __rest(_a, ["toolsHide", "toolsOpen", "navigationHide", "navigationOpen", "contentType", "headerSelector", "footerSelector", "children"]);
  var isMobile = useMobile();
  if (isDevelopment) {
    if (controlledToolsOpen && toolsHide) {
      warnOnce("AppLayout", "You have enabled both the `toolsOpen` prop and the `toolsHide` prop. This is not supported. Set `toolsOpen` to `false` when you set `toolsHide` to `true`.");
    }
  }
  var _h = (0, import_react4.useState)(0), dynamicOverlapHeight = _h[0], setDynamicOverlapHeight = _h[1];
  var _j = (0, import_react4.useState)(false), hasStickyBackground = _j[0], setHasStickyBackground = _j[1];
  var geckoMaxCssLength = ((1 << 30) - 1) / 60;
  var halfGeckoMaxCssLength = geckoMaxCssLength / 2;
  var maxContentWidth = props.maxContentWidth && props.maxContentWidth > halfGeckoMaxCssLength ? halfGeckoMaxCssLength : (_b = props.maxContentWidth) !== null && _b !== void 0 ? _b : 0;
  var minContentWidth = (_c = props.minContentWidth) !== null && _c !== void 0 ? _c : 280;
  var contentTypeDefaults = applyDefaults(contentType, { maxContentWidth, minContentWidth }, true);
  var _k = useControllable(controlledNavigationOpen, props.onNavigationChange, isMobile ? false : contentTypeDefaults.navigationOpen, { componentName: "AppLayout", controlledProp: "navigationOpen", changeHandler: "onNavigationChange" }), _l = _k[0], isNavigationOpen = _l === void 0 ? false : _l, setIsNavigationOpen = _k[1];
  var handleNavigationClick = (0, import_react4.useCallback)(function handleNavigationChange(isOpen) {
    setIsNavigationOpen(isOpen);
    fireNonCancelableEvent(props.onNavigationChange, { open: isOpen });
  }, [props.onNavigationChange, setIsNavigationOpen]);
  var toolsWidth = (_d = props.toolsWidth) !== null && _d !== void 0 ? _d : 290;
  var hasDefaultToolsWidth = props.toolsWidth === void 0;
  var _m = useControllable(controlledToolsOpen, props.onToolsChange, isMobile ? false : contentTypeDefaults.toolsOpen, { componentName: "AppLayout", controlledProp: "toolsOpen", changeHandler: "onToolsChange" }), _o = _m[0], isToolsOpen = _o === void 0 ? false : _o, setIsToolsOpen = _m[1];
  var toolsFocusControl = useFocusControl(isToolsOpen, true);
  var handleToolsClick = (0, import_react4.useCallback)(function handleToolsChange(isOpen) {
    setIsToolsOpen(isOpen);
    fireNonCancelableEvent(props.onToolsChange, { open: isOpen });
  }, [props.onToolsChange, setIsToolsOpen]);
  var navigationVisible = !navigationHide && isNavigationOpen;
  var toolsVisible = !toolsHide && isToolsOpen;
  var isAnyPanelOpen = navigationVisible || toolsVisible;
  (0, import_react4.useEffect)(function handleBodyScroll() {
    if (isMobile && (isNavigationOpen || isToolsOpen)) {
      document.body.classList.add(styles_css_default["block-body-scroll"]);
    } else {
      document.body.classList.remove(styles_css_default["block-body-scroll"]);
    }
    return function cleanup() {
      document.body.classList.remove(styles_css_default["block-body-scroll"]);
    };
  }, [isMobile, isNavigationOpen, isToolsOpen]);
  (0, import_react4.useImperativeHandle)(forwardRef, function createImperativeHandle() {
    return {
      closeNavigationIfNecessary: function() {
        isMobile && handleNavigationClick(false);
      },
      openTools: function() {
        handleToolsClick(true);
      },
      focusToolsClose: toolsFocusControl.setFocus
    };
  }, [isMobile, handleNavigationClick, handleToolsClick, toolsFocusControl.setFocus]);
  var _p = (0, import_react4.useState)(0), headerHeight = _p[0], setHeaderHeight = _p[1];
  var getHeader = (0, import_react4.useCallback)(function() {
    return document.querySelector(headerSelector);
  }, [headerSelector]);
  useResizeObserver(getHeader, function(entry) {
    return setHeaderHeight(entry.borderBoxHeight);
  });
  var _q = (0, import_react4.useState)(0), footerHeight = _q[0], setFooterHeight = _q[1];
  var getFooter = (0, import_react4.useCallback)(function() {
    return document.querySelector(footerSelector);
  }, [footerSelector]);
  useResizeObserver(getFooter, function(entry) {
    return setFooterHeight(entry.borderBoxHeight);
  });
  var splitPanelMinWidth = 280;
  var _r = (0, import_react4.useState)(splitPanelMinWidth), splitPanelMaxWidth = _r[0], setSplitPanelMaxWidth = _r[1];
  var _s = useControllable(props.splitPanelOpen, props.onSplitPanelToggle, false, { componentName: "AppLayout", controlledProp: "splitPanelOpen", changeHandler: "onSplitPanelToggle" }), isSplitPanelOpen = _s[0], setIsSplitPanelOpen = _s[1];
  var handleSplitPanelClick = (0, import_react4.useCallback)(function handleSplitPanelChange() {
    setIsSplitPanelOpen(!isSplitPanelOpen);
    fireNonCancelableEvent(props.onSplitPanelToggle, { open: !isSplitPanelOpen });
  }, [props.onSplitPanelToggle, isSplitPanelOpen, setIsSplitPanelOpen]);
  var _t = useControllable(props.splitPanelPreferences, props.onSplitPanelPreferencesChange, void 0, {
    componentName: "AppLayout",
    controlledProp: "splitPanelPreferences",
    changeHandler: "onSplitPanelPreferencesChange"
  }), splitPanelPreferences = _t[0], setSplitPanelPreferences = _t[1];
  var _u = (0, import_react4.useState)(false), isSplitPanelForcedPosition = _u[0], setSplitPanelForcedPosition = _u[1];
  var splitPanelPosition = getSplitPanelPosition(isSplitPanelForcedPosition, splitPanelPreferences);
  (0, import_react4.useLayoutEffect)(function handleSplitPanelForcePosition() {
    setSplitPanelForcedPosition(splitPanelMinWidth > splitPanelMaxWidth);
  }, [splitPanelMaxWidth, splitPanelMinWidth]);
  var _v = (0, import_react4.useState)(0), splitPanelReportedSize = _v[0], setSplitPanelReportedSize = _v[1];
  var _w = useControllable(props.splitPanelSize, props.onSplitPanelResize, getSplitPanelDefaultSize(splitPanelPosition), { componentName: "AppLayout", controlledProp: "splitPanelSize", changeHandler: "onSplitPanelResize" }), splitPanelSize = _w[0], setSplitPanelSize = _w[1];
  var handleSplitPanelResize = (0, import_react4.useCallback)(function handleSplitPanelChange(detail) {
    setSplitPanelSize(detail.size);
    fireNonCancelableEvent(props.onSplitPanelResize, detail);
  }, [props.onSplitPanelResize, setSplitPanelSize]);
  var handleSplitPanelPreferencesChange = (0, import_react4.useCallback)(function handleSplitPanelChange(detail) {
    setSplitPanelPreferences(detail);
    fireNonCancelableEvent(props.onSplitPanelPreferencesChange, detail);
  }, [props.onSplitPanelPreferencesChange, setSplitPanelPreferences]);
  var _x = useContainerQuery(function(rect) {
    return rect.width;
  }), layoutContainerQuery = _x[0], layoutElement = _x[1];
  var layoutWidth = layoutContainerQuery !== null && layoutContainerQuery !== void 0 ? layoutContainerQuery : 0;
  var mainElement = (0, import_react4.useRef)(null);
  var _y = (0, import_react4.useState)(0), mainOffsetLeft = _y[0], setMainOffsetLeft = _y[1];
  (0, import_react4.useLayoutEffect)(function handleMainOffsetLeft() {
    var _a2, _b2;
    setMainOffsetLeft((_b2 = (_a2 = mainElement === null || mainElement === void 0 ? void 0 : mainElement.current) === null || _a2 === void 0 ? void 0 : _a2.offsetLeft) !== null && _b2 !== void 0 ? _b2 : 0);
  }, [layoutWidth, isNavigationOpen, isToolsOpen, splitPanelReportedSize]);
  (0, import_react4.useLayoutEffect)(function handleSplitPanelMaxWidth() {
    var contentGapRight = 80;
    var toolsFormOffsetWidth = 160;
    var toolsOffsetWidth = isToolsOpen ? toolsWidth : 0;
    setSplitPanelMaxWidth(layoutWidth - mainOffsetLeft - minContentWidth - contentGapRight - toolsOffsetWidth - toolsFormOffsetWidth);
  }, [isNavigationOpen, isToolsOpen, layoutWidth, mainOffsetLeft, minContentWidth, toolsWidth]);
  var _z = useContainerQuery(function(rect) {
    return rect.height;
  }), notificationsContainerQuery = _z[0], notificationsElement = _z[1];
  var _0 = (0, import_react4.useState)(0), notificationsHeight = _0[0], setNotificationsHeight = _0[1];
  var _1 = (0, import_react4.useState)(false), hasNotificationsContent = _1[0], setHasNotificationsContent = _1[1];
  (0, import_react4.useEffect)(function handleNotificationsContent() {
    setNotificationsHeight(notificationsContainerQuery !== null && notificationsContainerQuery !== void 0 ? notificationsContainerQuery : 0);
    setHasNotificationsContent(notificationsContainerQuery && notificationsContainerQuery > 0 ? true : false);
  }, [notificationsContainerQuery]);
  var _2 = (0, import_react4.useState)(0), offsetBottom = _2[0], setOffsetBottom = _2[1];
  return import_react4.default.createElement(AppLayoutContext.Provider, { value: __assign(__assign(__assign({}, defaults2), props), { contentType, dynamicOverlapHeight, headerHeight, footerHeight, hasDefaultToolsWidth, handleNavigationClick, handleSplitPanelClick, handleSplitPanelPreferencesChange, handleSplitPanelResize, handleToolsClick, hasNotificationsContent, hasStickyBackground, isAnyPanelOpen, isMobile, isNavigationOpen: isNavigationOpen !== null && isNavigationOpen !== void 0 ? isNavigationOpen : false, isSplitPanelForcedPosition, isSplitPanelOpen, isToolsOpen, layoutElement, layoutWidth, mainElement, mainOffsetLeft, maxContentWidth, minContentWidth, navigationHide, notificationsElement, notificationsHeight, offsetBottom, setDynamicOverlapHeight, setHasStickyBackground, setOffsetBottom, setSplitPanelReportedSize, splitPanelMaxWidth, splitPanelMinWidth, splitPanelPosition, splitPanelPreferences, splitPanelReportedSize, splitPanelSize, toolsHide, toolsOpen: isToolsOpen, toolsWidth, toolsFocusControl }) }, children);
});

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/split-panel.js
function SplitPanel(_a) {
  var children = _a.children;
  var _b = (0, import_react5.useContext)(AppLayoutContext), handleSplitPanelClick = _b.handleSplitPanelClick, handleSplitPanelPreferencesChange = _b.handleSplitPanelPreferencesChange, handleSplitPanelResize = _b.handleSplitPanelResize, isMobile = _b.isMobile, isSplitPanelForcedPosition = _b.isSplitPanelForcedPosition, isSplitPanelOpen = _b.isSplitPanelOpen, setSplitPanelReportedSize = _b.setSplitPanelReportedSize, splitPanelPosition = _b.splitPanelPosition, splitPanelSize = _b.splitPanelSize, headerHeight = _b.headerHeight, footerHeight = _b.footerHeight;
  var _c = (0, import_react5.useState)(void 0), openButtonAriaLabel = _c[0], setOpenButtonAriaLabel = _c[1];
  var _d = (0, import_react5.useState)(), splitPanelLastInteraction = _d[0], setSplitPanelLastInteraction = _d[1];
  useEffectOnUpdate(function() {
    return setSplitPanelLastInteraction(isSplitPanelOpen ? { type: "open" } : { type: "close" });
  }, [isSplitPanelOpen]);
  useEffectOnUpdate(function() {
    return setSplitPanelLastInteraction({ type: "position" });
  }, [splitPanelPosition]);
  var splitPanelRef = (0, import_react5.useRef)(null);
  var splitPanelHeaderRef = (0, import_react5.useRef)(null);
  var context = {
    bottomOffset: 0,
    getMaxHeight: function() {
      var availableHeight = document.documentElement.clientHeight - headerHeight - footerHeight;
      return availableHeight < 400 ? availableHeight - 40 : availableHeight - 250;
    },
    getMaxWidth: function() {
      return document.documentElement.clientWidth;
    },
    getHeader: function() {
      return splitPanelHeaderRef.current;
    },
    isForcedPosition: isSplitPanelForcedPosition,
    isMobile,
    isOpen: isSplitPanelOpen,
    isRefresh: true,
    leftOffset: 0,
    onPreferencesChange: handleSplitPanelPreferencesChange,
    onResize: handleSplitPanelResize,
    onToggle: handleSplitPanelClick,
    position: splitPanelPosition,
    reportSize: setSplitPanelReportedSize,
    rightOffset: 0,
    size: splitPanelSize || 0,
    splitPanelRef,
    splitPanelHeaderRef,
    topOffset: 0,
    openButtonAriaLabel,
    setOpenButtonAriaLabel,
    lastInteraction: splitPanelLastInteraction
  };
  return import_react5.default.createElement(SplitPanelContext.Provider, { value: __assign({}, context) }, children);
}
function SplitPanelBottom() {
  var _a = (0, import_react5.useContext)(AppLayoutContext), disableBodyScroll = _a.disableBodyScroll, isNavigationOpen = _a.isNavigationOpen, isSplitPanelOpen = _a.isSplitPanelOpen, isToolsOpen = _a.isToolsOpen, splitPanel = _a.splitPanel, splitPanelReportedSize = _a.splitPanelReportedSize;
  var _b = (0, import_react5.useContext)(SplitPanelContext), splitPanelPosition = _b.position, getHeader = _b.getHeader;
  var headerHeight = useObservedElement(getHeader);
  if (!splitPanel) {
    return null;
  }
  return import_react5.default.createElement(Transition, { "in": isSplitPanelOpen !== null && isSplitPanelOpen !== void 0 ? isSplitPanelOpen : false, exit: false }, function(state, transitionEventsRef) {
    var _a2, _b2;
    return import_react5.default.createElement(
      "section",
      { className: clsx_m_default(styles_css_default["split-panel-bottom"], styles_css_default["position-".concat(splitPanelPosition)], (_a2 = {}, _a2[styles_css_default.animating] = state === "entering", _a2[styles_css_default["disable-body-scroll"]] = disableBodyScroll, _a2[styles_css_default["is-navigation-open"]] = isNavigationOpen, _a2[styles_css_default["is-split-panel-open"]] = isSplitPanelOpen, _a2[styles_css_default["is-tools-open"]] = isToolsOpen, _a2)), ref: transitionEventsRef, style: (_b2 = {}, _b2[custom_css_properties_default.splitPanelReportedSize] = "".concat(splitPanelReportedSize, "px"), _b2[custom_css_properties_default.splitPanelReportedHeaderSize] = "".concat(headerHeight, "px"), _b2) },
      import_react5.default.createElement(SplitPanel, null),
      splitPanelPosition === "bottom" && splitPanel
    );
  });
}
function SplitPanelSide() {
  var _a = (0, import_react5.useContext)(AppLayoutContext), isSplitPanelOpen = _a.isSplitPanelOpen, splitPanel = _a.splitPanel, splitPanelMaxWidth = _a.splitPanelMaxWidth, splitPanelMinWidth = _a.splitPanelMinWidth, splitPanelReportedSize = _a.splitPanelReportedSize;
  var splitPanelPosition = (0, import_react5.useContext)(SplitPanelContext).position;
  if (!splitPanel) {
    return null;
  }
  return import_react5.default.createElement(Transition, { "in": isSplitPanelOpen !== null && isSplitPanelOpen !== void 0 ? isSplitPanelOpen : false, exit: false }, function(state, transitionEventsRef) {
    var _a2, _b;
    return import_react5.default.createElement(
      "section",
      { "aria-hidden": !isSplitPanelOpen || splitPanelPosition === "bottom" ? true : false, className: clsx_m_default(styles_css_default["split-panel-side"], styles_css_default["position-".concat(splitPanelPosition)], (_a2 = {}, _a2[styles_css_default.animating] = state === "entering", _a2[styles_css_default["is-split-panel-open"]] = isSplitPanelOpen, _a2)), ref: transitionEventsRef, style: (_b = {}, _b[custom_css_properties_default.splitPanelMaxWidth] = "".concat(splitPanelMaxWidth, "px"), _b[custom_css_properties_default.splitPanelMinWidth] = "".concat(splitPanelMinWidth, "px"), _b[custom_css_properties_default.splitPanelReportedHeaderSize] = "".concat(splitPanelReportedSize, "px"), _b) },
      import_react5.default.createElement("div", { className: clsx_m_default(styles_css_default["animated-content"]) }, splitPanelPosition === "side" && splitPanel)
    );
  });
}
function getSplitPanelPosition(isSplitPanelForcedPosition, splitPanelPreferences) {
  var splitPanelPosition = "bottom";
  if (!isSplitPanelForcedPosition && (splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) === "side") {
    splitPanelPosition = "side";
  }
  return splitPanelPosition;
}
SplitPanel.Bottom = SplitPanelBottom;
SplitPanel.Side = SplitPanelSide;
var split_panel_default = SplitPanel;

export {
  useControllable,
  SplitPanelContext,
  styles_css_default,
  useObservedElement,
  split_panel_default,
  CONSTRAINED_PAGE_HEIGHT,
  MAIN_PANEL_MIN_HEIGHT,
  CONSTRAINED_MAIN_PANEL_MIN_HEIGHT,
  getSplitPanelDefaultSize,
  applyDefaults,
  useFocusControl,
  AppLayoutContext,
  AppLayoutProvider
};
//# sourceMappingURL=chunk-HKQ3KBXU.js.map

import {
  useAppLayoutContext
} from "./chunk-AVYWC3I6.js";
import {
  custom_css_properties_default
} from "./chunk-J3BRM5E3.js";
import {
  getOverflowParents
} from "./chunk-ZNRLVYB4.js";
import {
  useMobile
} from "./chunk-LHKG36BJ.js";
import {
  findUpUntil,
  supportsStickyPosition,
  useVisualRefresh
} from "./chunk-4EXFA7SU.js";
import {
  require_react
} from "./chunk-X6MODOAL.js";
import {
  __toESM
} from "./chunk-J43GMYXM.js";

// node_modules/@cloudscape-design/components/container/use-sticky-header.js
var import_react = __toESM(require_react());
var StickyHeaderContext = (0, import_react.createContext)({ isStuck: false });
var useStickyHeader = function(rootRef, headerRef, __stickyHeader, __stickyOffset) {
  var currentRootRef = rootRef.current;
  var currentHeaderRef = headerRef.current;
  var totalBorder = (0, import_react.useMemo)(function() {
    var containerRootBorder = currentRootRef ? parseInt(getComputedStyle(currentRootRef).getPropertyValue("border-top-width"), 10) : 0;
    var headerBorder = currentHeaderRef ? parseInt(getComputedStyle(currentHeaderRef).getPropertyValue("border-top-width"), 10) : 0;
    return containerRootBorder + headerBorder;
  }, [currentRootRef, currentHeaderRef]);
  var stickyOffsetTop = useAppLayoutContext().stickyOffsetTop;
  var isSticky = useSupportsStickyHeader() && !!__stickyHeader;
  var isRefresh = useVisualRefresh();
  var _a = (0, import_react.useState)(false), hasInnerOverflowParents = _a[0], setHasInnerOverflowParents = _a[1];
  var _b = (0, import_react.useState)(false), isStuck = _b[0], setIsStuck = _b[1];
  (0, import_react.useLayoutEffect)(function() {
    if (rootRef.current) {
      var overflowParents = getOverflowParents(rootRef.current);
      var mainElement = findUpUntil(rootRef.current, function(elem) {
        return elem.tagName === "MAIN";
      });
      setHasInnerOverflowParents(overflowParents.length > 0 && overflowParents[0] !== mainElement);
    }
  }, [rootRef]);
  var effectiveStickyOffset = __stickyOffset !== null && __stickyOffset !== void 0 ? __stickyOffset : hasInnerOverflowParents ? 0 : stickyOffsetTop;
  var computedOffset = "".concat(effectiveStickyOffset - totalBorder, "px");
  if (isRefresh && !hasInnerOverflowParents) {
    computedOffset = "var(".concat(custom_css_properties_default.offsetTopWithNotifications, ", ").concat(computedOffset, ")");
  }
  var stickyStyles = isSticky ? {
    style: {
      top: computedOffset
    }
  } : {};
  var checkIfStuck = (0, import_react.useCallback)(function() {
    if (rootRef.current && headerRef.current) {
      var rootTop = rootRef.current.getBoundingClientRect().top;
      var headerTop = headerRef.current.getBoundingClientRect().top;
      if (rootTop + totalBorder < headerTop) {
        setIsStuck(true);
      } else {
        setIsStuck(false);
      }
    }
  }, [rootRef, headerRef, totalBorder]);
  (0, import_react.useEffect)(function() {
    if (isSticky) {
      window.addEventListener("scroll", checkIfStuck, true);
      window.addEventListener("resize", checkIfStuck);
      return function() {
        window.removeEventListener("scroll", checkIfStuck, true);
        window.removeEventListener("resize", checkIfStuck);
      };
    }
  }, [isSticky, checkIfStuck]);
  return {
    isSticky,
    isStuck,
    stickyStyles
  };
};
function useSupportsStickyHeader() {
  var isMobile = useMobile();
  return supportsStickyPosition() && !isMobile;
}

export {
  StickyHeaderContext,
  useStickyHeader,
  useSupportsStickyHeader
};
//# sourceMappingURL=chunk-OVR5PN5T.js.map

{
  "version": 3,
  "sources": ["../../src/internal/hooks/use-controllable/index.ts", "../../src/app-layout/defaults.ts", "../../src/app-layout/utils/use-focus-control.ts", "../../src/split-panel/utils/size-utils.ts", "../../src/app-layout/visual-refresh/context.tsx", "../../src/app-layout/visual-refresh/split-panel.tsx", "../../src/internal/context/split-panel-context.ts", "../../@cloudscape-design/components/app-layout/visual-refresh/styles.css.js", "../../src/app-layout/utils/use-observed-element.ts"],
  "sourcesContent": ["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport * as React from 'react';\nimport { isDevelopment } from '../../is-development';\nimport { warnOnce } from '../../logging';\n\ninterface PropertyDescription {\n  componentName: string;\n  controlledProp: string;\n  changeHandler: string;\n}\n\n/**\n * This hook allows you to make a component that can be used both in controlled mode and uncontrolled mode.\n * Pass in your component's props, and then implement your component as if it was only controlled.\n * When calling onChange callbacks (or the equivalent for your property), you need to call both the callback returned by this function\n * as well as the callback provided in your component's props.\n *\n * A component determines its mode (either controlled or uncontrolled) on the first render and keeps it for its lifetime. The mode cannot\n * be switched later.\n *\n *\n * Example usage:\n * ```jsx\n * const [checked, setChecked] = useControllable(\n *     props,\n *     props.defaultEnabled ?? false,\n *     {\n *        componentName: 'MyCheckboxComponent',\n *        controlledProp: 'enabled',\n *        changeHandler: 'onCheckedStatusChange'\n *     }\n * )\n *\n * return\n *  <input\n *   type=\"checkbox\"\n *   checked={checked}\n *   onChange={event => {\n *    setChecked(event.target.checked);\n *    fireNonCancelableEvent(props.onCheckedStatusChange, { checked: event.target.checked })\n *   }} />\n * ```\n *\n * @param controlledValue value for the controlled mode\n * @param handler update handler for controlled mode\n * @param defaultValue initial value for uncontrolled mode\n * @param description property metadata\n */\nexport function useControllable<ValueType>(\n  controlledValue: ValueType,\n  handler: ((...args: any[]) => unknown) | undefined,\n  defaultValue: ValueType,\n  { componentName, changeHandler, controlledProp }: PropertyDescription\n) {\n  // The decision whether a component is controlled or uncontrolled is made on its first render and cannot be changed afterwards.\n  const isControlled = React.useState(controlledValue !== undefined)[0];\n\n  if (isDevelopment) {\n    // Print a warning if the component switches between controlled and uncontrolled mode.\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (isControlled && handler === undefined) {\n        warnOnce(\n          componentName,\n          `You provided a \\`${controlledProp}\\` prop without an \\`${changeHandler}\\` handler. This will render a non-interactive component.`\n        );\n      }\n    }, [handler, isControlled, componentName, changeHandler, controlledProp]);\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      const isControlledNow = controlledValue !== undefined;\n      if (isControlled !== isControlledNow) {\n        const initialMode = isControlled ? 'controlled' : 'uncontrolled';\n        const modeNow = isControlledNow ? 'controlled' : 'uncontrolled';\n        warnOnce(\n          componentName,\n          `A component tried to change ${initialMode} '${controlledProp}' property to be ${modeNow}. ` +\n            `This is not supported. Properties should not switch from ${initialMode} to ${modeNow} (or vice versa). ` +\n            `Decide between using a controlled or uncontrolled mode for the lifetime of the component. ` +\n            `More info: https://fb.me/react-controlled-components`\n        );\n      }\n    }, [isControlled, controlledProp, componentName, controlledValue]);\n  }\n\n  // This is the value that is used if the component is uncontrolled.\n  const [valueState, setValue] = React.useState(defaultValue);\n  const [valueHasBeenSet, setValueHasBeenSet] = React.useState(false);\n\n  // We track changes to the defaultValue\n  const currentUncontrolledValue = valueHasBeenSet ? valueState : defaultValue;\n\n  const setUncontrolledValue = React.useCallback(\n    (newValue: React.SetStateAction<ValueType>) => {\n      setValue(newValue);\n      setValueHasBeenSet(true);\n    },\n    [setValue, setValueHasBeenSet]\n  );\n\n  if (isControlled) {\n    return [controlledValue, defaultCallback] as const;\n  } else {\n    return [currentUncontrolledValue, setUncontrolledValue] as const;\n  }\n}\n\nfunction defaultCallback() {\n  return void 0;\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AppLayoutProps } from './interfaces';\n\nconst defaultContentTypeState: AppLayoutState = {\n  navigationOpen: true,\n  minContentWidth: 280,\n  maxContentWidth: undefined,\n};\n\nconst defaults: Record<AppLayoutProps.ContentType, AppLayoutState> = {\n  default: {\n    ...defaultContentTypeState,\n  },\n  cards: {\n    navigationOpen: true,\n    minContentWidth: 280,\n    maxContentWidth: undefined,\n  },\n  form: {\n    navigationOpen: false,\n    minContentWidth: 280,\n    maxContentWidth: 800,\n  },\n  table: {\n    navigationOpen: true,\n    minContentWidth: 280,\n    maxContentWidth: undefined,\n  },\n  wizard: {\n    navigationOpen: false,\n    minContentWidth: 280,\n    maxContentWidth: 1080,\n  },\n};\n\ninterface AppLayoutState {\n  navigationOpen?: boolean;\n  toolsOpen?: boolean;\n  minContentWidth?: number;\n  maxContentWidth?: number | undefined;\n}\n\nexport function applyDefaults(\n  contentType: AppLayoutProps.ContentType,\n  stateFromProps: AppLayoutState,\n  isRefresh: boolean\n): AppLayoutState {\n  const contentTypeDefaults = isRefresh\n    ? { ...defaults[contentType], maxContentWidth: undefined }\n    : defaults[contentType];\n\n  return {\n    maxContentWidth: stateFromProps.maxContentWidth ?? contentTypeDefaults.maxContentWidth,\n    minContentWidth: stateFromProps.minContentWidth ?? contentTypeDefaults.minContentWidth,\n    navigationOpen: stateFromProps.navigationOpen ?? contentTypeDefaults.navigationOpen,\n    toolsOpen: stateFromProps.toolsOpen ?? contentTypeDefaults.toolsOpen,\n  };\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { RefObject, useCallback, useLayoutEffect, useRef } from 'react';\nimport { ButtonProps } from '../../button/interfaces';\n\nexport interface FocusControlState {\n  refs: {\n    toggle: RefObject<ButtonProps.Ref>;\n    close: RefObject<ButtonProps.Ref>;\n  };\n  setFocus: () => void;\n  loseFocus: () => void;\n}\n\nexport function useFocusControl(isOpen: boolean, restoreFocus = false): FocusControlState {\n  const refs = {\n    toggle: useRef<ButtonProps.Ref>(null),\n    close: useRef<ButtonProps.Ref>(null),\n  };\n  const previousFocusedElement = useRef<HTMLElement>();\n\n  const setFocus = useCallback(() => {\n    // due to mounting/remounting, this hook gets called multiple times for a single change,\n    // so we ignore any calls where the refs are undefined\n    if (!(refs.toggle.current || refs.close.current)) {\n      return;\n    }\n    if (isOpen) {\n      previousFocusedElement.current = document.activeElement as HTMLElement;\n      refs.close.current?.focus();\n    } else {\n      if (restoreFocus && previousFocusedElement.current && document.contains(previousFocusedElement.current)) {\n        previousFocusedElement.current.focus();\n        previousFocusedElement.current = undefined;\n      } else {\n        refs.toggle.current?.focus();\n      }\n    }\n  }, [isOpen, restoreFocus, refs.close, refs.toggle]);\n\n  const loseFocus = useCallback(() => {\n    previousFocusedElement.current = undefined;\n  }, []);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useLayoutEffect(setFocus, [isOpen, restoreFocus]);\n\n  return { refs, setFocus, loseFocus };\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * The page height where the page is considered constrained.\n */\nexport const CONSTRAINED_PAGE_HEIGHT = 400;\n\n/**\n * Based on approximate height of breadcrumb, table header, and the first table row\n */\nexport const MAIN_PANEL_MIN_HEIGHT = 250;\n\n/**\n * Based on approximate height of app bar on comfortable mode on mobile.\n */\nexport const CONSTRAINED_MAIN_PANEL_MIN_HEIGHT = 40;\n\n/**\n * Estimate a default split panel size for the first render based on the document size.\n */\nexport function getSplitPanelDefaultSize(position: 'side' | 'bottom') {\n  if (typeof document === 'undefined') {\n    return 0; // render the split panel in its minimum possible size\n  }\n  return position === 'side' ? document.documentElement.clientWidth / 3 : document.documentElement.clientHeight / 2;\n}\n\nexport function getLimitedValue(min: number, value: number, max: number) {\n  if (min > max) {\n    return min;\n  }\n  if (value < min) {\n    return min;\n  }\n  if (value > max) {\n    return max;\n  }\n  return value;\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, {\n  createContext,\n  createRef,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from 'react';\nimport { AppLayoutProps } from '../interfaces';\nimport { fireNonCancelableEvent } from '../../internal/events';\nimport { getSplitPanelPosition } from './split-panel';\nimport { useControllable } from '../../internal/hooks/use-controllable';\nimport { useMobile } from '../../internal/hooks/use-mobile';\nimport { useContainerQuery, useResizeObserver } from '../../internal/hooks/container-queries';\nimport { getSplitPanelDefaultSize } from '../../split-panel/utils/size-utils';\nimport styles from './styles.css.js';\nimport { isDevelopment } from '../../internal/is-development';\nimport { warnOnce } from '../../internal/logging';\nimport { applyDefaults } from '../defaults';\nimport { FocusControlState, useFocusControl } from '../utils/use-focus-control';\n\ninterface AppLayoutContextProps extends AppLayoutProps {\n  dynamicOverlapHeight: number;\n  handleSplitPanelClick: () => void;\n  handleNavigationClick: (isOpen: boolean) => void;\n  handleSplitPanelPreferencesChange: (detail: AppLayoutProps.SplitPanelPreferences) => void;\n  handleSplitPanelResize: (detail: { size: number }) => void;\n  handleToolsClick: (value: boolean) => void;\n  hasDefaultToolsWidth: boolean;\n  hasNotificationsContent: boolean;\n  hasStickyBackground: boolean;\n  isAnyPanelOpen: boolean;\n  isMobile: boolean;\n  isNavigationOpen: boolean;\n  isSplitPanelForcedPosition: boolean;\n  isSplitPanelOpen?: boolean;\n  isToolsOpen: boolean;\n  layoutElement: React.Ref<HTMLElement>;\n  layoutWidth: number;\n  mainElement: React.Ref<HTMLDivElement>;\n  mainOffsetLeft: number;\n  notificationsElement: React.Ref<HTMLDivElement>;\n  notificationsHeight: number;\n  offsetBottom: number;\n  setDynamicOverlapHeight: (value: number) => void;\n  setHasStickyBackground: (value: boolean) => void;\n  setIsNavigationOpen: (value: boolean) => void;\n  setIsToolsOpen: (value: boolean) => void;\n  setOffsetBottom: (value: number) => void;\n  setSplitPanelReportedSize: (value: number) => void;\n  headerHeight: number;\n  footerHeight: number;\n  splitPanelMaxWidth: number;\n  splitPanelMinWidth: number;\n  splitPanelPosition: AppLayoutProps.SplitPanelPosition;\n  splitPanelReportedSize: number;\n  toolsFocusControl: FocusControlState;\n}\n\n// TODO simplify default params + typings\nconst defaults: AppLayoutContextProps = {\n  breadcrumbs: null,\n  content: null,\n  contentHeader: null,\n  contentType: 'default',\n  disableBodyScroll: false,\n  disableContentHeaderOverlap: false,\n  disableContentPaddings: false,\n  dynamicOverlapHeight: 0,\n  headerHeight: 0,\n  footerHeight: 0,\n  handleNavigationClick: (value: boolean) => value,\n  handleSplitPanelClick: () => {},\n  handleSplitPanelPreferencesChange: () => {},\n  handleSplitPanelResize: () => {},\n  handleToolsClick: (value: boolean) => value,\n  hasDefaultToolsWidth: true,\n  hasNotificationsContent: false,\n  hasStickyBackground: false,\n  isAnyPanelOpen: false,\n  isMobile: false,\n  isNavigationOpen: false,\n  isSplitPanelForcedPosition: false,\n  isSplitPanelOpen: false,\n  isToolsOpen: false,\n  // TODO: these refs are currently only instantiated once globally\n  layoutElement: createRef<HTMLElement>(),\n  layoutWidth: 0,\n  mainElement: createRef<HTMLDivElement>(),\n  mainOffsetLeft: 0,\n  maxContentWidth: 0,\n  minContentWidth: 280,\n  navigation: null,\n  navigationHide: false,\n  navigationOpen: false,\n  notifications: null,\n  notificationsElement: createRef<HTMLDivElement>(),\n  notificationsHeight: 0,\n  offsetBottom: 0,\n  onNavigationChange: () => {},\n  onSplitPanelResize: () => {},\n  onSplitPanelToggle: () => {},\n  onSplitPanelPreferencesChange: () => {},\n  setDynamicOverlapHeight: (value: number) => void value,\n  setHasStickyBackground: (value: boolean) => value,\n  setIsNavigationOpen: (value: boolean) => value,\n  setIsToolsOpen: (value: boolean) => value,\n  setOffsetBottom: (value: number) => void value,\n  setSplitPanelReportedSize: (value: number) => void value,\n  splitPanelMaxWidth: 280,\n  splitPanelMinWidth: 280,\n  splitPanelOpen: false,\n  splitPanelPosition: 'bottom',\n  splitPanelPreferences: { position: 'bottom' },\n  splitPanelReportedSize: 0,\n  splitPanelSize: 0,\n  stickyNotifications: false,\n  tools: null,\n  toolsFocusControl: {} as FocusControlState,\n};\n\n/**\n * The default values are destructured in the context instantiation to\n * prevent downstream Typescript errors. This could likely be replaced\n * by a context interface definition that extends the AppLayout interface.\n */\nexport const AppLayoutContext = createContext({ ...defaults });\n\ntype AppLayoutProviderProps = AppLayoutProps & {\n  children: React.ReactNode;\n};\n\nexport const AppLayoutProvider = React.forwardRef(\n  (\n    {\n      toolsHide,\n      toolsOpen: controlledToolsOpen,\n      navigationHide,\n      navigationOpen: controlledNavigationOpen,\n      contentType = 'default',\n      headerSelector = '#b #h',\n      footerSelector = '#b #h',\n      children,\n      ...props\n    }: AppLayoutProviderProps,\n    forwardRef: React.Ref<AppLayoutProps.Ref>\n  ) => {\n    const isMobile = useMobile();\n\n    if (isDevelopment) {\n      if (controlledToolsOpen && toolsHide) {\n        warnOnce(\n          'AppLayout',\n          `You have enabled both the \\`toolsOpen\\` prop and the \\`toolsHide\\` prop. This is not supported. Set \\`toolsOpen\\` to \\`false\\` when you set \\`toolsHide\\` to \\`true\\`.`\n        );\n      }\n    }\n\n    /**\n     * The overlap height has a default set in CSS but can also be dynamically overridden\n     * for content types (such as Table and Wizard) that have variable size content in the overlap.\n     * If a child component utilizes a sticky header the hasStickyBackground property will determine\n     * if the background remains in the same vertical position.\n     */\n    const [dynamicOverlapHeight, setDynamicOverlapHeight] = useState(0);\n    const [hasStickyBackground, setHasStickyBackground] = useState(false);\n\n    /**\n     * Set the default values for minimum and maximum content width.\n     */\n    const geckoMaxCssLength = ((1 << 30) - 1) / 60;\n    const halfGeckoMaxCssLength = geckoMaxCssLength / 2;\n    // CSS lengths in Gecko are limited to at most (1<<30)-1 app units (Gecko uses 60 as app unit).\n    // Limit the maxContentWidth to the half of the upper boundary (\u22484230^2) to be on the safe side.\n    const maxContentWidth =\n      props.maxContentWidth && props.maxContentWidth > halfGeckoMaxCssLength\n        ? halfGeckoMaxCssLength\n        : props.maxContentWidth ?? 0;\n    const minContentWidth = props.minContentWidth ?? 280;\n\n    /**\n     * Determine the default state of the Navigation and Tools drawers.\n     * Mobile viewports should be closed by default under all circumstances.\n     * If the navigationOpen prop has been set then that should take precedence\n     * over the contentType prop. Desktop viewports that do not have the\n     * navigationOpen or contentType props set will use the default contentType.\n     */\n    const contentTypeDefaults = applyDefaults(contentType, { maxContentWidth, minContentWidth }, true);\n\n    /**\n     * The useControllable hook will set the default value and manage either\n     * the controlled or uncontrolled state of the Navigation drawer. The logic\n     * for determining the default state is colocated with the Navigation component.\n     *\n     * The callback that will be passed to the Navigation and AppBar\n     * components to handle the click events that will change the state\n     * of the Navigation drawer. It will set the Navigation state with the\n     * useControllable hook and also fire the onNavigationChange function to\n     * emit the state change.\n     */\n    const [isNavigationOpen = false, setIsNavigationOpen] = useControllable(\n      controlledNavigationOpen,\n      props.onNavigationChange,\n      isMobile ? false : contentTypeDefaults.navigationOpen,\n      { componentName: 'AppLayout', controlledProp: 'navigationOpen', changeHandler: 'onNavigationChange' }\n    );\n\n    const handleNavigationClick = useCallback(\n      function handleNavigationChange(isOpen: boolean) {\n        setIsNavigationOpen(isOpen);\n        fireNonCancelableEvent(props.onNavigationChange, { open: isOpen });\n      },\n      [props.onNavigationChange, setIsNavigationOpen]\n    );\n\n    /**\n     * The useControllable hook will set the default value and manage either\n     * the controlled or uncontrolled state of the Tools drawer. The logic\n     * for determining the default state is colocated with the Tools component.\n     *\n     * The callback that will be passed to the Navigation and AppBar\n     * components to handle the click events that will change the state\n     * of the Tools drawer. It will set the Tools state with the\n     * useControllable hook and also fire the onToolsChange function to\n     * emit the state change.\n     */\n    const toolsWidth = props.toolsWidth ?? 290;\n    const hasDefaultToolsWidth = props.toolsWidth === undefined;\n\n    const [isToolsOpen = false, setIsToolsOpen] = useControllable(\n      controlledToolsOpen,\n      props.onToolsChange,\n      isMobile ? false : contentTypeDefaults.toolsOpen,\n      { componentName: 'AppLayout', controlledProp: 'toolsOpen', changeHandler: 'onToolsChange' }\n    );\n\n    const toolsFocusControl = useFocusControl(isToolsOpen, true);\n\n    const handleToolsClick = useCallback(\n      function handleToolsChange(isOpen: boolean) {\n        setIsToolsOpen(isOpen);\n        fireNonCancelableEvent(props.onToolsChange, { open: isOpen });\n      },\n      [props.onToolsChange, setIsToolsOpen]\n    );\n\n    const navigationVisible = !navigationHide && isNavigationOpen;\n    const toolsVisible = !toolsHide && isToolsOpen;\n    const isAnyPanelOpen = navigationVisible || toolsVisible;\n\n    /**\n     * On mobile viewports the navigation and tools drawers are adjusted to a fixed position\n     * that consumes 100% of the viewport height and width. The body content could potentially\n     * be scrollable underneath the drawer. In order to prevent this a CSS class needs to be\n     * added to the document body that sets overflow to hidden.\n     */\n    useEffect(\n      function handleBodyScroll() {\n        if (isMobile && (isNavigationOpen || isToolsOpen)) {\n          document.body.classList.add(styles['block-body-scroll']);\n        } else {\n          document.body.classList.remove(styles['block-body-scroll']);\n        }\n\n        // Ensure the CSS class is removed from the body on side effect cleanup\n        return function cleanup() {\n          document.body.classList.remove(styles['block-body-scroll']);\n        };\n      },\n      [isMobile, isNavigationOpen, isToolsOpen]\n    );\n\n    /**\n     * The useImperativeHandle hook in conjunction with the forwardRef function\n     * in the AppLayout component definition expose the following callable\n     * functions to component consumers when they put a ref as a property on\n     * their component implementation.\n     */\n    useImperativeHandle(\n      forwardRef,\n      function createImperativeHandle() {\n        return {\n          closeNavigationIfNecessary: function () {\n            isMobile && handleNavigationClick(false);\n          },\n          openTools: function () {\n            handleToolsClick(true);\n          },\n          focusToolsClose: toolsFocusControl.setFocus,\n        };\n      },\n      [isMobile, handleNavigationClick, handleToolsClick, toolsFocusControl.setFocus]\n    );\n\n    /**\n     * Query the DOM for the header and footer elements based on the selectors provided\n     * by the properties and pass the heights to the custom property definitions.\n     */\n    const [headerHeight, setHeaderHeight] = useState(0);\n    const getHeader = useCallback(() => document.querySelector(headerSelector), [headerSelector]);\n    useResizeObserver(getHeader, entry => setHeaderHeight(entry.borderBoxHeight));\n\n    const [footerHeight, setFooterHeight] = useState(0);\n    const getFooter = useCallback(() => document.querySelector(footerSelector), [footerSelector]);\n    useResizeObserver(getFooter, entry => setFooterHeight(entry.borderBoxHeight));\n\n    /**\n     * Set the default values for the minimum and maximum Split Panel width when it is\n     * in the side position. The useLayoutEffect will compute the available space in the\n     * DOM for the Split Panel given the current state. The minimum and maximum\n     * widths will potentially trigger a side effect that will put the Split Panel into\n     * a forced position on the bottom.\n     */\n    const splitPanelMinWidth = 280;\n    const [splitPanelMaxWidth, setSplitPanelMaxWidth] = useState(splitPanelMinWidth);\n\n    /**\n     * The useControllable hook will set the default value and manage either\n     * the controlled or uncontrolled state of the Split Panel. By default\n     * the Split Panel should always be closed on page load.\n     *\n     * The callback that will be passed to the SplitPanel component\n     * to handle the click events that will change the state of the SplitPanel\n     * to open or closed given the current state. It will set the isSplitPanelOpen\n     * controlled state and fire the onSplitPanelToggle event.\n     */\n    const [isSplitPanelOpen, setIsSplitPanelOpen] = useControllable(\n      props.splitPanelOpen,\n      props.onSplitPanelToggle,\n      false,\n      { componentName: 'AppLayout', controlledProp: 'splitPanelOpen', changeHandler: 'onSplitPanelToggle' }\n    );\n\n    const handleSplitPanelClick = useCallback(\n      function handleSplitPanelChange() {\n        setIsSplitPanelOpen(!isSplitPanelOpen);\n        fireNonCancelableEvent(props.onSplitPanelToggle, { open: !isSplitPanelOpen });\n      },\n      [props.onSplitPanelToggle, isSplitPanelOpen, setIsSplitPanelOpen]\n    );\n\n    /**\n     * The useControllable hook will manage the controlled or uncontrolled\n     * state of the splitPanelPreferences. By default the splitPanelPreferences\n     * is undefined. When set the object shape should have a single key to indicate\n     * either bottom or side position.\n     *\n     * The callback that will handle changes to the splitPanelPreferences\n     * object that will determine if the SplitPanel is rendered either on the\n     * bottom of the viewport or within the Tools container.\n     */\n    const [splitPanelPreferences, setSplitPanelPreferences] = useControllable(\n      props.splitPanelPreferences,\n      props.onSplitPanelPreferencesChange,\n      undefined,\n      {\n        componentName: 'AppLayout',\n        controlledProp: 'splitPanelPreferences',\n        changeHandler: 'onSplitPanelPreferencesChange',\n      }\n    );\n\n    /**\n     * The Split Panel will be in forced (bottom) position if the defined minimum width is\n     * greater than the maximum width. In other words, the maximum width is the currently\n     * available horizontal space based on all other components that are rendered. If the\n     * minimum width exceeds this value then there is not enough horizontal space and we must\n     * force it to the bottom position.\n     */\n    const [isSplitPanelForcedPosition, setSplitPanelForcedPosition] = useState(false);\n    const splitPanelPosition = getSplitPanelPosition(isSplitPanelForcedPosition, splitPanelPreferences);\n\n    useLayoutEffect(\n      function handleSplitPanelForcePosition() {\n        setSplitPanelForcedPosition(splitPanelMinWidth > splitPanelMaxWidth);\n      },\n      [splitPanelMaxWidth, splitPanelMinWidth]\n    );\n\n    /**\n     * The useControllable hook will set the default size of the SplitPanel based\n     * on the default position set in the splitPanelPreferences. The logic for the\n     * default size is contained in the SplitPanel component. The splitPanelControlledSize\n     * will be bound to the size property in the SplitPanel context for rendering.\n     *\n     * The callback that will be passed to the SplitPanel component\n     * to handle the resize events that will change the size of the SplitPanel.\n     * It will set the splitPanelControlledSize controlled state and fire the\n     * onSplitPanelResize event.\n     */\n    const [splitPanelReportedSize, setSplitPanelReportedSize] = useState(0);\n\n    const [splitPanelSize, setSplitPanelSize] = useControllable(\n      props.splitPanelSize,\n      props.onSplitPanelResize,\n      getSplitPanelDefaultSize(splitPanelPosition),\n      { componentName: 'AppLayout', controlledProp: 'splitPanelSize', changeHandler: 'onSplitPanelResize' }\n    );\n\n    const handleSplitPanelResize = useCallback(\n      function handleSplitPanelChange(detail: { size: number }) {\n        setSplitPanelSize(detail.size);\n        fireNonCancelableEvent(props.onSplitPanelResize, detail);\n      },\n      [props.onSplitPanelResize, setSplitPanelSize]\n    );\n\n    const handleSplitPanelPreferencesChange = useCallback(\n      function handleSplitPanelChange(detail: AppLayoutProps.SplitPanelPreferences) {\n        setSplitPanelPreferences(detail);\n        fireNonCancelableEvent(props.onSplitPanelPreferencesChange, detail);\n      },\n      [props.onSplitPanelPreferencesChange, setSplitPanelPreferences]\n    );\n\n    /**\n     * The Layout element is not necessarily synonymous with the client\n     * viewport width. There can be content in the horizontal viewport\n     * that exists on either side of the AppLayout. This resize observer\n     * will set the custom property of the Layout element width that\n     * is used for various horizontal constraints such as the maximum\n     * allowed width of the Tools container.\n     *\n     * The offsetLeft of the Main will return the distance that the\n     * Main element has from the left edge of the Layout component.\n     * The offsetLeft value can vary based on the presence and state\n     * of the Navigation as well as content gaps in the grid definition.\n     * This value is used to determine the max width constraint calculation\n     * for the Tools container.\n     */\n    const [layoutContainerQuery, layoutElement] = useContainerQuery(rect => rect.width);\n    const layoutWidth = layoutContainerQuery ?? 0;\n\n    const mainElement = useRef<HTMLDivElement>(null);\n    const [mainOffsetLeft, setMainOffsetLeft] = useState(0);\n\n    useLayoutEffect(\n      function handleMainOffsetLeft() {\n        setMainOffsetLeft(mainElement?.current?.offsetLeft ?? 0);\n      },\n      [layoutWidth, isNavigationOpen, isToolsOpen, splitPanelReportedSize]\n    );\n\n    useLayoutEffect(\n      function handleSplitPanelMaxWidth() {\n        /**\n         * Warning! This is a hack! In order to accurately calculate if there is adequate\n         * horizontal space for the Split Panel to be in the side position we need two values\n         * that are not available in JavaScript.\n         *\n         * The first is the the content gap on the right which is stored in a design token\n         * and applied in the Layout CSS:\n         *\n         *  $contentGapRight: #{awsui.$space-scaled-2x-xxxl};\n         *\n         * The second is the width of the element that has the circular buttons for the\n         * Tools and Split Panel. This could be suppressed given the state of the Tools\n         * drawer returning a zero value. It would, however, be rendered if the Split Panel\n         * were to move into the side position. This is calculated in the Tools CSS and\n         * the Trigger button CSS with design tokens:\n         *\n         * padding: awsui.$space-scaled-s awsui.$space-layout-toggle-padding;\n         * width: awsui.$space-layout-toggle-diameter;\n         *\n         * These values will be defined below as static integers that are rough approximations\n         * of their computed width when rendered in the DOM, but doubled to ensure adequate\n         * spacing for the Split Panel to be in side position.\n         */\n        const contentGapRight = 80; // Approximately 40px when rendered but doubled for safety\n        const toolsFormOffsetWidth = 160; // Approximately 80px when rendered but doubled for safety\n        const toolsOffsetWidth = isToolsOpen ? toolsWidth : 0;\n\n        setSplitPanelMaxWidth(\n          layoutWidth - mainOffsetLeft - minContentWidth - contentGapRight - toolsOffsetWidth - toolsFormOffsetWidth\n        );\n      },\n      [isNavigationOpen, isToolsOpen, layoutWidth, mainOffsetLeft, minContentWidth, toolsWidth]\n    );\n\n    /**\n     * Because the notifications slot does not give us any direction insight into\n     * what the state of the child content is we need to have a mechanism for\n     * tracking the height of the notifications and whether or not it has content.\n     * The height of the notifications is an integer that will be used as a custom\n     * property on the Layout component to determine what the sticky offset should\n     * be if there are sticky notifications. This could be any number including\n     * zero based on how the child content renders. The hasNotificationsContent boolean\n     * is simply centralizing the logic of the notifications height being > 0 such\n     * that it is not repeated in various components (such as AppBar) that need to\n     * know if the notifications slot is empty.\n     */\n    const [notificationsContainerQuery, notificationsElement] = useContainerQuery(rect => rect.height);\n    const [notificationsHeight, setNotificationsHeight] = useState(0);\n    const [hasNotificationsContent, setHasNotificationsContent] = useState(false);\n\n    useEffect(\n      function handleNotificationsContent() {\n        setNotificationsHeight(notificationsContainerQuery ?? 0);\n        setHasNotificationsContent(notificationsContainerQuery && notificationsContainerQuery > 0 ? true : false);\n      },\n      [notificationsContainerQuery]\n    );\n\n    /**\n     * The offsetBottom value is used to determine the distance from the bottom of the\n     * viewport a sticky element should be placed. A non-zero value means that there\n     * is either a footer outside of the AppLayout, a SplitPanel in the bottom position\n     * within the AppLayout, or both.\n     */\n    const [offsetBottom, setOffsetBottom] = useState(0);\n\n    return (\n      <AppLayoutContext.Provider\n        value={{\n          ...defaults,\n          ...props,\n          contentType,\n          dynamicOverlapHeight,\n          headerHeight,\n          footerHeight,\n          hasDefaultToolsWidth,\n          handleNavigationClick,\n          handleSplitPanelClick,\n          handleSplitPanelPreferencesChange,\n          handleSplitPanelResize,\n          handleToolsClick,\n          hasNotificationsContent,\n          hasStickyBackground,\n          isAnyPanelOpen,\n          isMobile,\n          isNavigationOpen: isNavigationOpen ?? false,\n          isSplitPanelForcedPosition,\n          isSplitPanelOpen,\n          isToolsOpen,\n          layoutElement,\n          layoutWidth,\n          mainElement,\n          mainOffsetLeft,\n          maxContentWidth,\n          minContentWidth,\n          navigationHide,\n          notificationsElement,\n          notificationsHeight,\n          offsetBottom,\n          setDynamicOverlapHeight,\n          setHasStickyBackground,\n          setOffsetBottom,\n          setSplitPanelReportedSize,\n          splitPanelMaxWidth,\n          splitPanelMinWidth,\n          splitPanelPosition,\n          splitPanelPreferences,\n          splitPanelReportedSize,\n          splitPanelSize,\n          toolsHide,\n          toolsOpen: isToolsOpen,\n          toolsWidth,\n          toolsFocusControl,\n        }}\n      >\n        {children}\n      </AppLayoutContext.Provider>\n    );\n  }\n);\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { AppLayoutContext } from './context';\nimport {\n  SplitPanelContext,\n  SplitPanelContextProps,\n  SplitPanelLastInteraction,\n} from '../../internal/context/split-panel-context';\nimport styles from './styles.css.js';\nimport { AppLayoutProps } from '../interfaces';\nimport { useEffectOnUpdate } from '../../internal/hooks/use-effect-on-update';\nimport { Transition } from '../../internal/components/transition';\nimport { useObservedElement } from '../utils/use-observed-element';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n\n/**\n * If there is no Split Panel in the AppLayout context then the SplitPanel\n * will pass through the AppLayout children without the context.\n */\nfunction SplitPanel({ children }: React.PropsWithChildren<unknown>) {\n  const {\n    handleSplitPanelClick,\n    handleSplitPanelPreferencesChange,\n    handleSplitPanelResize,\n    isMobile,\n    isSplitPanelForcedPosition,\n    isSplitPanelOpen,\n    setSplitPanelReportedSize,\n    splitPanelPosition,\n    splitPanelSize,\n    headerHeight,\n    footerHeight,\n  } = useContext(AppLayoutContext);\n\n  const [openButtonAriaLabel, setOpenButtonAriaLabel] = useState<undefined | string>(undefined);\n\n  const [splitPanelLastInteraction, setSplitPanelLastInteraction] = useState<undefined | SplitPanelLastInteraction>();\n  useEffectOnUpdate(\n    () => setSplitPanelLastInteraction(isSplitPanelOpen ? { type: 'open' } : { type: 'close' }),\n    [isSplitPanelOpen]\n  );\n  useEffectOnUpdate(() => setSplitPanelLastInteraction({ type: 'position' }), [splitPanelPosition]);\n\n  const splitPanelRef = useRef<HTMLDivElement>(null);\n  const splitPanelHeaderRef = useRef<HTMLDivElement>(null);\n\n  const context: SplitPanelContextProps = {\n    bottomOffset: 0,\n    getMaxHeight: () => {\n      const availableHeight = document.documentElement.clientHeight - headerHeight - footerHeight;\n      // If the page is likely zoomed in at 200%, allow the split panel to fill the content area.\n      return availableHeight < 400 ? availableHeight - 40 : availableHeight - 250;\n    },\n    getMaxWidth: () => document.documentElement.clientWidth,\n    getHeader: () => splitPanelHeaderRef.current,\n    isForcedPosition: isSplitPanelForcedPosition,\n    isMobile,\n    isOpen: isSplitPanelOpen,\n    isRefresh: true,\n    leftOffset: 0,\n    onPreferencesChange: handleSplitPanelPreferencesChange,\n    onResize: handleSplitPanelResize,\n    onToggle: handleSplitPanelClick,\n    position: splitPanelPosition,\n    reportSize: setSplitPanelReportedSize,\n    rightOffset: 0,\n    size: splitPanelSize || 0,\n    splitPanelRef,\n    splitPanelHeaderRef,\n    topOffset: 0,\n    openButtonAriaLabel,\n    setOpenButtonAriaLabel,\n    lastInteraction: splitPanelLastInteraction,\n  };\n\n  return <SplitPanelContext.Provider value={{ ...context }}>{children}</SplitPanelContext.Provider>;\n}\n\n/**\n * This is the render function for the SplitPanel when it is in bottom position.\n * The Split Panel container will be another row entry in the grid definition in\n * the Layout component. The start and finish columns will be variable based\n * on the the presence and state of the Navigation and Tools components.\n */\nfunction SplitPanelBottom() {\n  const { disableBodyScroll, isNavigationOpen, isSplitPanelOpen, isToolsOpen, splitPanel, splitPanelReportedSize } =\n    useContext(AppLayoutContext);\n\n  const { position: splitPanelPosition, getHeader } = useContext(SplitPanelContext);\n\n  const headerHeight = useObservedElement(getHeader);\n\n  if (!splitPanel) {\n    return null;\n  }\n\n  return (\n    <Transition in={isSplitPanelOpen ?? false} exit={false}>\n      {(state, transitionEventsRef) => (\n        <section\n          className={clsx(styles['split-panel-bottom'], styles[`position-${splitPanelPosition}`], {\n            [styles.animating]: state === 'entering',\n            [styles['disable-body-scroll']]: disableBodyScroll,\n            [styles['is-navigation-open']]: isNavigationOpen,\n            [styles['is-split-panel-open']]: isSplitPanelOpen,\n            [styles['is-tools-open']]: isToolsOpen,\n          })}\n          ref={transitionEventsRef}\n          style={{\n            [customCssProps.splitPanelReportedSize]: `${splitPanelReportedSize}px`,\n            [customCssProps.splitPanelReportedHeaderSize]: `${headerHeight}px`,\n          }}\n        >\n          <SplitPanel></SplitPanel>\n          {splitPanelPosition === 'bottom' && splitPanel}\n        </section>\n      )}\n    </Transition>\n  );\n}\n\n/**\n * This is the render function for the SplitPanel when it is side position.\n * The Split Panel will not be within the grid defined in the Layout component\n * but instead a direct child of the Tools component. The width constraints\n * for this position are computed in the Tools component.\n */\nfunction SplitPanelSide() {\n  const { isSplitPanelOpen, splitPanel, splitPanelMaxWidth, splitPanelMinWidth, splitPanelReportedSize } =\n    useContext(AppLayoutContext);\n\n  const { position: splitPanelPosition } = useContext(SplitPanelContext);\n\n  if (!splitPanel) {\n    return null;\n  }\n\n  return (\n    <Transition in={isSplitPanelOpen ?? false} exit={false}>\n      {(state, transitionEventsRef) => (\n        <section\n          aria-hidden={!isSplitPanelOpen || splitPanelPosition === 'bottom' ? true : false}\n          className={clsx(styles['split-panel-side'], styles[`position-${splitPanelPosition}`], {\n            [styles.animating]: state === 'entering',\n            [styles['is-split-panel-open']]: isSplitPanelOpen,\n          })}\n          ref={transitionEventsRef}\n          style={{\n            [customCssProps.splitPanelMaxWidth]: `${splitPanelMaxWidth}px`,\n            [customCssProps.splitPanelMinWidth]: `${splitPanelMinWidth}px`,\n            [customCssProps.splitPanelReportedHeaderSize]: `${splitPanelReportedSize}px`,\n          }}\n        >\n          <div className={clsx(styles['animated-content'])}>{splitPanelPosition === 'side' && splitPanel}</div>\n        </section>\n      )}\n    </Transition>\n  );\n}\n\n/**\n * This logic will determine what the Split Panel position should be. It reconciles the possibility\n * of being in forced position with the current selected position in the settings.\n */\nexport function getSplitPanelPosition(\n  isSplitPanelForcedPosition: boolean,\n  splitPanelPreferences: AppLayoutProps.SplitPanelPreferences | undefined\n) {\n  let splitPanelPosition: AppLayoutProps.SplitPanelPosition = 'bottom';\n\n  if (!isSplitPanelForcedPosition && splitPanelPreferences?.position === 'side') {\n    splitPanelPosition = 'side';\n  }\n\n  return splitPanelPosition;\n}\nSplitPanel.Bottom = SplitPanelBottom;\nSplitPanel.Side = SplitPanelSide;\n\nexport default SplitPanel;\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext, createContext } from 'react';\n\nexport type SplitPanelLastInteraction = { type: 'open' } | { type: 'close' } | { type: 'position' };\n\nexport interface SplitPanelContextProps {\n  topOffset: number;\n  bottomOffset: number;\n  leftOffset: number;\n  rightOffset: number;\n  position: 'side' | 'bottom';\n  size: number;\n  getMaxWidth: () => number;\n  getMaxHeight: () => number;\n  getHeader: () => HTMLElement | null;\n  disableContentPaddings?: boolean;\n  contentWidthStyles?: React.CSSProperties;\n  contentWrapperPaddings?: {\n    closedNav: boolean;\n    closedTools: boolean;\n  };\n  isCopy?: boolean;\n  isOpen?: boolean;\n  isMobile: boolean;\n  isRefresh: boolean;\n  isForcedPosition: boolean;\n  // The lastInteraction property indicates last meaningful state transition used to trigger split-panel effects.\n  // We can't observe properties in a regular way because split-panel is being mounted in several places at once.\n  lastInteraction?: SplitPanelLastInteraction;\n  splitPanelRef?: React.Ref<any>;\n  splitPanelHeaderRef?: React.Ref<any>;\n  onResize: (detail: { size: number }) => void;\n  onToggle: () => void;\n  onPreferencesChange: (detail: { position: 'side' | 'bottom' }) => void;\n  reportSize: (pixels: number) => void;\n  openButtonAriaLabel?: string;\n  setOpenButtonAriaLabel?: (value: string) => void;\n}\n\nexport const SplitPanelContext = createContext<SplitPanelContextProps>({\n  topOffset: 0,\n  bottomOffset: 0,\n  leftOffset: 0,\n  rightOffset: 0,\n  position: 'bottom',\n  size: 0,\n  getMaxWidth: () => 0,\n  getMaxHeight: () => 0,\n  getHeader: () => null,\n  isCopy: false,\n  isOpen: true,\n  isMobile: false,\n  isRefresh: false,\n  isForcedPosition: false,\n  lastInteraction: undefined,\n  splitPanelRef: undefined,\n  splitPanelHeaderRef: undefined,\n  onResize: () => {},\n  onToggle: () => {},\n  onPreferencesChange: () => {},\n  reportSize: () => {},\n});\n\nexport function useSplitPanelContext() {\n  return useContext(SplitPanelContext);\n}\n", "\n    import './styles.scoped.css';\n    export default {\n  \"appbar\": \"awsui_appbar_hyvsj_8eynx_93\",\n  \"appbar-nav\": \"awsui_appbar-nav_hyvsj_8eynx_117\",\n  \"breadcrumbs\": \"awsui_breadcrumbs_hyvsj_8eynx_121\",\n  \"appbar-tools\": \"awsui_appbar-tools_hyvsj_8eynx_125\",\n  \"has-breadcrumbs\": \"awsui_has-breadcrumbs_hyvsj_8eynx_166\",\n  \"has-notifications-content\": \"awsui_has-notifications-content_hyvsj_8eynx_173\",\n  \"has-header\": \"awsui_has-header_hyvsj_8eynx_179\",\n  \"has-dynamic-overlap-height\": \"awsui_has-dynamic-overlap-height_hyvsj_8eynx_179\",\n  \"content-type-wizard\": \"awsui_content-type-wizard_hyvsj_8eynx_180\",\n  \"content-type-cards\": \"awsui_content-type-cards_hyvsj_8eynx_183\",\n  \"content-type-table\": \"awsui_content-type-table_hyvsj_8eynx_184\",\n  \"has-sticky-background\": \"awsui_has-sticky-background_hyvsj_8eynx_187\",\n  \"background\": \"awsui_background_hyvsj_8eynx_221\",\n  \"notifications-appbar-header\": \"awsui_notifications-appbar-header_hyvsj_8eynx_224\",\n  \"sticky-notifications\": \"awsui_sticky-notifications_hyvsj_8eynx_236\",\n  \"overlap\": \"awsui_overlap_hyvsj_8eynx_242\",\n  \"content\": \"awsui_content_hyvsj_8eynx_180\",\n  \"layout\": \"awsui_layout_hyvsj_8eynx_329\",\n  \"has-max-content-width\": \"awsui_has-max-content-width_hyvsj_8eynx_411\",\n  \"is-overlap-disabled\": \"awsui_is-overlap-disabled_hyvsj_8eynx_438\",\n  \"disable-body-scroll\": \"awsui_disable-body-scroll_hyvsj_8eynx_441\",\n  \"has-sticky-notifications\": \"awsui_has-sticky-notifications_hyvsj_8eynx_445\",\n  \"has-split-panel\": \"awsui_has-split-panel_hyvsj_8eynx_459\",\n  \"split-panel-position-bottom\": \"awsui_split-panel-position-bottom_hyvsj_8eynx_459\",\n  \"has-content-gap-left\": \"awsui_has-content-gap-left_hyvsj_8eynx_471\",\n  \"has-content-gap-right\": \"awsui_has-content-gap-right_hyvsj_8eynx_474\",\n  \"block-body-scroll\": \"awsui_block-body-scroll_hyvsj_8eynx_489\",\n  \"container\": \"awsui_container_hyvsj_8eynx_497\",\n  \"disable-content-paddings\": \"awsui_disable-content-paddings_hyvsj_8eynx_514\",\n  \"is-navigation-open\": \"awsui_is-navigation-open_hyvsj_8eynx_519\",\n  \"is-tools-open\": \"awsui_is-tools-open_hyvsj_8eynx_522\",\n  \"is-split-panel-open\": \"awsui_is-split-panel-open_hyvsj_8eynx_522\",\n  \"split-panel-position-side\": \"awsui_split-panel-position-side_hyvsj_8eynx_522\",\n  \"content-type-default\": \"awsui_content-type-default_hyvsj_8eynx_542\",\n  \"content-type-form\": \"awsui_content-type-form_hyvsj_8eynx_542\",\n  \"unfocusable\": \"awsui_unfocusable_hyvsj_8eynx_583\",\n  \"navigation-container\": \"awsui_navigation-container_hyvsj_8eynx_591\",\n  \"show-navigation\": \"awsui_show-navigation_hyvsj_8eynx_626\",\n  \"animating\": \"awsui_animating_hyvsj_8eynx_648\",\n  \"showButtons\": \"awsui_showButtons_hyvsj_8eynx_1\",\n  \"navigation\": \"awsui_navigation_hyvsj_8eynx_591\",\n  \"openNavigation\": \"awsui_openNavigation_hyvsj_8eynx_1\",\n  \"animated-content\": \"awsui_animated-content_hyvsj_8eynx_709\",\n  \"hide-navigation\": \"awsui_hide-navigation_hyvsj_8eynx_718\",\n  \"notifications\": \"awsui_notifications_hyvsj_8eynx_224\",\n  \"split-panel-bottom\": \"awsui_split-panel-bottom_hyvsj_8eynx_785\",\n  \"position-bottom\": \"awsui_position-bottom_hyvsj_8eynx_820\",\n  \"openSplitPanelBottom\": \"awsui_openSplitPanelBottom_hyvsj_8eynx_1\",\n  \"split-panel-side\": \"awsui_split-panel-side_hyvsj_8eynx_849\",\n  \"position-side\": \"awsui_position-side_hyvsj_8eynx_877\",\n  \"openSplitPanelSide\": \"awsui_openSplitPanelSide_hyvsj_8eynx_1\",\n  \"tools-container\": \"awsui_tools-container_hyvsj_8eynx_914\",\n  \"tools\": \"awsui_tools_hyvsj_8eynx_914\",\n  \"openTools\": \"awsui_openTools_hyvsj_8eynx_1\",\n  \"has-tools-form-persistence\": \"awsui_has-tools-form-persistence_hyvsj_8eynx_999\",\n  \"hide-tools\": \"awsui_hide-tools_hyvsj_8eynx_1009\",\n  \"show-tools\": \"awsui_show-tools_hyvsj_8eynx_1021\",\n  \"has-tools-form\": \"awsui_has-tools-form_hyvsj_8eynx_999\",\n  \"trigger\": \"awsui_trigger_hyvsj_8eynx_1078\",\n  \"selected\": \"awsui_selected_hyvsj_8eynx_1117\"\n};\n  ", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useResizeObserver } from '../../internal/hooks/container-queries';\nimport { useCallback, useState } from 'react';\n\nexport function useObservedElement(\n  selectorOrRef: string | React.MutableRefObject<HTMLElement> | (() => HTMLElement | null) | undefined\n) {\n  const getElement = useCallback(() => {\n    if (typeof selectorOrRef === 'string') {\n      return document.querySelector(selectorOrRef);\n    } else if (typeof selectorOrRef === 'function') {\n      return selectorOrRef() ?? null;\n    } else {\n      return selectorOrRef?.current ?? null;\n    }\n  }, [selectorOrRef]);\n\n  const [height, setHeight] = useState(0);\n\n  useResizeObserver(getElement, entry => setHeight(entry.borderBoxHeight));\n\n  return height;\n}\n"],
  "mappings": "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",
  "names": ["import_react", "import_react", "import_react", "import_react", "_a", "React", "_a", "_b", "defaults", "React", "_b", "_a"]
}

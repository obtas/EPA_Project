import {
  require_react
} from "./chunk-X6MODOAL.js";
import {
  __esm,
  __export,
  __toESM
} from "./chunk-J43GMYXM.js";

// node_modules/clsx/dist/clsx.m.js
var clsx_m_exports = {};
__export(clsx_m_exports, {
  clsx: () => clsx,
  default: () => clsx_m_default
});
function r(e) {
  var t, f, n = "";
  if ("string" == typeof e || "number" == typeof e)
    n += e;
  else if ("object" == typeof e)
    if (Array.isArray(e))
      for (t = 0; t < e.length; t++)
        e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
    else
      for (t in e)
        e[t] && (n && (n += " "), n += t);
  return n;
}
function clsx() {
  for (var e, t, f = 0, n = ""; f < arguments.length; )
    (e = arguments[f++]) && (t = r(e)) && (n && (n += " "), n += t);
  return n;
}
var clsx_m_default;
var init_clsx_m = __esm({
  "node_modules/clsx/dist/clsx.m.js"() {
    clsx_m_default = clsx;
  }
});

// node_modules/tslib/tslib.es6.js
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}

// node_modules/@cloudscape-design/components/internal/utils/apply-display-name.js
function applyDisplayName(component, displayName) {
  component.displayName = displayName;
}

// node_modules/@cloudscape-design/components/internal/base-component/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/DEVcloudscape/node_modules/@cloudscape-design/components/internal/base-component/styles.scoped.css";

// node_modules/@cloudscape-design/components/internal/environment.js
var PACKAGE_VERSION = "3.0.0 (162110d)";
var THEME = "open-source-visual-refresh";
var ALWAYS_VISUAL_REFRESH = true;

// node_modules/@cloudscape-design/components/internal/base-component/index.js
if (typeof window !== "undefined") {
  if (!window.awsuiVersions) {
    window.awsuiVersions = {};
  }
  if (!window.awsuiVersions.components) {
    window.awsuiVersions.components = [];
  }
  window.awsuiVersions.components.push(PACKAGE_VERSION);
}
function getBaseProps(props) {
  var baseProps = {};
  Object.keys(props).forEach(function(prop) {
    if (prop === "id" || prop === "className" || prop.match(/^data-/)) {
      baseProps[prop] = props[prop];
    }
  });
  return baseProps;
}

// node_modules/@cloudscape-design/components/internal/hooks/use-base-component/index.js
var import_react2 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/use-telemetry/index.js
var import_react = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/metrics.js
var oneTimeMetrics = {};
var buildMetricHash = function(_a) {
  var source = _a.source, action = _a.action;
  return ["src".concat(source), "action".concat(action)].join("_");
};
var getMajorVersion = function(versionString) {
  var majorVersionMatch = versionString.match(/^(\d+\.\d+)/);
  return majorVersionMatch ? majorVersionMatch[1] : "";
};
var formatMajorVersionForMetricDetail = function(version) {
  return version.replace(/\s/g, "");
};
var formatVersionForMetricName = function(theme, version) {
  return "".concat(theme.charAt(0)).concat(getMajorVersion(version).replace(".", ""));
};
var buildMetricDetail = function(_a) {
  var source = _a.source, action = _a.action, version = _a.version;
  var metricOrigin = typeof AWSUI_METRIC_ORIGIN !== "undefined" ? AWSUI_METRIC_ORIGIN : "main";
  var detailObject = {
    o: metricOrigin,
    s: source,
    t: THEME,
    a: action,
    f: framework,
    v: formatMajorVersionForMetricDetail(version)
  };
  return JSON.stringify(detailObject);
};
var buildMetricName = function(_a) {
  var source = _a.source, version = _a.version;
  return ["awsui", source, "".concat(formatVersionForMetricName(THEME, version))].join("_");
};
var findAWSC = function(currentWindow) {
  try {
    if (typeof (currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.AWSC) === "object") {
      return currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.AWSC;
    }
    if (!currentWindow || currentWindow.parent === currentWindow) {
      return void 0;
    }
    return findAWSC(currentWindow.parent);
  } catch (ex) {
    return void 0;
  }
};
var framework = "react";
function setFramework(fwk) {
  framework = fwk;
}
var Metrics = {
  initMetrics: function(fwk) {
    setFramework(fwk);
  },
  sendMetric: function(metricName, value, detail) {
    if (!metricName || !/^[a-zA-Z0-9_-]{1,32}$/.test(metricName)) {
      console.error("Invalid metric name: ".concat(metricName));
      return;
    }
    if (detail && detail.length > 200) {
      console.error("Detail for metric ".concat(metricName, " is too long: ").concat(detail));
      return;
    }
    var AWSC = findAWSC(window);
    if (typeof AWSC === "object" && typeof AWSC.Clog === "object" && typeof AWSC.Clog.log === "function") {
      AWSC.Clog.log(metricName, value, detail);
    }
  },
  sendMetricObject: function(metric, value) {
    this.sendMetric(buildMetricName(metric), value, buildMetricDetail(metric));
  },
  sendMetricObjectOnce: function(metric, value) {
    var metricHash = buildMetricHash(metric);
    if (!oneTimeMetrics[metricHash]) {
      this.sendMetricObject(metric, value);
      oneTimeMetrics[metricHash] = true;
    }
  },
  sendMetricOnce: function(metricName, value, detail) {
    if (!oneTimeMetrics[metricName]) {
      this.sendMetric(metricName, value, detail);
      oneTimeMetrics[metricName] = true;
    }
  },
  logComponentLoaded: function() {
    this.sendMetricObjectOnce({
      source: "components",
      action: "loaded",
      version: PACKAGE_VERSION
    }, 1);
  },
  logComponentUsed: function(componentName) {
    this.sendMetricObjectOnce({
      source: componentName,
      action: "used",
      version: PACKAGE_VERSION
    }, 1);
  }
};

// node_modules/@cloudscape-design/components/internal/hooks/use-telemetry/index.js
function useTelemetry(componentName) {
  (0, import_react.useEffect)(function() {
    if (typeof window !== "undefined") {
      Metrics.sendMetricOnce("awsui-viewport-width", window.innerWidth || 0);
      Metrics.sendMetricOnce("awsui-viewport-height", window.innerHeight || 0);
    }
    Metrics.logComponentLoaded();
    Metrics.logComponentUsed(componentName.toLowerCase());
  }, []);
}

// node_modules/@cloudscape-design/components/internal/hooks/use-base-component/index.js
var COMPONENT_METADATA_KEY = "__awsuiMetadata__";
function useBaseComponent(componentName) {
  var elementRef = (0, import_react2.useRef)(null);
  useTelemetry(componentName);
  useComponentMetadata(componentName, elementRef);
  return {
    __internalRootRef: elementRef
  };
}
function useComponentMetadata(componentName, elementRef) {
  (0, import_react2.useEffect)(function() {
    if (elementRef.current && !Object.prototype.hasOwnProperty.call(elementRef.current, COMPONENT_METADATA_KEY)) {
      var node = elementRef.current;
      var metadata = {
        name: componentName,
        version: PACKAGE_VERSION
      };
      Object.freeze(metadata);
      Object.defineProperty(node, COMPONENT_METADATA_KEY, {
        value: metadata,
        writable: false
      });
    }
  }, [elementRef.current]);
}

export {
  __extends,
  __assign,
  __rest,
  __spreadArray,
  applyDisplayName,
  clsx_m_default,
  clsx_m_exports,
  init_clsx_m,
  ALWAYS_VISUAL_REFRESH,
  getBaseProps,
  useTelemetry,
  useBaseComponent
};
//# sourceMappingURL=chunk-VD3NZSIN.js.map

import {
  AppLayoutContext as AppLayoutContext2,
  AppLayoutProvider,
  CONSTRAINED_MAIN_PANEL_MIN_HEIGHT,
  CONSTRAINED_PAGE_HEIGHT,
  MAIN_PANEL_MIN_HEIGHT,
  SplitPanelContext,
  applyDefaults,
  getSplitPanelDefaultSize,
  split_panel_default,
  styles_css_default,
  useControllable,
  useFocusControl,
  useObservedElement
} from "./chunk-IFMKOHAC.js";
import {
  useEffectOnUpdate
} from "./chunk-L7334EFP.js";
import {
  AppLayoutContext
} from "./chunk-AVYWC3I6.js";
import {
  custom_css_properties_default
} from "./chunk-J3BRM5E3.js";
import {
  Transition
} from "./chunk-7ETUUVGM.js";
import {
  InternalButton
} from "./chunk-BX32VQUV.js";
import {
  useFocusVisible
} from "./chunk-GKBIUDXI.js";
import {
  fireNonCancelableEvent
} from "./chunk-7TBDUUWV.js";
import {
  internal_default
} from "./chunk-XYE4ILSB.js";
import {
  useContainerQuery,
  useResizeObserver
} from "./chunk-FBPNVVYB.js";
import {
  isDevelopment,
  warnOnce
} from "./chunk-GZ7CC2VZ.js";
import {
  useMergeRefs
} from "./chunk-EZZ3SG55.js";
import {
  useMobile
} from "./chunk-LHKG36BJ.js";
import {
  findUpUntil,
  isMotionDisabled,
  useStableEventHandler,
  useVisualRefresh
} from "./chunk-4EXFA7SU.js";
import {
  __assign,
  __rest,
  applyDisplayName,
  clsx_m_default,
  getBaseProps,
  init_clsx_m,
  useBaseComponent
} from "./chunk-VD3NZSIN.js";
import {
  require_react
} from "./chunk-X6MODOAL.js";
import {
  __toESM
} from "./chunk-J43GMYXM.js";

// node_modules/@cloudscape-design/components/app-layout/index.js
init_clsx_m();
var import_react23 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/notifications/index.js
var import_react = __toESM(require_react());
init_clsx_m();

// node_modules/@cloudscape-design/components/app-layout/notifications/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/DEVcloudscape/node_modules/@cloudscape-design/components/app-layout/notifications/styles.scoped.css";
var styles_css_default2 = {
  "notifications-sticky": "awsui_notifications-sticky_1hmm4_1qn9j_9"
};

// node_modules/@cloudscape-design/components/app-layout/notifications/index.js
var Notifications = import_react.default.forwardRef(function(_a, ref) {
  var _b, _c;
  var sticky = _a.sticky, props = __rest(_a, ["sticky"]);
  return sticky ? import_react.default.createElement(
    "div",
    { ref, className: styles_css_default2["notifications-sticky"], style: { top: props.topOffset } },
    import_react.default.createElement("div", { role: "region", className: clsx_m_default(props.testUtilsClassName), "aria-label": (_b = props.labels) === null || _b === void 0 ? void 0 : _b.notifications }, props.children)
  ) : import_react.default.createElement("div", { role: "region", ref, className: clsx_m_default(props.testUtilsClassName), "aria-label": (_c = props.labels) === null || _c === void 0 ? void 0 : _c.notifications }, props.children);
});

// node_modules/@cloudscape-design/components/app-layout/mobile-toolbar/index.js
init_clsx_m();
var import_react3 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/toggles/index.js
var import_react2 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/toggles/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/DEVcloudscape/node_modules/@cloudscape-design/components/app-layout/toggles/styles.scoped.css";
var styles_css_default3 = {
  "close-button": "awsui_close-button_16w0h_kzvce_93",
  "circular-toggle": "awsui_circular-toggle_16w0h_kzvce_101",
  "circular-toggle-selected": "awsui_circular-toggle-selected_16w0h_kzvce_139"
};

// node_modules/@cloudscape-design/components/app-layout/toggles/index.js
var togglesConfig = {
  navigation: {
    TagName: "nav",
    iconName: "menu",
    getLabels: function(labels) {
      if (labels === void 0) {
        labels = {};
      }
      return {
        mainLabel: labels.navigation,
        openLabel: labels.navigationToggle,
        closeLabel: labels.navigationClose
      };
    }
  },
  tools: {
    TagName: "aside",
    iconName: "status-info",
    getLabels: function(labels) {
      if (labels === void 0) {
        labels = {};
      }
      return {
        mainLabel: labels.tools,
        openLabel: labels.toolsToggle,
        closeLabel: labels.toolsClose
      };
    }
  }
};
var AppLayoutButton = import_react2.default.forwardRef(function(_a, ref) {
  var className = _a.className, ariaLabel = _a.ariaLabel, ariaExpanded = _a.ariaExpanded, iconName = _a.iconName, disabled = _a.disabled, onClick = _a.onClick;
  return import_react2.default.createElement(InternalButton, { ref, className, ariaLabel, variant: "icon", formAction: "none", onClick, iconName, disabled, ariaExpanded, __nativeAttributes: { "aria-haspopup": true } });
});
var CloseButton = import_react2.default.forwardRef(function(_a, ref) {
  var className = _a.className, ariaLabel = _a.ariaLabel, onClick = _a.onClick, iconName = _a.iconName;
  return import_react2.default.createElement(
    "span",
    { className: styles_css_default3["close-button"] },
    import_react2.default.createElement(AppLayoutButton, { ref, className, ariaExpanded: true, ariaLabel, iconName, onClick })
  );
});

// node_modules/@cloudscape-design/components/app-layout/mobile-toolbar/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/DEVcloudscape/node_modules/@cloudscape-design/components/app-layout/mobile-toolbar/styles.scoped.css";
var styles_css_default4 = {
  "block-body-scroll": "awsui_block-body-scroll_19d8l_l5x8d_97",
  "mobile-bar": "awsui_mobile-bar_19d8l_l5x8d_101",
  "mobile-bar-breadcrumbs": "awsui_mobile-bar-breadcrumbs_19d8l_l5x8d_115",
  "mobile-toggle": "awsui_mobile-toggle_19d8l_l5x8d_122"
};

// node_modules/@cloudscape-design/components/app-layout/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/DEVcloudscape/node_modules/@cloudscape-design/components/app-layout/styles.scoped.css";
var styles_css_default5 = {
  "root": "awsui_root_lm6vo_hzagk_97",
  "layout-wrapper": "awsui_layout-wrapper_lm6vo_hzagk_98",
  "root-no-scroll": "awsui_root-no-scroll_lm6vo_hzagk_104",
  "layout": "awsui_layout_lm6vo_hzagk_98",
  "layout-no-scroll": "awsui_layout-no-scroll_lm6vo_hzagk_115",
  "layout-main": "awsui_layout-main_lm6vo_hzagk_119",
  "layout-main-scrollable": "awsui_layout-main-scrollable_lm6vo_hzagk_125",
  "unfocusable": "awsui_unfocusable_lm6vo_hzagk_130",
  "navigation-panel": "awsui_navigation-panel_lm6vo_hzagk_134",
  "drawer": "awsui_drawer_lm6vo_hzagk_138",
  "drawer-mobile": "awsui_drawer-mobile_lm6vo_hzagk_144",
  "drawer-closed": "awsui_drawer-closed_lm6vo_hzagk_147",
  "opaque-background": "awsui_opaque-background_lm6vo_hzagk_154",
  "drawer-content": "awsui_drawer-content_lm6vo_hzagk_158",
  "toggle": "awsui_toggle_lm6vo_hzagk_183",
  "visual-refresh-toggle": "awsui_visual-refresh-toggle_lm6vo_hzagk_188",
  "visual-refresh-toggle-type-tools": "awsui_visual-refresh-toggle-type-tools_lm6vo_hzagk_192",
  "visual-refresh-toggle-type-navigation": "awsui_visual-refresh-toggle-type-navigation_lm6vo_hzagk_195",
  "button-toggles-container": "awsui_button-toggles-container_lm6vo_hzagk_205",
  "button-toggles-container-is-hidden": "awsui_button-toggles-container-is-hidden_lm6vo_hzagk_210",
  "breadcrumbs-desktop": "awsui_breadcrumbs-desktop_lm6vo_hzagk_224",
  "content-header-wrapper": "awsui_content-header-wrapper_lm6vo_hzagk_229",
  "content-wrapper": "awsui_content-wrapper_lm6vo_hzagk_233",
  "content-overlapped": "awsui_content-overlapped_lm6vo_hzagk_237",
  "content-extra-top-padding": "awsui_content-extra-top-padding_lm6vo_hzagk_241",
  "navigation-toggle": "awsui_navigation-toggle_lm6vo_hzagk_246",
  "tools-toggle": "awsui_tools-toggle_lm6vo_hzagk_251",
  "navigation": "awsui_navigation_lm6vo_hzagk_134",
  "navigation-close": "awsui_navigation-close_lm6vo_hzagk_263",
  "tools": "awsui_tools_lm6vo_hzagk_251",
  "tools-close": "awsui_tools-close_lm6vo_hzagk_275",
  "notifications": "awsui_notifications_lm6vo_hzagk_279",
  "breadcrumbs": "awsui_breadcrumbs_lm6vo_hzagk_224",
  "content": "awsui_content_lm6vo_hzagk_229",
  "panel-wrapper-outer": "awsui_panel-wrapper-outer_lm6vo_hzagk_291",
  "panel-wrapper-inner": "awsui_panel-wrapper-inner_lm6vo_hzagk_292",
  "mobile": "awsui_mobile_lm6vo_hzagk_301",
  "open": "awsui_open_lm6vo_hzagk_307"
};

// node_modules/@cloudscape-design/components/app-layout/test-classes/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/DEVcloudscape/node_modules/@cloudscape-design/components/app-layout/test-classes/styles.scoped.css";
var styles_css_default6 = {
  "root": "awsui_root_1fj9k_avnjw_5",
  "navigation": "awsui_navigation_1fj9k_avnjw_9",
  "navigation-toggle": "awsui_navigation-toggle_1fj9k_avnjw_13",
  "navigation-close": "awsui_navigation-close_1fj9k_avnjw_17",
  "content": "awsui_content_1fj9k_avnjw_21",
  "notifications": "awsui_notifications_1fj9k_avnjw_25",
  "breadcrumbs": "awsui_breadcrumbs_1fj9k_avnjw_29",
  "tools": "awsui_tools_1fj9k_avnjw_33",
  "tools-close": "awsui_tools-close_1fj9k_avnjw_37",
  "tools-toggle": "awsui_tools-toggle_1fj9k_avnjw_41",
  "drawer-closed": "awsui_drawer-closed_1fj9k_avnjw_45",
  "mobile-bar": "awsui_mobile-bar_1fj9k_avnjw_49",
  "disable-body-scroll-root": "awsui_disable-body-scroll-root_1fj9k_avnjw_53"
};

// node_modules/@cloudscape-design/components/app-layout/mobile-toolbar/index.js
var MobileToggle = import_react3.default.forwardRef(function(_a, ref) {
  var className = _a.className, ariaLabels = _a.ariaLabels, type = _a.type, disabled = _a.disabled, onClick = _a.onClick;
  var _b = togglesConfig[type], TagName = _b.TagName, iconName = _b.iconName, getLabels = _b.getLabels;
  var _c = getLabels(ariaLabels), mainLabel = _c.mainLabel, openLabel = _c.openLabel;
  return import_react3.default.createElement(
    TagName,
    { className: clsx_m_default(styles_css_default4["mobile-toggle"]), "aria-hidden": disabled, "aria-label": mainLabel, onClick },
    import_react3.default.createElement(AppLayoutButton, { ref, className, iconName, onClick, ariaLabel: openLabel, disabled, ariaExpanded: disabled })
  );
});
function MobileToolbar(_a) {
  var _b = _a.ariaLabels, ariaLabels = _b === void 0 ? {} : _b, toggleRefs = _a.toggleRefs, topOffset = _a.topOffset, navigationHide = _a.navigationHide, toolsHide = _a.toolsHide, _c = _a.anyPanelOpen, anyPanelOpen = _c === void 0 ? false : _c, unfocusable = _a.unfocusable, children = _a.children, onNavigationOpen = _a.onNavigationOpen, onToolsOpen = _a.onToolsOpen;
  (0, import_react3.useEffect)(function() {
    if (anyPanelOpen) {
      document.body.classList.add(styles_css_default4["block-body-scroll"]);
      return function() {
        document.body.classList.remove(styles_css_default4["block-body-scroll"]);
      };
    } else {
      document.body.classList.remove(styles_css_default4["block-body-scroll"]);
    }
  }, [anyPanelOpen]);
  return import_react3.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default4["mobile-bar"], unfocusable && styles_css_default5.unfocusable), style: { top: topOffset } },
    !navigationHide && import_react3.default.createElement(MobileToggle, { ref: toggleRefs.navigation, type: "navigation", className: clsx_m_default(styles_css_default5["navigation-toggle"], styles_css_default6["navigation-toggle"]), ariaLabels, disabled: anyPanelOpen, onClick: onNavigationOpen }),
    import_react3.default.createElement("div", { className: styles_css_default4["mobile-bar-breadcrumbs"] }, children && import_react3.default.createElement("div", { className: clsx_m_default(styles_css_default5.breadcrumbs, styles_css_default6.breadcrumbs) }, children)),
    !toolsHide && import_react3.default.createElement(MobileToggle, { ref: toggleRefs.tools, type: "tools", className: clsx_m_default(styles_css_default5["tools-toggle"], styles_css_default6["tools-toggle"]), ariaLabels, disabled: anyPanelOpen, onClick: onToolsOpen })
  );
}

// node_modules/@cloudscape-design/components/app-layout/split-panel-wrapper.js
var import_react4 = __toESM(require_react());
function SplitPanelWrapper(_a) {
  var context = _a.context, children = _a.children, isCopy = _a.isCopy;
  if (!children) {
    return null;
  }
  return import_react4.default.createElement(SplitPanelContext.Provider, { value: __assign(__assign({}, context), { isCopy }) }, children);
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-window-width.js
var import_react5 = __toESM(require_react());
function useWindowWidth() {
  var _a = (0, import_react5.useState)(function() {
    return typeof window !== "undefined" ? window.innerWidth : 0;
  }), width = _a[0], setWidth = _a[1];
  (0, import_react5.useEffect)(function() {
    var handler = function() {
      return setWidth(window.innerWidth);
    };
    window.addEventListener("resize", handler);
    return function() {
      return window.removeEventListener("resize", handler);
    };
  }, []);
  return width;
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-content-height.js
var import_react6 = __toESM(require_react());
function useContentHeight(headerSelector, footerSelector, disableBodyScroll) {
  var _a;
  var headerHeight = useObservedElement(headerSelector);
  var footerHeight = useObservedElement(footerSelector);
  var _b = (0, import_react6.useState)(0), headerFooterHeight = _b[0], setHeaderFooterHeight = _b[1];
  (0, import_react6.useEffect)(function() {
    var id = requestAnimationFrame(function() {
      return setHeaderFooterHeight(headerHeight + footerHeight);
    });
    return function() {
      return cancelAnimationFrame(id);
    };
  }, [headerHeight, footerHeight]);
  var heightStyleValue = "calc(100vh - ".concat(headerFooterHeight, "px)");
  return {
    headerHeight,
    footerHeight,
    contentHeightStyle: (_a = {}, _a[disableBodyScroll ? "height" : "minHeight"] = heightStyleValue, _a),
    panelHeightStyle: {
      height: heightStyleValue
    }
  };
}

// node_modules/@cloudscape-design/components/app-layout/content-wrapper/index.js
init_clsx_m();
var import_react7 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/content-wrapper/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/DEVcloudscape/node_modules/@cloudscape-design/components/app-layout/content-wrapper/styles.scoped.css";
var styles_css_default7 = {
  "content-wrapper": "awsui_content-wrapper_zycdx_s6r07_93",
  "content-wrapper-mobile": "awsui_content-wrapper-mobile_zycdx_s6r07_97"
};

// node_modules/@cloudscape-design/components/app-layout/content-wrapper/index.js
var ContentWrapper = import_react7.default.forwardRef(function(_a, ref) {
  var className = _a.className, children = _a.children, toolsPadding = _a.toolsPadding, disablePaddings = _a.disablePaddings, navigationPadding = _a.navigationPadding, isMobile = _a.isMobile, contentWidthStyles = _a.contentWidthStyles;
  if (disablePaddings) {
    return import_react7.default.createElement("div", { className, ref }, children);
  }
  return import_react7.default.createElement("div", { ref, className: clsx_m_default(className, styles_css_default7["content-wrapper"], !navigationPadding && styles_css_default7["content-wrapper-no-navigation-padding"], !toolsPadding && styles_css_default7["content-wrapper-no-tools-padding"], isMobile && styles_css_default7["content-wrapper-mobile"]), style: contentWidthStyles }, children);
});
var content_wrapper_default = ContentWrapper;

// node_modules/@cloudscape-design/components/app-layout/navigation-panel.js
init_clsx_m();
var import_react9 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/drawer.js
init_clsx_m();
var import_react8 = __toESM(require_react());
var BORDER_WIDTH = 2;
function Drawer(_a) {
  var _b;
  var contentClassName = _a.contentClassName, toggleClassName = _a.toggleClassName, closeClassName = _a.closeClassName, width = _a.width, type = _a.type, toggleRefs = _a.toggleRefs, topOffset = _a.topOffset, bottomOffset = _a.bottomOffset, ariaLabels = _a.ariaLabels, children = _a.children, isOpen = _a.isOpen, isHidden = _a.isHidden, isMobile = _a.isMobile, hasDividerWithSplitPanel = _a.hasDividerWithSplitPanel, onToggle = _a.onToggle, onClick = _a.onClick, onLoseFocus = _a.onLoseFocus, _c = _a.extendRight, extendRight = _c === void 0 ? 0 : _c;
  var _d = togglesConfig[type], TagName = _d.TagName, iconName = _d.iconName, getLabels = _d.getLabels;
  var _e = getLabels(ariaLabels), mainLabel = _e.mainLabel, closeLabel = _e.closeLabel, openLabel = _e.openLabel;
  var hasDividerWithButtonBar = isOpen && extendRight !== 0;
  var drawerContentWidthOpen = isMobile ? void 0 : width;
  var drawerContentWidth = isOpen ? drawerContentWidthOpen : void 0;
  var drawerWidth = hasDividerWithButtonBar && drawerContentWidth ? drawerContentWidth + BORDER_WIDTH : drawerContentWidth;
  var closeIconName = "close";
  var regularOpenButton = import_react8.default.createElement(
    TagName,
    { "aria-label": mainLabel, className: styles_css_default5.toggle, "aria-hidden": isOpen },
    import_react8.default.createElement(AppLayoutButton, { ref: toggleRefs.toggle, className: toggleClassName, iconName, ariaLabel: openLabel, onClick: function() {
      return onToggle(true);
    }, ariaExpanded: false })
  );
  return import_react8.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default5.drawer, (_b = {}, _b[styles_css_default5["drawer-closed"]] = !isOpen, _b[styles_css_default5["drawer-hidden"]] = isHidden, _b[styles_css_default5["drawer-mobile"]] = isMobile, _b[styles_css_default5["has-divider-with-splitpanel"]] = hasDividerWithSplitPanel, _b[styles_css_default5["opaque-background"]] = hasDividerWithButtonBar, _b)), style: {
      width: drawerWidth,
      marginRight: isOpen ? -1 * extendRight : 0,
      paddingRight: isOpen ? extendRight : 0
    }, onBlur: onLoseFocus ? function(e) {
      if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {
        onLoseFocus(e);
      }
    } : void 0, onClick: function(event) {
      if (onClick) {
        onClick(event);
      }
      if (!isOpen) {
        if (event.target.tagName !== "BUTTON") {
          onToggle(true);
        }
      }
    } },
    import_react8.default.createElement(
      "div",
      { style: { width: drawerContentWidth, top: topOffset, bottom: bottomOffset }, className: clsx_m_default(styles_css_default5["drawer-content"], contentClassName) },
      !isMobile && regularOpenButton,
      import_react8.default.createElement(
        TagName,
        { "aria-label": mainLabel, "aria-hidden": !isOpen },
        import_react8.default.createElement(CloseButton, { ref: toggleRefs.close, className: closeClassName, ariaLabel: closeLabel, onClick: function() {
          return onToggle(false);
        }, iconName: closeIconName }),
        children
      )
    )
  );
}

// node_modules/@cloudscape-design/components/app-layout/navigation-panel.js
function NavigationPanel(_a) {
  var _b;
  var ariaLabels = _a.ariaLabels, footerHeight = _a.footerHeight, headerHeight = _a.headerHeight, isHidden = _a.isHidden, isMobile = _a.isMobile, navigation = _a.navigation, navigationDrawerWidth = _a.navigationDrawerWidth, navigationWidth = _a.navigationWidth, navigationOpen = _a.navigationOpen, onClick = _a.onClick, onNavigationToggle = _a.onNavigationToggle, panelHeightStyle = _a.panelHeightStyle, toggleRefs = _a.toggleRefs;
  return import_react9.default.createElement(
    "div",
    { className: styles_css_default5["navigation-panel"], style: { width: navigationDrawerWidth } },
    import_react9.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default5["panel-wrapper-outer"], (_b = {}, _b[styles_css_default5.mobile] = isMobile, _b[styles_css_default5.open] = navigationOpen, _b)), style: __assign({}, isMobile ? { top: headerHeight, bottom: footerHeight } : panelHeightStyle) },
      import_react9.default.createElement(Drawer, { type: "navigation", isMobile, width: navigationWidth, isOpen: navigationOpen, isHidden, onToggle: onNavigationToggle, toggleRefs, onClick, contentClassName: clsx_m_default(styles_css_default5.navigation, styles_css_default6.navigation), closeClassName: clsx_m_default(styles_css_default5["navigation-close"], styles_css_default6["navigation-close"]), toggleClassName: clsx_m_default(styles_css_default5["navigation-toggle"], styles_css_default6["navigation-toggle"]), topOffset: headerHeight, bottomOffset: footerHeight, ariaLabels }, navigation)
    )
  );
}

// node_modules/@cloudscape-design/components/app-layout/tools-and-split-panel.js
init_clsx_m();
var import_react10 = __toESM(require_react());
function ToolsAndSplitPanel(_a) {
  var _b;
  var ariaLabels = _a.ariaLabels, drawerWidth = _a.drawerWidth, footerHeight = _a.footerHeight, headerHeight = _a.headerHeight, isHidden = _a.isHidden, isMobile = _a.isMobile, onToolsToggle = _a.onToolsToggle, panelHeightStyle = _a.panelHeightStyle, splitPanel = _a.splitPanel, splitPanelContext = _a.splitPanelContext, toggleRefs = _a.toggleRefs, onLoseToolsFocus = _a.onLoseToolsFocus, tools = _a.tools, toolsHide = _a.toolsHide, toolsOpen = _a.toolsOpen, toolsWidth = _a.toolsWidth, splitPanelOpen = _a.splitPanelOpen;
  var splitPanelVisible = splitPanelOpen && Boolean(splitPanel);
  return import_react10.default.createElement(
    import_react10.default.Fragment,
    null,
    import_react10.default.createElement(
      "div",
      { style: {
        width: drawerWidth
      } },
      import_react10.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default5["panel-wrapper-outer"], (_b = {}, _b[styles_css_default5.mobile] = isMobile, _b[styles_css_default5.open] = toolsOpen, _b)), style: __assign({}, isMobile ? { top: headerHeight, bottom: footerHeight } : panelHeightStyle) },
        splitPanel && import_react10.default.createElement(SplitPanelWrapper, { context: splitPanelContext }, splitPanel),
        !toolsHide && import_react10.default.createElement(Drawer, { type: "tools", isMobile, width: toolsWidth, isOpen: toolsOpen, onToggle: onToolsToggle, toggleRefs, onLoseFocus: onLoseToolsFocus, isHidden, externalizedToggle: Boolean(splitPanel), contentClassName: clsx_m_default(styles_css_default5.tools, styles_css_default6.tools), closeClassName: clsx_m_default(styles_css_default5["tools-close"], styles_css_default6["tools-close"]), toggleClassName: clsx_m_default(styles_css_default5["tools-toggle"], styles_css_default6["tools-toggle"]), topOffset: headerHeight, bottomOffset: footerHeight, ariaLabels, extendRight: 0, hasDividerWithSplitPanel: splitPanelVisible }, tools)
      )
    )
  );
}

// node_modules/@cloudscape-design/components/internal/hooks/use-previous-frame/index.js
var import_react11 = __toESM(require_react());
var usePreviousFrameValue = function(value) {
  var ref = (0, import_react11.useRef)();
  (0, import_react11.useEffect)(function() {
    var handle = requestAnimationFrame(function() {
      ref.current = value;
    });
    return function() {
      return cancelAnimationFrame(handle);
    };
  });
  return ref.current;
};

// node_modules/@cloudscape-design/components/app-layout/utils/use-content-width.js
var import_react12 = __toESM(require_react());
function useAppLayoutOffsets(element) {
  var _a = (0, import_react12.useState)({ left: 0, right: 0 }), offsets = _a[0], setOffsets = _a[1];
  var updatePosition = (0, import_react12.useCallback)(function() {
    if (!element) {
      return;
    }
    var _a2 = element.getBoundingClientRect(), left = _a2.left, right = _a2.right;
    var bodyWidth = document.body.clientWidth;
    setOffsets({ left, right: bodyWidth - right });
  }, [element]);
  (0, import_react12.useEffect)(function() {
    window.addEventListener("resize", updatePosition);
    return function() {
      return window.removeEventListener("resize", updatePosition);
    };
  }, [updatePosition]);
  var getElement = (0, import_react12.useCallback)(function() {
    return element;
  }, [element]);
  useResizeObserver(getElement, updatePosition);
  return offsets;
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/index.js
var import_react22 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/app-bar.js
var import_react13 = __toESM(require_react());
init_clsx_m();
function AppBar() {
  var _a, _b, _c, _d;
  var _e, _f, _g;
  var _h = (0, import_react13.useContext)(AppLayoutContext2), ariaLabels = _h.ariaLabels, breadcrumbs = _h.breadcrumbs, contentHeader = _h.contentHeader, contentType = _h.contentType, dynamicOverlapHeight = _h.dynamicOverlapHeight, handleNavigationClick = _h.handleNavigationClick, handleToolsClick = _h.handleToolsClick, hasNotificationsContent = _h.hasNotificationsContent, hasStickyBackground = _h.hasStickyBackground, isMobile = _h.isMobile, navigationHide = _h.navigationHide, isNavigationOpen = _h.isNavigationOpen, isToolsOpen = _h.isToolsOpen, toolsHide = _h.toolsHide, isAnyPanelOpen = _h.isAnyPanelOpen;
  var focusRefsNav = useFocusControl(isNavigationOpen).refs;
  var focusRefsTools = useFocusControl(isToolsOpen, true).refs;
  if (navigationHide && !breadcrumbs && toolsHide) {
    return null;
  }
  return import_react13.default.createElement(
    "section",
    { "aria-hidden": !isMobile && !breadcrumbs ? true : void 0, className: clsx_m_default(styles_css_default.appbar, (_a = {}, _a[styles_css_default["has-breadcrumbs"]] = breadcrumbs, _a[styles_css_default.unfocusable] = isMobile && isAnyPanelOpen, _a[styles_css_default6["mobile-bar"]] = isMobile, _a), "awsui-context-content-header") },
    !navigationHide && isMobile && import_react13.default.createElement(
      "nav",
      { className: clsx_m_default(styles_css_default["appbar-nav"], (_b = {}, _b[styles_css_default6["drawer-closed"]] = !isNavigationOpen, _b)), "aria-hidden": isNavigationOpen },
      import_react13.default.createElement(InternalButton, { ariaLabel: (_e = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationToggle) !== null && _e !== void 0 ? _e : void 0, ariaExpanded: isNavigationOpen, iconName: "menu", formAction: "none", onClick: function() {
        return handleNavigationClick(true);
      }, variant: "icon", className: styles_css_default6["navigation-toggle"], ref: focusRefsNav.toggle, disabled: isAnyPanelOpen, __nativeAttributes: { "aria-haspopup": true } })
    ),
    breadcrumbs && import_react13.default.createElement("div", { className: clsx_m_default(styles_css_default.breadcrumbs, styles_css_default["content-type-".concat(contentType)], styles_css_default6.breadcrumbs, (_c = {}, _c[styles_css_default["has-dynamic-overlap-height"]] = dynamicOverlapHeight > 0, _c[styles_css_default["has-header"]] = contentHeader, _c[styles_css_default["has-notifications-content"]] = hasNotificationsContent, _c[styles_css_default["has-sticky-background"]] = hasStickyBackground, _c)) }, breadcrumbs),
    !toolsHide && isMobile && import_react13.default.createElement(
      "aside",
      { className: clsx_m_default(styles_css_default["appbar-tools"], (_d = {}, _d[styles_css_default6["drawer-closed"]] = !isToolsOpen, _d)), "aria-hidden": isToolsOpen, "aria-label": (_f = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _f !== void 0 ? _f : void 0 },
      import_react13.default.createElement(InternalButton, { className: styles_css_default6["tools-toggle"], ariaExpanded: isToolsOpen, disabled: isAnyPanelOpen, ariaLabel: (_g = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsToggle) !== null && _g !== void 0 ? _g : void 0, iconName: "status-info", formAction: "none", onClick: function() {
        return handleToolsClick(true);
      }, variant: "icon", ref: focusRefsTools.toggle, __nativeAttributes: { "aria-haspopup": true } })
    )
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/background.js
var import_react14 = __toESM(require_react());
init_clsx_m();
function Background() {
  var _a, _b;
  var _c = (0, import_react14.useContext)(AppLayoutContext2), hasNotificationsContent = _c.hasNotificationsContent, hasStickyBackground = _c.hasStickyBackground, stickyNotifications = _c.stickyNotifications;
  return import_react14.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default.background, "awsui-context-content-header") },
    import_react14.default.createElement("div", { className: clsx_m_default(styles_css_default["notifications-appbar-header"], (_a = {}, _a[styles_css_default["has-notifications-content"]] = hasNotificationsContent, _a[styles_css_default["has-sticky-background"]] = hasStickyBackground, _a[styles_css_default["sticky-notifications"]] = stickyNotifications, _a)) }),
    import_react14.default.createElement("div", { className: clsx_m_default(styles_css_default.overlap, (_b = {}, _b[styles_css_default["has-sticky-background"]] = hasStickyBackground, _b)) })
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/header.js
var import_react15 = __toESM(require_react());
init_clsx_m();
function Header() {
  var _a;
  var _b = (0, import_react15.useContext)(AppLayoutContext2), breadcrumbs = _b.breadcrumbs, contentHeader = _b.contentHeader, hasNotificationsContent = _b.hasNotificationsContent;
  if (!contentHeader) {
    return null;
  }
  return import_react15.default.createElement("header", { className: clsx_m_default(styles_css_default.content, (_a = {}, _a[styles_css_default["has-breadcrumbs"]] = breadcrumbs, _a[styles_css_default["has-notifications-content"]] = hasNotificationsContent, _a), "awsui-context-content-header") }, contentHeader);
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/layout.js
var import_react16 = __toESM(require_react());
init_clsx_m();
function Layout(_a) {
  var _b, _c, _d, _e, _f, _g;
  var children = _a.children;
  var _h = (0, import_react16.useContext)(AppLayoutContext2), contentHeader = _h.contentHeader, contentType = _h.contentType, disableBodyScroll = _h.disableBodyScroll, disableContentHeaderOverlap = _h.disableContentHeaderOverlap, dynamicOverlapHeight = _h.dynamicOverlapHeight, footerHeight = _h.footerHeight, hasNotificationsContent = _h.hasNotificationsContent, headerHeight = _h.headerHeight, isNavigationOpen = _h.isNavigationOpen, isSplitPanelOpen = _h.isSplitPanelOpen, isToolsOpen = _h.isToolsOpen, layoutElement = _h.layoutElement, layoutWidth = _h.layoutWidth, mainOffsetLeft = _h.mainOffsetLeft, maxContentWidth = _h.maxContentWidth, minContentWidth = _h.minContentWidth, navigationHide = _h.navigationHide, notificationsHeight = _h.notificationsHeight, setOffsetBottom = _h.setOffsetBottom, splitPanel = _h.splitPanel, stickyNotifications = _h.stickyNotifications, toolsHide = _h.toolsHide;
  var _j = (0, import_react16.useContext)(SplitPanelContext), getSplitPanelHeader = _j.getHeader, splitPanelPosition = _j.position, splitPanelSize = _j.size;
  var isOverlapDisabled = getOverlapDisabled(dynamicOverlapHeight, contentHeader, disableContentHeaderOverlap);
  var hasContentGapLeft = getContentGapLeft(isNavigationOpen, navigationHide);
  var hasContentGapRight = getContentGapRight(splitPanelPosition, isSplitPanelOpen, isToolsOpen, splitPanel, toolsHide);
  (0, import_react16.useLayoutEffect)(function handleOffsetBottom() {
    var offsetBottom = footerHeight;
    if (splitPanel && splitPanelPosition === "bottom") {
      if (isSplitPanelOpen) {
        offsetBottom += splitPanelSize;
      } else {
        var splitPanelHeader = getSplitPanelHeader();
        offsetBottom += splitPanelHeader ? splitPanelHeader.clientHeight : 0;
      }
    }
    setOffsetBottom(offsetBottom);
  }, [
    footerHeight,
    getSplitPanelHeader,
    isSplitPanelOpen,
    setOffsetBottom,
    splitPanelPosition,
    splitPanel,
    splitPanelSize
  ]);
  return import_react16.default.createElement("main", { className: clsx_m_default(styles_css_default.layout, styles_css_default["content-type-".concat(contentType)], styles_css_default["split-panel-position-".concat(splitPanelPosition !== null && splitPanelPosition !== void 0 ? splitPanelPosition : "bottom")], (_b = {}, _b[styles_css_default["disable-body-scroll"]] = disableBodyScroll, _b[styles_css_default6["disable-body-scroll-root"]] = disableBodyScroll, _b[styles_css_default["has-content-gap-left"]] = hasContentGapLeft, _b[styles_css_default["has-content-gap-right"]] = hasContentGapRight, _b[styles_css_default["has-max-content-width"]] = maxContentWidth && maxContentWidth > 0, _b[styles_css_default["has-split-panel"]] = splitPanel, _b[styles_css_default["has-sticky-notifications"]] = stickyNotifications && hasNotificationsContent, _b[styles_css_default["is-overlap-disabled"]] = isOverlapDisabled, _b), styles_css_default6.root), ref: layoutElement, style: __assign(__assign(__assign(__assign((_c = {}, _c[custom_css_properties_default.headerHeight] = "".concat(headerHeight, "px"), _c[custom_css_properties_default.footerHeight] = "".concat(footerHeight, "px"), _c[custom_css_properties_default.layoutWidth] = "".concat(layoutWidth, "px"), _c[custom_css_properties_default.mainOffsetLeft] = "".concat(mainOffsetLeft, "px"), _c), maxContentWidth && (_d = {}, _d[custom_css_properties_default.maxContentWidth] = "".concat(maxContentWidth, "px"), _d)), minContentWidth && (_e = {}, _e[custom_css_properties_default.minContentWidth] = "".concat(minContentWidth, "px"), _e)), (_f = {}, _f[custom_css_properties_default.notificationsHeight] = "".concat(notificationsHeight, "px"), _f)), !isOverlapDisabled && dynamicOverlapHeight > 0 && (_g = {}, _g[custom_css_properties_default.overlapHeight] = "".concat(dynamicOverlapHeight, "px"), _g)) }, children);
}
function getContentGapRight(splitPanelPosition, isSplitPanelOpen, isToolsOpen, splitPanel, toolsHide) {
  var hasContentGapRight = false;
  if (!splitPanel && toolsHide) {
    hasContentGapRight = true;
  }
  if ((!splitPanel || !isSplitPanelOpen) && !toolsHide && isToolsOpen) {
    hasContentGapRight = true;
  }
  if (splitPanel && splitPanelPosition === "bottom" && (isToolsOpen || toolsHide)) {
    hasContentGapRight = true;
  }
  if (splitPanel && isSplitPanelOpen && splitPanelPosition === "side") {
    hasContentGapRight = true;
  }
  return hasContentGapRight;
}
function getContentGapLeft(isNavigationOpen, navigationHide) {
  return isNavigationOpen || navigationHide ? true : false;
}
function getOverlapDisabled(dynamicOverlapHeight, contentHeader, disableContentHeaderOverlap) {
  var isOverlapDisabled = false;
  if (disableContentHeaderOverlap) {
    isOverlapDisabled = true;
  } else if (!contentHeader && dynamicOverlapHeight <= 0) {
    isOverlapDisabled = true;
  }
  return isOverlapDisabled;
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/main.js
var import_react17 = __toESM(require_react());
init_clsx_m();
function Main() {
  var _a;
  var _b = (0, import_react17.useContext)(AppLayoutContext2), breadcrumbs = _b.breadcrumbs, content = _b.content, contentHeader = _b.contentHeader, contentType = _b.contentType, disableContentPaddings = _b.disableContentPaddings, dynamicOverlapHeight = _b.dynamicOverlapHeight, hasNotificationsContent = _b.hasNotificationsContent, isNavigationOpen = _b.isNavigationOpen, isSplitPanelOpen = _b.isSplitPanelOpen, isToolsOpen = _b.isToolsOpen, isMobile = _b.isMobile, isAnyPanelOpen = _b.isAnyPanelOpen, mainElement = _b.mainElement;
  var splitPanelPosition = (0, import_react17.useContext)(SplitPanelContext).position;
  var isUnfocusable = isMobile && isAnyPanelOpen;
  return import_react17.default.createElement("div", { className: clsx_m_default(styles_css_default.container, styles_css_default["content-type-".concat(contentType)], styles_css_default["split-panel-position-".concat(splitPanelPosition !== null && splitPanelPosition !== void 0 ? splitPanelPosition : "bottom")], (_a = {}, _a[styles_css_default["disable-content-paddings"]] = disableContentPaddings, _a[styles_css_default["has-breadcrumbs"]] = breadcrumbs, _a[styles_css_default["has-dynamic-overlap-height"]] = dynamicOverlapHeight > 0, _a[styles_css_default["has-header"]] = contentHeader, _a[styles_css_default["has-notifications-content"]] = hasNotificationsContent, _a[styles_css_default["is-navigation-open"]] = isNavigationOpen, _a[styles_css_default["is-tools-open"]] = isToolsOpen, _a[styles_css_default["is-split-panel-open"]] = isSplitPanelOpen, _a[styles_css_default.unfocusable] = isUnfocusable, _a), styles_css_default6.content), ref: mainElement }, content);
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/navigation.js
var import_react19 = __toESM(require_react());
init_clsx_m();

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/trigger-button.js
var import_react18 = __toESM(require_react());
init_clsx_m();
function TriggerButton(_a, ref) {
  var _b;
  var ariaLabel = _a.ariaLabel, iconName = _a.iconName, onClick = _a.onClick, _c = _a.selected, selected = _c === void 0 ? false : _c, className = _a.className;
  var focusVisible = useFocusVisible();
  return import_react18.default.createElement(
    "button",
    __assign({ "aria-label": ariaLabel, "aria-expanded": false, "aria-haspopup": true, className: clsx_m_default(styles_css_default.trigger, (_b = {}, _b[styles_css_default.selected] = selected, _b), className), onClick, type: "button", ref }, focusVisible),
    import_react18.default.createElement(internal_default, { name: iconName })
  );
}
var trigger_button_default = import_react18.default.forwardRef(TriggerButton);

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/navigation.js
function Navigation() {
  var _a = (0, import_react19.useContext)(AppLayoutContext2), ariaLabels = _a.ariaLabels, handleNavigationClick = _a.handleNavigationClick, isMobile = _a.isMobile, isNavigationOpen = _a.isNavigationOpen, navigation = _a.navigation, navigationHide = _a.navigationHide, navigationWidth = _a.navigationWidth, isToolsOpen = _a.isToolsOpen, isAnyPanelOpen = _a.isAnyPanelOpen, toolsHide = _a.toolsHide;
  var focusRefs = useFocusControl(isNavigationOpen).refs;
  if (navigationHide) {
    return null;
  }
  var onNavigationClick = function(event) {
    var hasLink = findUpUntil(event.target, function(node) {
      return node.tagName === "A" && !!node.href;
    });
    if (hasLink && isMobile) {
      handleNavigationClick(false);
    }
  };
  var isUnfocusable = isMobile && isAnyPanelOpen && isToolsOpen && !toolsHide;
  return import_react19.default.createElement(Transition, { "in": isNavigationOpen }, function(state, transitionEventsRef) {
    var _a2, _b, _c, _d;
    var _e, _f, _g;
    return import_react19.default.createElement(
      "div",
      {
        className: clsx_m_default(styles_css_default["navigation-container"], (_a2 = {}, _a2[styles_css_default6["drawer-closed"]] = !isNavigationOpen, _a2[styles_css_default.unfocusable] = isUnfocusable, _a2)),
        style: __assign({}, navigationWidth && (_b = {}, _b[custom_css_properties_default.navigationWidth] = "".concat(navigationWidth, "px"), _b))
      },
      !isMobile && import_react19.default.createElement(
        "nav",
        { "aria-hidden": isMobile || isNavigationOpen ? true : false, "aria-label": (_e = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigation) !== null && _e !== void 0 ? _e : void 0, className: clsx_m_default(styles_css_default["show-navigation"], (_c = {}, _c[styles_css_default.animating] = state === "exiting", _c[styles_css_default["is-navigation-open"]] = isNavigationOpen, _c)), ref: state === "exiting" ? transitionEventsRef : void 0 },
        import_react19.default.createElement(trigger_button_default, { ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationToggle, iconName: "menu", className: styles_css_default6["navigation-toggle"], onClick: function() {
          return handleNavigationClick(true);
        }, ref: focusRefs.toggle })
      ),
      import_react19.default.createElement(
        "nav",
        { "aria-label": (_f = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigation) !== null && _f !== void 0 ? _f : void 0, className: clsx_m_default(styles_css_default.navigation, (_d = {}, _d[styles_css_default.animating] = state === "entering", _d[styles_css_default["is-navigation-open"]] = isNavigationOpen, _d), styles_css_default6.navigation), ref: state !== "exiting" ? transitionEventsRef : void 0, "aria-hidden": !isNavigationOpen, onClick: function(event) {
          onNavigationClick && onNavigationClick(event);
        } },
        import_react19.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default["animated-content"]) },
          import_react19.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default["hide-navigation"]) },
            import_react19.default.createElement(InternalButton, { ariaLabel: (_g = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationClose) !== null && _g !== void 0 ? _g : void 0, iconName: isMobile ? "close" : "angle-left", onClick: function() {
              return handleNavigationClick(false);
            }, variant: "icon", formAction: "none", className: styles_css_default6["navigation-close"], ref: focusRefs.close, ariaExpanded: true, __nativeAttributes: { "aria-haspopup": true } })
          ),
          navigation
        )
      )
    );
  });
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/notifications.js
var import_react20 = __toESM(require_react());
init_clsx_m();
function Notifications2() {
  var _a;
  var _b;
  var _c = (0, import_react20.useContext)(AppLayoutContext2), ariaLabels = _c.ariaLabels, hasNotificationsContent = _c.hasNotificationsContent, notifications = _c.notifications, notificationsElement = _c.notificationsElement, stickyNotifications = _c.stickyNotifications;
  if (!notifications) {
    return null;
  }
  return import_react20.default.createElement("div", { role: "region", "aria-label": (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.notifications) !== null && _b !== void 0 ? _b : void 0, className: clsx_m_default(styles_css_default.notifications, (_a = {}, _a[styles_css_default["has-notifications-content"]] = hasNotificationsContent, _a[styles_css_default["sticky-notifications"]] = stickyNotifications, _a), styles_css_default6.notifications, "awsui-context-content-header"), ref: notificationsElement }, notifications);
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/tools.js
var import_react21 = __toESM(require_react());
init_clsx_m();

// node_modules/@cloudscape-design/components/split-panel/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/DEVcloudscape/node_modules/@cloudscape-design/components/split-panel/styles.scoped.css";
var styles_css_default8 = {
  "drawer": "awsui_drawer_1r9lg_1d1qh_189",
  "refresh": "awsui_refresh_1r9lg_1d1qh_189",
  "animating": "awsui_animating_1r9lg_1d1qh_203",
  "preference-icon--layout-border": "awsui_preference-icon--layout-border_1r9lg_1d1qh_226",
  "preference-icon--layout-background": "awsui_preference-icon--layout-background_1r9lg_1d1qh_230",
  "preference-icon--layout-header": "awsui_preference-icon--layout-header_1r9lg_1d1qh_233",
  "preference-icon--border": "awsui_preference-icon--border_1r9lg_1d1qh_236",
  "preference-icon--primary-button": "awsui_preference-icon--primary-button_1r9lg_1d1qh_240",
  "preference-icon--secondary": "awsui_preference-icon--secondary_1r9lg_1d1qh_243",
  "preference-icon--disabled-element": "awsui_preference-icon--disabled-element_1r9lg_1d1qh_246",
  "preference-icon--separator": "awsui_preference-icon--separator_1r9lg_1d1qh_249",
  "preference-icon--focus-text": "awsui_preference-icon--focus-text_1r9lg_1d1qh_252",
  "preference-icon-refresh--layout-top": "awsui_preference-icon-refresh--layout-top_1r9lg_1d1qh_256",
  "preference-icon-refresh--layout-main": "awsui_preference-icon-refresh--layout-main_1r9lg_1d1qh_259",
  "preference-icon-refresh--primary": "awsui_preference-icon-refresh--primary_1r9lg_1d1qh_262",
  "preference-icon-refresh--disabled": "awsui_preference-icon-refresh--disabled_1r9lg_1d1qh_265",
  "preference-icon-refresh--column-header": "awsui_preference-icon-refresh--column-header_1r9lg_1d1qh_268",
  "preference-icon-refresh--window": "awsui_preference-icon-refresh--window_1r9lg_1d1qh_271",
  "preference-icon-refresh--secondary": "awsui_preference-icon-refresh--secondary_1r9lg_1d1qh_275",
  "preference-icon-refresh--default": "awsui_preference-icon-refresh--default_1r9lg_1d1qh_278",
  "preference-icon-refresh--separator": "awsui_preference-icon-refresh--separator_1r9lg_1d1qh_281",
  "preference-icon-refresh--input-default": "awsui_preference-icon-refresh--input-default_1r9lg_1d1qh_284",
  "preference-icon-refresh--heading": "awsui_preference-icon-refresh--heading_1r9lg_1d1qh_287",
  "resize-active": "awsui_resize-active_1r9lg_1d1qh_292",
  "resize-side": "awsui_resize-side_1r9lg_1d1qh_298",
  "resize-bottom": "awsui_resize-bottom_1r9lg_1d1qh_301",
  "root": "awsui_root_1r9lg_1d1qh_306",
  "preferences-button": "awsui_preferences-button_1r9lg_1d1qh_317",
  "close-button": "awsui_close-button_1r9lg_1d1qh_321",
  "drawer-closed": "awsui_drawer-closed_1r9lg_1d1qh_332",
  "drawer-content-side": "awsui_drawer-content-side_1r9lg_1d1qh_337",
  "drawer-content-bottom": "awsui_drawer-content-bottom_1r9lg_1d1qh_357",
  "position-bottom": "awsui_position-bottom_1r9lg_1d1qh_366",
  "position-side": "awsui_position-side_1r9lg_1d1qh_393",
  "slider": "awsui_slider_1r9lg_1d1qh_399",
  "slider-side": "awsui_slider-side_1r9lg_1d1qh_428",
  "slider-wrapper-bottom": "awsui_slider-wrapper-bottom_1r9lg_1d1qh_433",
  "slider-wrapper-side": "awsui_slider-wrapper-side_1r9lg_1d1qh_444",
  "open-button": "awsui_open-button_1r9lg_1d1qh_455",
  "open-button-side": "awsui_open-button-side_1r9lg_1d1qh_459",
  "slider-icon": "awsui_slider-icon_1r9lg_1d1qh_466",
  "slider-icon-bottom": "awsui_slider-icon-bottom_1r9lg_1d1qh_472",
  "slider-icon-side": "awsui_slider-icon-side_1r9lg_1d1qh_475",
  "pane-header-wrapper-bottom": "awsui_pane-header-wrapper-bottom_1r9lg_1d1qh_479",
  "drawer-mobile": "awsui_drawer-mobile_1r9lg_1d1qh_489",
  "drawer-disable-content-paddings": "awsui_drawer-disable-content-paddings_1r9lg_1d1qh_492",
  "content-bottom": "awsui_content-bottom_1r9lg_1d1qh_500",
  "pane-bottom-center-align": "awsui_pane-bottom-center-align_1r9lg_1d1qh_511",
  "pane-bottom-content-nav-padding": "awsui_pane-bottom-content-nav-padding_1r9lg_1d1qh_516",
  "pane-bottom-content-tools-padding": "awsui_pane-bottom-content-tools-padding_1r9lg_1d1qh_520",
  "content-bottom-max-width": "awsui_content-bottom-max-width_1r9lg_1d1qh_524",
  "content-side": "awsui_content-side_1r9lg_1d1qh_529",
  "pane-header-wrapper-side": "awsui_pane-header-wrapper-side_1r9lg_1d1qh_540",
  "pane-content-wrapper-side": "awsui_pane-content-wrapper-side_1r9lg_1d1qh_543",
  "header": "awsui_header_1r9lg_1d1qh_548",
  "header-text": "awsui_header-text_1r9lg_1d1qh_557",
  "header-divider": "awsui_header-divider_1r9lg_1d1qh_565",
  "header-actions": "awsui_header-actions_1r9lg_1d1qh_571",
  "divider": "awsui_divider_1r9lg_1d1qh_579"
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/tools.js
function Tools(_a) {
  var children = _a.children;
  var _b = (0, import_react21.useContext)(AppLayoutContext2), ariaLabels = _b.ariaLabels, handleSplitPanelClick = _b.handleSplitPanelClick, handleToolsClick = _b.handleToolsClick, hasDefaultToolsWidth = _b.hasDefaultToolsWidth, isNavigationOpen = _b.isNavigationOpen, isMobile = _b.isMobile, isSplitPanelOpen = _b.isSplitPanelOpen, isToolsOpen = _b.isToolsOpen, splitPanel = _b.splitPanel, tools = _b.tools, toolsHide = _b.toolsHide, toolsWidth = _b.toolsWidth, isAnyPanelOpen = _b.isAnyPanelOpen, navigationHide = _b.navigationHide, toolsFocusControl = _b.toolsFocusControl;
  var _c = (0, import_react21.useContext)(SplitPanelContext), splitPanelPosition = _c.position, openButtonAriaLabel = _c.openButtonAriaLabel;
  var hasSplitPanel = getSplitPanelStatus(splitPanel, splitPanelPosition);
  var hasToolsForm = getToolsFormStatus(hasSplitPanel, isMobile, isSplitPanelOpen, isToolsOpen, toolsHide);
  var hasToolsFormPersistence = getToolsFormPersistence(hasSplitPanel, isSplitPanelOpen, isToolsOpen, toolsHide);
  var focusRefs = toolsFocusControl.refs;
  if (toolsHide && !hasSplitPanel) {
    return null;
  }
  var isUnfocusable = isMobile && isAnyPanelOpen && isNavigationOpen && !navigationHide;
  return import_react21.default.createElement(Transition, { "in": isToolsOpen !== null && isToolsOpen !== void 0 ? isToolsOpen : false }, function(state, transitionEventsRef) {
    var _a2, _b2, _c2, _d;
    var _e, _f, _g;
    return import_react21.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default["tools-container"], (_a2 = {}, _a2[styles_css_default6["drawer-closed"]] = !isToolsOpen, _a2[styles_css_default.unfocusable] = isUnfocusable, _a2)), style: (_b2 = {}, _b2[custom_css_properties_default.toolsAnimationStartingOpacity] = "".concat(hasSplitPanel && isSplitPanelOpen ? 1 : 0), _b2[custom_css_properties_default.toolsWidth] = hasDefaultToolsWidth ? "" : "".concat(toolsWidth, "px"), _b2), onBlur: function(e) {
        if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {
          toolsFocusControl.loseFocus();
        }
      } },
      children,
      !toolsHide && import_react21.default.createElement(
        "aside",
        { "aria-hidden": !isToolsOpen ? true : false, "aria-label": (_e = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _e !== void 0 ? _e : void 0, className: clsx_m_default(styles_css_default.tools, (_c2 = {}, _c2[styles_css_default.animating] = state === "entering", _c2[styles_css_default["has-tools-form-persistence"]] = hasToolsFormPersistence, _c2[styles_css_default["is-tools-open"]] = isToolsOpen, _c2), styles_css_default6.tools), ref: state !== "exiting" ? transitionEventsRef : void 0 },
        import_react21.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default["animated-content"]) },
          import_react21.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default["hide-tools"]) },
            import_react21.default.createElement(InternalButton, { ariaLabel: (_f = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsClose) !== null && _f !== void 0 ? _f : void 0, iconName: isMobile ? "close" : "angle-right", onClick: function() {
              return handleToolsClick(false);
            }, variant: "icon", formAction: "none", className: styles_css_default6["tools-close"], ref: focusRefs.close, ariaExpanded: true, __nativeAttributes: { "aria-haspopup": true } })
          ),
          tools
        )
      ),
      !isMobile && import_react21.default.createElement(
        "aside",
        { "aria-hidden": !hasToolsForm ? true : false, "aria-label": (_g = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _g !== void 0 ? _g : void 0, className: clsx_m_default(styles_css_default["show-tools"], (_d = {}, _d[styles_css_default.animating] = state === "exiting", _d[styles_css_default["has-tools-form"]] = hasToolsForm, _d[styles_css_default["has-tools-form-persistence"]] = hasToolsFormPersistence, _d), styles_css_default8.root), ref: state === "exiting" ? transitionEventsRef : void 0 },
        !toolsHide && import_react21.default.createElement(trigger_button_default, { ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsToggle, iconName: "status-info", onClick: function() {
          return handleToolsClick(!isToolsOpen);
        }, selected: hasSplitPanel && isToolsOpen, className: styles_css_default6["tools-toggle"], ref: focusRefs.toggle }),
        hasSplitPanel && import_react21.default.createElement(trigger_button_default, { ariaLabel: openButtonAriaLabel, iconName: "view-vertical", onClick: function() {
          return handleSplitPanelClick();
        }, selected: hasSplitPanel && isSplitPanelOpen, className: styles_css_default8["open-button"] })
      )
    );
  });
}
function getSplitPanelStatus(splitPanel, splitPanelPosition) {
  return splitPanel && splitPanelPosition === "side" ? true : false;
}
function getToolsFormStatus(hasSplitPanel, isMobile, isSplitPanelOpen, isToolsOpen, toolsHide) {
  var hasToolsForm = false;
  if (!isMobile) {
    if (hasSplitPanel && !toolsHide) {
      hasToolsForm = true;
    }
    if (hasSplitPanel && !isSplitPanelOpen && toolsHide) {
      hasToolsForm = true;
    }
    if (!hasSplitPanel && !toolsHide && !isToolsOpen) {
      hasToolsForm = true;
    }
  }
  return hasToolsForm;
}
function getToolsFormPersistence(hasSplitPanel, isSplitPanelOpen, isToolsOpen, toolsHide) {
  var hasToolsFormPersistence = false;
  if (hasSplitPanel && !toolsHide && (isSplitPanelOpen || isToolsOpen)) {
    hasToolsFormPersistence = true;
  }
  return hasToolsFormPersistence;
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/index.js
var AppLayoutWithRef = import_react22.default.forwardRef(function AppLayout(props, ref) {
  var isMobile = (0, import_react22.useContext)(AppLayoutContext2).isMobile;
  return import_react22.default.createElement(
    AppLayoutProvider,
    __assign({}, props, { ref }),
    import_react22.default.createElement(
      split_panel_default,
      null,
      import_react22.default.createElement(
        Layout,
        null,
        import_react22.default.createElement(Background, null),
        import_react22.default.createElement(Navigation, null),
        isMobile && import_react22.default.createElement(AppBar, null),
        import_react22.default.createElement(Notifications2, null),
        !isMobile && import_react22.default.createElement(AppBar, null),
        import_react22.default.createElement(Header, null),
        import_react22.default.createElement(Main, null),
        import_react22.default.createElement(split_panel_default.Bottom, null),
        import_react22.default.createElement(
          Tools,
          null,
          import_react22.default.createElement(split_panel_default.Side, null)
        )
      )
    )
  );
});
var visual_refresh_default = AppLayoutWithRef;

// node_modules/@cloudscape-design/components/app-layout/index.js
var AppLayout2 = import_react23.default.forwardRef(function(_a, ref) {
  var _b = _a.contentType, contentType = _b === void 0 ? "default" : _b, _c = _a.headerSelector, headerSelector = _c === void 0 ? "#b #h" : _c, _d = _a.footerSelector, footerSelector = _d === void 0 ? "#b #f" : _d, rest = __rest(_a, ["contentType", "headerSelector", "footerSelector"]);
  var __internalRootRef = useBaseComponent("AppLayout").__internalRootRef;
  var isRefresh = useVisualRefresh();
  var props = __assign({ contentType, headerSelector, footerSelector }, rest);
  var baseProps = getBaseProps(rest);
  return import_react23.default.createElement("div", __assign({ ref: __internalRootRef }, baseProps), isRefresh ? import_react23.default.createElement(visual_refresh_default, __assign({}, props, { ref })) : import_react23.default.createElement(OldAppLayout, __assign({}, props, { ref })));
});
var OldAppLayout = import_react23.default.forwardRef(function(_a, ref) {
  var _b;
  var _c;
  var navigation = _a.navigation, _d = _a.navigationWidth, navigationWidth = _d === void 0 ? 280 : _d, navigationHide = _a.navigationHide, controlledNavigationOpen = _a.navigationOpen, tools = _a.tools, _e = _a.toolsWidth, toolsWidth = _e === void 0 ? 290 : _e, toolsHide = _a.toolsHide, controlledToolsOpen = _a.toolsOpen, breadcrumbs = _a.breadcrumbs, notifications = _a.notifications, stickyNotifications = _a.stickyNotifications, contentHeader = _a.contentHeader, disableContentHeaderOverlap = _a.disableContentHeaderOverlap, content = _a.content, _f = _a.contentType, contentType = _f === void 0 ? "default" : _f, disableContentPaddings = _a.disableContentPaddings, disableBodyScroll = _a.disableBodyScroll, maxContentWidth = _a.maxContentWidth, minContentWidth = _a.minContentWidth, _g = _a.headerSelector, headerSelector = _g === void 0 ? "#b #h" : _g, _h = _a.footerSelector, footerSelector = _h === void 0 ? "#b #f" : _h, ariaLabels = _a.ariaLabels, splitPanel = _a.splitPanel, controlledSplitPanelSize = _a.splitPanelSize, controlledSplitPanelOpen = _a.splitPanelOpen, controlledSplitPanelPreferences = _a.splitPanelPreferences, onSplitPanelPreferencesChange = _a.onSplitPanelPreferencesChange, onSplitPanelResize = _a.onSplitPanelResize, onSplitPanelToggle = _a.onSplitPanelToggle, onNavigationChange = _a.onNavigationChange, onToolsChange = _a.onToolsChange;
  if (isDevelopment) {
    if (controlledToolsOpen && toolsHide) {
      warnOnce("AppLayout", "You have enabled both the `toolsOpen` prop and the `toolsHide` prop. This is not supported. Set `toolsOpen` to `false` when you set `toolsHide` to `true`.");
    }
  }
  var rootRef = (0, import_react23.useRef)(null);
  var isMobile = useMobile();
  var isMotionEnabled = rootRef.current ? !isMotionDisabled(rootRef.current) : false;
  var defaults = applyDefaults(contentType, { maxContentWidth, minContentWidth }, false);
  var _j = useControllable(controlledNavigationOpen, onNavigationChange, isMobile ? false : defaults.navigationOpen, { componentName: "AppLayout", controlledProp: "navigationOpen", changeHandler: "onNavigationChange" }), _k = _j[0], navigationOpen = _k === void 0 ? false : _k, setNavigationOpen = _j[1];
  var _l = useControllable(controlledToolsOpen, onToolsChange, isMobile ? false : defaults.toolsOpen, { componentName: "AppLayout", controlledProp: "toolsOpen", changeHandler: "onToolsChange" }), _m = _l[0], toolsOpen = _m === void 0 ? false : _m, setToolsOpen = _l[1];
  var onNavigationToggle = (0, import_react23.useCallback)(function(open) {
    setNavigationOpen(open);
    fireNonCancelableEvent(onNavigationChange, { open });
  }, [setNavigationOpen, onNavigationChange]);
  var onToolsToggle = (0, import_react23.useCallback)(function(open) {
    setToolsOpen(open);
    fireNonCancelableEvent(onToolsChange, { open });
  }, [setToolsOpen, onToolsChange]);
  var onNavigationClick = function(event) {
    var hasLink = findUpUntil(event.target, function(node) {
      return node.tagName === "A" && !!node.href;
    });
    if (hasLink) {
      onNavigationToggle(false);
    }
  };
  var navigationVisible = !navigationHide && navigationOpen;
  var toolsVisible = !toolsHide && toolsOpen;
  var _o = useContentHeight(headerSelector, footerSelector, disableBodyScroll), contentHeightStyle = _o.contentHeightStyle, headerHeight = _o.headerHeight, footerHeight = _o.footerHeight, panelHeightStyle = _o.panelHeightStyle;
  var _p = (0, import_react23.useState)(false), isSplitpanelForcedPosition = _p[0], setIsSplitpanelForcedPosition = _p[1];
  var _q = useContainerQuery(function(rect) {
    return rect.height;
  }), notificationsHeight = _q[0], notificationsRef = _q[1];
  var _r = useContainerQuery(
    function(rect) {
      return splitPanel ? rect.height : 0;
    },
    [splitPanel, isSplitpanelForcedPosition]
  ), splitPanelHeaderHeight = _r[0], splitPanelHeaderMeasureRef = _r[1];
  var splitPanelHeaderRefObject = (0, import_react23.useRef)(null);
  var splitPanelHeaderRef = useMergeRefs(splitPanelHeaderMeasureRef, splitPanelHeaderRefObject);
  var anyPanelOpen = navigationVisible || toolsVisible;
  var hasRenderedNotifications = notificationsHeight ? notificationsHeight > 0 : false;
  var stickyNotificationsHeight = stickyNotifications ? notificationsHeight : null;
  var _s = useControllable(controlledSplitPanelPreferences, onSplitPanelPreferencesChange, void 0, {
    componentName: "AppLayout",
    controlledProp: "splitPanelPreferences",
    changeHandler: "onSplitPanelPreferencesChange"
  }), splitPanelPreferences = _s[0], setSplitPanelPreferences = _s[1];
  var splitPanelPosition = (splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) || "bottom";
  var _t = useContainerQuery(
    function(rect) {
      return splitPanel ? rect.height : 0;
    },
    [splitPanel, splitPanelPosition, isSplitpanelForcedPosition]
  ), splitPanelHeight = _t[0], splitPanelRef = _t[1];
  var closedDrawerWidth = 40;
  var effectiveNavigationWidth = navigationHide ? 0 : navigationOpen ? navigationWidth : closedDrawerWidth;
  var effectiveToolsWidth = toolsHide && (!splitPanel || (splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) !== "side") ? 0 : toolsOpen ? toolsWidth : closedDrawerWidth;
  var defaultSplitPanelSize = getSplitPanelDefaultSize(splitPanelPosition);
  var _u = useControllable(controlledSplitPanelSize, onSplitPanelResize, defaultSplitPanelSize, {
    componentName: "AppLayout",
    controlledProp: "splitPanelSize",
    changeHandler: "onSplitPanelResize"
  }), _v = _u[0], splitPanelSize = _v === void 0 ? defaultSplitPanelSize : _v, setSplitPanelSize = _u[1];
  var _w = useControllable(controlledSplitPanelOpen, onSplitPanelToggle, false, {
    componentName: "AppLayout",
    controlledProp: "splitPanelOpen",
    changeHandler: "onSplitPanelToggle"
  }), _x = _w[0], splitPanelOpen = _x === void 0 ? false : _x, setSplitPanelOpen = _w[1];
  var mainContentRef = (0, import_react23.useRef)(null);
  var legacyScrollRootRef = (0, import_react23.useRef)(null);
  var onSplitPanelPreferencesSet = (0, import_react23.useCallback)(function(detail) {
    setSplitPanelPreferences(detail);
    fireNonCancelableEvent(onSplitPanelPreferencesChange, detail);
  }, [setSplitPanelPreferences, onSplitPanelPreferencesChange]);
  var onSplitPanelSizeSet = (0, import_react23.useCallback)(function(detail) {
    setSplitPanelSize(detail.size);
    fireNonCancelableEvent(onSplitPanelResize, detail);
  }, [setSplitPanelSize, onSplitPanelResize]);
  var onToggle = (0, import_react23.useCallback)(function() {
    setSplitPanelOpen(!splitPanelOpen);
    fireNonCancelableEvent(onSplitPanelToggle, { open: !splitPanelOpen });
  }, [setSplitPanelOpen, splitPanelOpen, onSplitPanelToggle]);
  var getSplitPanelMaxWidth = useStableEventHandler(function() {
    if (!mainContentRef.current || !defaults.minContentWidth) {
      return NaN;
    }
    var width = parseInt(getComputedStyle(mainContentRef.current).width);
    var contentPadding = disableContentPaddings ? 80 : 0;
    var spaceAvailable = width - defaults.minContentWidth - contentPadding;
    var spaceTaken = finalSplitPanePosition === "side" ? splitPanelSize : 0;
    return Math.max(0, spaceTaken + spaceAvailable);
  });
  var getSplitPanelMaxHeight = useStableEventHandler(function() {
    if (typeof document === "undefined") {
      return 0;
    } else if (disableBodyScroll && legacyScrollRootRef.current) {
      var availableHeight = legacyScrollRootRef.current.clientHeight;
      return availableHeight < CONSTRAINED_PAGE_HEIGHT ? availableHeight : availableHeight - MAIN_PANEL_MIN_HEIGHT;
    } else {
      var availableHeight = document.documentElement.clientHeight - headerHeight - footerHeight;
      return availableHeight < CONSTRAINED_PAGE_HEIGHT ? availableHeight - CONSTRAINED_MAIN_PANEL_MIN_HEIGHT : availableHeight - MAIN_PANEL_MIN_HEIGHT;
    }
  });
  var finalSplitPanePosition = isSplitpanelForcedPosition ? "bottom" : splitPanelPosition;
  var splitPaneAvailableOnTheSide = Boolean(splitPanel) && finalSplitPanePosition === "side";
  var splitPanelOpenOnTheSide = splitPaneAvailableOnTheSide && splitPanelOpen;
  var toggleButtonsBarWidth = 0;
  var windowWidth = useWindowWidth();
  var _y = useAppLayoutOffsets(rootRef.current), leftOffset = _y.left, rightOffset = _y.right;
  var contentWidthWithSplitPanel = windowWidth - leftOffset - rightOffset - effectiveToolsWidth - effectiveNavigationWidth - (disableContentPaddings ? 0 : toggleButtonsBarWidth);
  (0, import_react23.useEffect)(function() {
    var contentWidth = contentWidthWithSplitPanel - splitPanelSize;
    setIsSplitpanelForcedPosition(isMobile || (defaults.minContentWidth || 0) > contentWidth);
  }, [contentWidthWithSplitPanel, defaults.minContentWidth, isMobile]);
  var navigationClosedWidth = navigationHide || isMobile ? 0 : closedDrawerWidth;
  var toolsClosedWidth = toolsHide || isMobile ? 0 : closedDrawerWidth;
  var _z = (0, import_react23.useState)(), splitPanelLastInteraction = _z[0], setSplitPanelLastInteraction = _z[1];
  useEffectOnUpdate(function() {
    return setSplitPanelLastInteraction(splitPanelOpen ? { type: "open" } : { type: "close" });
  }, [splitPanelOpen]);
  useEffectOnUpdate(function() {
    return setSplitPanelLastInteraction({ type: "position" });
  }, [splitPanelPosition]);
  var contentMaxWidthStyle = !isMobile ? { maxWidth: defaults.maxContentWidth } : void 0;
  var _0 = (0, import_react23.useState)(0), splitPanelReportedSize = _0[0], setSplitPanelReportedSize = _0[1];
  var splitPanelContext = {
    topOffset: headerHeight + (finalSplitPanePosition === "bottom" ? stickyNotificationsHeight || 0 : 0),
    bottomOffset: footerHeight,
    leftOffset: leftOffset + (isMobile ? 0 : !navigationHide && navigationOpen ? navigationWidth : navigationClosedWidth),
    rightOffset: rightOffset + (isMobile ? 0 : !toolsHide && toolsOpen ? toolsWidth : toolsClosedWidth),
    position: finalSplitPanePosition,
    size: splitPanelSize,
    getMaxWidth: getSplitPanelMaxWidth,
    getMaxHeight: getSplitPanelMaxHeight,
    getHeader: function() {
      return splitPanelHeaderRefObject.current;
    },
    disableContentPaddings,
    contentWidthStyles: contentMaxWidthStyle,
    isOpen: splitPanelOpen,
    isMobile,
    isRefresh: false,
    isForcedPosition: isSplitpanelForcedPosition,
    lastInteraction: splitPanelLastInteraction,
    splitPanelRef,
    splitPanelHeaderRef,
    onResize: onSplitPanelSizeSet,
    onToggle,
    onPreferencesChange: onSplitPanelPreferencesSet,
    reportSize: setSplitPanelReportedSize
  };
  var contentWrapperProps = {
    navigationPadding: navigationHide || !!navigationOpen,
    toolsPadding: toolsHide && (!splitPanel || finalSplitPanePosition !== "side") || toolsVisible || splitPanelOpenOnTheSide,
    isMobile
  };
  var navigationRefs = useFocusControl(navigationOpen).refs;
  var _1 = useFocusControl(toolsOpen, true), toolsRefs = _1.refs, focusToolsClose = _1.setFocus, loseToolsFocus = _1.loseFocus;
  (0, import_react23.useImperativeHandle)(ref, function() {
    return {
      openTools: function() {
        return onToolsToggle(true);
      },
      closeNavigationIfNecessary: function() {
        if (isMobile) {
          onNavigationToggle(false);
        }
      },
      focusToolsClose
    };
  }, [isMobile, onNavigationToggle, onToolsToggle, focusToolsClose]);
  var splitPanelBottomOffset = (_c = !splitPanel || finalSplitPanePosition !== "bottom" ? void 0 : splitPanelOpen ? splitPanelHeight : splitPanelHeaderHeight) !== null && _c !== void 0 ? _c : void 0;
  var contentWidthStyles = !isMobile ? { minWidth: defaults.minContentWidth, maxWidth: defaults.maxContentWidth } : void 0;
  var isToolsDrawerHidden = disableContentPaddings;
  var toolsDrawerWidth = function() {
    if (isMobile) {
      return 0;
    }
    var toolsPanelWidth = toolsHide ? 0 : toolsOpen ? toolsWidth : closedDrawerWidth;
    var splitPanelWidth = !splitPanel || finalSplitPanePosition !== "side" ? 0 : splitPanelOpen ? splitPanelReportedSize : closedDrawerWidth;
    return toolsPanelWidth + splitPanelWidth;
  }();
  var navigationDrawerWidth = function() {
    if (isMobile) {
      return 0;
    }
    return effectiveNavigationWidth;
  }();
  var previousContentWidth = usePreviousFrameValue(contentWidthWithSplitPanel - (splitPanelOpenOnTheSide ? splitPanelReportedSize : 0));
  var contentScaleX = function() {
    if (isMobile || !isMotionEnabled || !disableContentPaddings || !previousContentWidth) {
      return void 0;
    }
  }();
  return import_react23.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default5.root, styles_css_default6.root, disableBodyScroll && styles_css_default5["root-no-scroll"]), ref: rootRef },
    import_react23.default.createElement(
      "div",
      { className: styles_css_default5["layout-wrapper"], style: contentHeightStyle },
      isMobile && (!toolsHide || !navigationHide || breadcrumbs) && import_react23.default.createElement(MobileToolbar, { anyPanelOpen, toggleRefs: { navigation: navigationRefs.toggle, tools: toolsRefs.toggle }, topOffset: headerHeight, ariaLabels, navigationHide, toolsHide, onNavigationOpen: function() {
        return onNavigationToggle(true);
      }, onToolsOpen: function() {
        return onToolsToggle(true);
      }, unfocusable: anyPanelOpen }, breadcrumbs),
      import_react23.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default5.layout, disableBodyScroll && styles_css_default5["layout-no-scroll"]) },
        !navigationHide && import_react23.default.createElement(NavigationPanel, { ariaLabels, footerHeight, headerHeight, isHidden: disableContentPaddings, isMobile, isMotionEnabled, navigation, navigationDrawerWidth, navigationOpen, onClick: isMobile ? onNavigationClick : void 0, onNavigationToggle, panelHeightStyle, toggleRefs: navigationRefs, navigationWidth }),
        import_react23.default.createElement(
          "main",
          { ref: legacyScrollRootRef, className: clsx_m_default(styles_css_default5["layout-main"], (_b = {}, _b[styles_css_default5["layout-main-scrollable"]] = disableBodyScroll, _b[styles_css_default6["disable-body-scroll-root"]] = disableBodyScroll, _b[styles_css_default5.unfocusable] = isMobile && anyPanelOpen, _b)) },
          import_react23.default.createElement(
            "div",
            { style: {
              marginBottom: splitPanelBottomOffset,
              transform: contentScaleX ? "scaleX(".concat(contentScaleX, ")") : void 0
            } },
            notifications && import_react23.default.createElement(Notifications, { testUtilsClassName: clsx_m_default(styles_css_default5.notifications, styles_css_default6.notifications), labels: ariaLabels, topOffset: disableBodyScroll ? 0 : headerHeight, sticky: !isMobile && stickyNotifications, ref: notificationsRef, isMobile, navigationPadding: contentWrapperProps.navigationPadding, toolsPadding: contentWrapperProps.toolsPadding, contentWidthStyles }, notifications),
            (!isMobile && breadcrumbs || contentHeader) && import_react23.default.createElement(
              content_wrapper_default,
              __assign({}, contentWrapperProps, { contentWidthStyles }),
              !isMobile && breadcrumbs && import_react23.default.createElement("div", { className: clsx_m_default(styles_css_default5.breadcrumbs, styles_css_default6.breadcrumbs, styles_css_default5["breadcrumbs-desktop"]) }, breadcrumbs),
              contentHeader && import_react23.default.createElement("div", { className: clsx_m_default(styles_css_default5["content-header-wrapper"], !hasRenderedNotifications && (isMobile || !breadcrumbs) && styles_css_default5["content-extra-top-padding"], !hasRenderedNotifications && !breadcrumbs && styles_css_default5["content-header-wrapper-first-child"], !disableContentHeaderOverlap && styles_css_default5["content-header-wrapper-overlapped"]) }, contentHeader)
            ),
            import_react23.default.createElement(
              content_wrapper_default,
              __assign({}, contentWrapperProps, {
                ref: mainContentRef,
                disablePaddings: disableContentPaddings,
                className: clsx_m_default(!disableContentPaddings && styles_css_default5["content-wrapper"], !disableContentPaddings && (isMobile || !breadcrumbs) && !contentHeader && styles_css_default5["content-extra-top-padding"], !hasRenderedNotifications && !breadcrumbs && !isMobile && !contentHeader && styles_css_default5["content-wrapper-first-child"])
              }),
              import_react23.default.createElement(
                "div",
                { className: clsx_m_default(styles_css_default5.content, styles_css_default6.content, !disableContentHeaderOverlap && contentHeader && styles_css_default5["content-overlapped"]), style: contentWidthStyles },
                import_react23.default.createElement(AppLayoutContext.Provider, { value: {
                  stickyOffsetTop: (disableBodyScroll ? 0 : headerHeight) + (stickyNotificationsHeight !== null ? stickyNotificationsHeight : 0),
                  stickyOffsetBottom: footerHeight + (splitPanelBottomOffset || 0)
                } }, content)
              )
            )
          ),
          finalSplitPanePosition === "bottom" && import_react23.default.createElement(SplitPanelWrapper, { context: splitPanelContext }, splitPanel)
        ),
        import_react23.default.createElement(ToolsAndSplitPanel, { splitPanel: finalSplitPanePosition === "side" ? splitPanel : void 0, ariaLabels, closedDrawerWidth, contentHeightStyle, disableContentPaddings, drawerWidth: toolsDrawerWidth, footerHeight, headerHeight, isHidden: isToolsDrawerHidden, isMobile, isMotionEnabled, onToolsToggle, panelHeightStyle, splitPanelContext, splitPanelOpen: splitPanelOpenOnTheSide, splitPanelReportedSize, toggleRefs: toolsRefs, onLoseToolsFocus: loseToolsFocus, tools, toolsHide: Boolean(toolsHide), toolsOpen, toolsWidth })
      )
    )
  );
});
applyDisplayName(AppLayout2, "AppLayout");
var app_layout_default = AppLayout2;

export {
  styles_css_default8 as styles_css_default,
  app_layout_default
};
//# sourceMappingURL=chunk-DZE5JMWG.js.map

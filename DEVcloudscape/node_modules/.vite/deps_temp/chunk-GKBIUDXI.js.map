{
  "version": 3,
  "sources": ["../../src/internal/keycode.ts", "../../src/internal/hooks/focus-visible/index.ts"],
  "sourcesContent": ["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n// When updating the list of key codes, don't forget\n// to modify corresponding list in test-utils\n// to avoid failing unit tests\nexport enum KeyCode {\n  pageUp = 33,\n  pageDown = 34,\n  end = 35,\n  home = 36,\n  backspace = 8,\n  space = 32,\n  down = 40,\n  left = 37,\n  right = 39,\n  up = 38,\n  escape = 27,\n  enter = 13,\n  tab = 9,\n  shift = 16,\n  control = 17,\n  alt = 18,\n  meta = 91,\n}\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { KeyCode } from '../../keycode';\nimport { createSingletonState } from '../use-singleton-handler';\n\nconst useFocusSingleton = createSingletonState<boolean>({\n  initialState: false,\n  factory: setIsKeyboard => {\n    const handleMousedown = () => setIsKeyboard(false);\n    const handleKeydown = (event: KeyboardEvent) => {\n      // we do not want to highlight focused element\n      // when special keys are pressed\n      const isSpecialKey = [KeyCode.shift, KeyCode.alt, KeyCode.control, KeyCode.meta].indexOf(event.keyCode) > -1;\n\n      if (!isSpecialKey) {\n        setIsKeyboard(true);\n      }\n    };\n    document.addEventListener('mousedown', handleMousedown);\n    document.addEventListener('keydown', handleKeydown);\n    return () => {\n      document.removeEventListener('mousedown', handleMousedown);\n      document.removeEventListener('keydown', handleKeydown);\n    };\n  },\n});\n\nexport default function useFocusVisible() {\n  const visible = useFocusSingleton();\n  return visible ? { 'data-awsui-focus-visible': visible } : {};\n}\n"],
  "mappings": ";;;;;AAKA,IAAY;CAAZ,SAAYA,UAAO;AACjB,EAAAA,SAAAA,SAAA,YAAA,MAAA;AACA,EAAAA,SAAAA,SAAA,cAAA,MAAA;AACA,EAAAA,SAAAA,SAAA,SAAA,MAAA;AACA,EAAAA,SAAAA,SAAA,UAAA,MAAA;AACA,EAAAA,SAAAA,SAAA,eAAA,KAAA;AACA,EAAAA,SAAAA,SAAA,WAAA,MAAA;AACA,EAAAA,SAAAA,SAAA,UAAA,MAAA;AACA,EAAAA,SAAAA,SAAA,UAAA,MAAA;AACA,EAAAA,SAAAA,SAAA,WAAA,MAAA;AACA,EAAAA,SAAAA,SAAA,QAAA,MAAA;AACA,EAAAA,SAAAA,SAAA,YAAA,MAAA;AACA,EAAAA,SAAAA,SAAA,WAAA,MAAA;AACA,EAAAA,SAAAA,SAAA,SAAA,KAAA;AACA,EAAAA,SAAAA,SAAA,WAAA,MAAA;AACA,EAAAA,SAAAA,SAAA,aAAA,MAAA;AACA,EAAAA,SAAAA,SAAA,SAAA,MAAA;AACA,EAAAA,SAAAA,SAAA,UAAA,MAAA;AACF,GAlBY,YAAA,UAAO,CAAA,EAAA;;;ACAnB,IAAM,oBAAoB,qBAA8B;EACtD,cAAc;EACd,SAAS,SAAA,eAAa;AACpB,QAAM,kBAAkB,WAAA;AAAM,aAAA,cAAc,KAAK;IAAnB;AAC9B,QAAM,gBAAgB,SAAC,OAAoB;AAGzC,UAAM,eAAe,CAAC,QAAQ,OAAO,QAAQ,KAAK,QAAQ,SAAS,QAAQ,IAAI,EAAE,QAAQ,MAAM,OAAO,IAAI;AAE1G,UAAI,CAAC,cAAc;AACjB,sBAAc,IAAI;;IAEtB;AACA,aAAS,iBAAiB,aAAa,eAAe;AACtD,aAAS,iBAAiB,WAAW,aAAa;AAClD,WAAO,WAAA;AACL,eAAS,oBAAoB,aAAa,eAAe;AACzD,eAAS,oBAAoB,WAAW,aAAa;IACvD;EACF;CACD;AAEa,SAAP,kBAAgC;AACrC,MAAM,UAAU,kBAAiB;AACjC,SAAO,UAAU,EAAE,4BAA4B,QAAO,IAAK,CAAA;AAC7D;",
  "names": ["KeyCode"]
}

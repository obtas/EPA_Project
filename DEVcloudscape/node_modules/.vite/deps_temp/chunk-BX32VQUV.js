import {
  checkSafeUrl
} from "./chunk-NEL4RAJ2.js";
import {
  useForwardFocus
} from "./chunk-CWU6G4BO.js";
import {
  InternalSpinner,
  live_region_default
} from "./chunk-5LXZ6RXM.js";
import {
  useFocusVisible
} from "./chunk-GKBIUDXI.js";
import {
  fireCancelableEvent,
  isPlainLeftClick
} from "./chunk-7TBDUUWV.js";
import {
  internal_default
} from "./chunk-XYE4ILSB.js";
import {
  useMergeRefs
} from "./chunk-EZZ3SG55.js";
import {
  __assign,
  __rest,
  clsx_m_default,
  init_clsx_m
} from "./chunk-VD3NZSIN.js";
import {
  require_react
} from "./chunk-X6MODOAL.js";
import {
  __toESM
} from "./chunk-J43GMYXM.js";

// node_modules/@cloudscape-design/components/button/internal.js
init_clsx_m();
var import_react = __toESM(require_react());

// node_modules/@cloudscape-design/components/button/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/DEVcloudscape/node_modules/@cloudscape-design/components/button/styles.scoped.css";
var styles_css_default = {
  "content": "awsui_content_vjswe_kyvev_97",
  "button": "awsui_button_vjswe_kyvev_101",
  "variant-normal": "awsui_variant-normal_vjswe_kyvev_122",
  "is-activated": "awsui_is-activated_vjswe_kyvev_135",
  "variant-icon": "awsui_variant-icon_vjswe_kyvev_162",
  "variant-modal-dismiss": "awsui_variant-modal-dismiss_vjswe_kyvev_162",
  "variant-flashbar-icon": "awsui_variant-flashbar-icon_vjswe_kyvev_162",
  "variant-inline-icon": "awsui_variant-inline-icon_vjswe_kyvev_180",
  "disabled": "awsui_disabled_vjswe_kyvev_198",
  "variant-primary": "awsui_variant-primary_vjswe_kyvev_206",
  "variant-link": "awsui_variant-link_vjswe_kyvev_290",
  "variant-breadcrumb-group": "awsui_variant-breadcrumb-group_vjswe_kyvev_710",
  "variant-menu-trigger": "awsui_variant-menu-trigger_vjswe_kyvev_797",
  "button-no-text": "awsui_button-no-text_vjswe_kyvev_881",
  "button-no-wrap": "awsui_button-no-wrap_vjswe_kyvev_885",
  "icon-left": "awsui_icon-left_vjswe_kyvev_901",
  "icon-right": "awsui_icon-right_vjswe_kyvev_906",
  "icon": "awsui_icon_vjswe_kyvev_901"
};

// node_modules/@cloudscape-design/components/button/icon-helper.js
init_clsx_m();
var React = __toESM(require_react());
function getIconAlign(props) {
  var standalone = props.variant === "icon" || props.variant === "inline-icon";
  return standalone ? "left" : props.iconAlign;
}
function IconWrapper(_a) {
  var iconName = _a.iconName, iconUrl = _a.iconUrl, iconAlt = _a.iconAlt, iconSvg = _a.iconSvg, iconSize = _a.iconSize, props = __rest(_a, ["iconName", "iconUrl", "iconAlt", "iconSvg", "iconSize"]);
  if (!iconName && !iconUrl && !iconSvg) {
    return null;
  }
  return React.createElement(internal_default, { className: clsx_m_default(styles_css_default.icon, styles_css_default["icon-".concat(getIconAlign(props))], props.iconClass), name: iconName, url: iconUrl, svg: iconSvg, alt: iconAlt, size: iconSize });
}
function LeftIcon(props) {
  if (props.loading) {
    return React.createElement(InternalSpinner, { className: clsx_m_default(styles_css_default.icon, styles_css_default["icon-left"]) });
  } else if (getIconAlign(props) === "left") {
    return React.createElement(IconWrapper, __assign({}, props));
  }
  return null;
}
function RightIcon(props) {
  if (getIconAlign(props) === "right") {
    return React.createElement(IconWrapper, __assign({}, props));
  }
  return null;
}

// node_modules/@cloudscape-design/components/button/internal.js
var InternalButton = import_react.default.forwardRef(function(_a, ref) {
  var _b;
  var children = _a.children, iconName = _a.iconName, __iconClass = _a.__iconClass, onClick = _a.onClick, onFollow = _a.onFollow, _c = _a.iconAlign, iconAlign = _c === void 0 ? "left" : _c, iconUrl = _a.iconUrl, iconSvg = _a.iconSvg, iconAlt = _a.iconAlt, _d = _a.variant, variant = _d === void 0 ? "normal" : _d, _e = _a.loading, loading = _e === void 0 ? false : _e, loadingText = _a.loadingText, _f = _a.disabled, disabled = _f === void 0 ? false : _f, _g = _a.wrapText, wrapText = _g === void 0 ? true : _g, href = _a.href, target = _a.target, download = _a.download, _h = _a.formAction, formAction = _h === void 0 ? "submit" : _h, ariaLabel = _a.ariaLabel, ariaExpanded = _a.ariaExpanded, __nativeAttributes = _a.__nativeAttributes, _j = _a.__internalRootRef, __internalRootRef = _j === void 0 ? null : _j, _k = _a.__activated, __activated = _k === void 0 ? false : _k, props = __rest(_a, ["children", "iconName", "__iconClass", "onClick", "onFollow", "iconAlign", "iconUrl", "iconSvg", "iconAlt", "variant", "loading", "loadingText", "disabled", "wrapText", "href", "target", "download", "formAction", "ariaLabel", "ariaExpanded", "__nativeAttributes", "__internalRootRef", "__activated"]);
  checkSafeUrl("Button", href);
  var focusVisible = useFocusVisible();
  var isAnchor = Boolean(href);
  var isDisabled = loading || disabled;
  var shouldHaveContent = children && ["icon", "inline-icon", "flashbar-icon", "modal-dismiss"].indexOf(variant) === -1;
  var buttonRef = (0, import_react.useRef)(null);
  useForwardFocus(ref, buttonRef);
  var handleClick = (0, import_react.useCallback)(function(event) {
    if (isAnchor && isDisabled) {
      return event.preventDefault();
    }
    if (isAnchor && isPlainLeftClick(event)) {
      fireCancelableEvent(onFollow, null, event);
    }
    var altKey = event.altKey, button = event.button, ctrlKey = event.ctrlKey, metaKey = event.metaKey, shiftKey = event.shiftKey;
    fireCancelableEvent(onClick, { altKey, button, ctrlKey, metaKey, shiftKey }, event);
  }, [isAnchor, isDisabled, onClick, onFollow]);
  var buttonClass = clsx_m_default(props.className, styles_css_default.button, styles_css_default["variant-".concat(variant)], (_b = {}, _b[styles_css_default.disabled] = isDisabled, _b[styles_css_default["button-no-wrap"]] = !wrapText, _b[styles_css_default["button-no-text"]] = !shouldHaveContent, _b[styles_css_default["is-activated"]] = __activated, _b));
  var buttonProps = __assign(__assign(__assign(__assign({}, props), focusVisible), __nativeAttributes), {
    ref: useMergeRefs(buttonRef, __internalRootRef),
    "aria-label": ariaLabel,
    "aria-expanded": ariaExpanded,
    className: buttonClass,
    onClick: handleClick
  });
  var iconProps = {
    loading,
    iconName,
    iconAlign,
    iconUrl,
    iconSvg,
    iconAlt,
    variant,
    iconClass: __iconClass,
    iconSize: variant === "modal-dismiss" ? "medium" : "normal"
  };
  var buttonContent = import_react.default.createElement(
    import_react.default.Fragment,
    null,
    import_react.default.createElement(LeftIcon, __assign({}, iconProps)),
    shouldHaveContent && import_react.default.createElement("span", { className: styles_css_default.content }, children),
    import_react.default.createElement(RightIcon, __assign({}, iconProps))
  );
  if (isAnchor) {
    return import_react.default.createElement(
      import_react.default.Fragment,
      null,
      import_react.default.createElement("a", __assign({}, buttonProps, {
        href,
        target,
        rel: target === "_blank" ? "noopener noreferrer" : void 0,
        tabIndex: isDisabled ? -1 : void 0,
        "aria-disabled": isDisabled ? true : void 0,
        download
      }), buttonContent),
      loading && loadingText && import_react.default.createElement(live_region_default, null, loadingText)
    );
  }
  return import_react.default.createElement(
    import_react.default.Fragment,
    null,
    import_react.default.createElement("button", __assign({}, buttonProps, { type: formAction === "none" ? "button" : "submit", disabled: isDisabled }), buttonContent),
    loading && loadingText && import_react.default.createElement(live_region_default, null, loadingText)
  );
});
var internal_default2 = InternalButton;

export {
  InternalButton,
  internal_default2 as internal_default
};
//# sourceMappingURL=chunk-BX32VQUV.js.map

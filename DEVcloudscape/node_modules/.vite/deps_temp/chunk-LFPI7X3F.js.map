{
  "version": 3,
  "sources": ["../../src/app-layout/visual-refresh/hooks/use-dynamic-overlap.ts"],
  "sourcesContent": ["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useContext, useLayoutEffect } from 'react';\n\nimport { AppLayoutContext } from '../context';\nimport { useContainerQuery } from '../../../internal/hooks/container-queries';\n\nexport interface UseDynamicOverlapProps {\n  /**\n   * Disables hook if not needed. By default, `false`.\n   */\n  disabled?: boolean;\n}\n\n/**\n * Observes the height of an element referenced by the returning ref and sets the value as overlapping\n * height for the surrounding AppLayout component.\n * @param props.disabled disables hook if not applicable\n * @returns ref to be measured as overlapping height\n */\nexport function useDynamicOverlap(props?: UseDynamicOverlapProps) {\n  const disabled = props?.disabled ?? false;\n  const { setDynamicOverlapHeight } = useContext(AppLayoutContext);\n  const [overlapContainerQuery, overlapElementRef] = useContainerQuery(rect => rect.height);\n\n  useLayoutEffect(\n    function handleDynamicOverlapHeight() {\n      if (!disabled) {\n        setDynamicOverlapHeight(overlapContainerQuery ?? 0);\n      }\n\n      return () => {\n        if (!disabled) {\n          setDynamicOverlapHeight(0);\n        }\n      };\n    },\n    [disabled, overlapContainerQuery, setDynamicOverlapHeight]\n  );\n\n  return overlapElementRef;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;AAEA,mBAA4C;AAkBtC,SAAU,kBAAkB,OAA8B;;AAC9D,MAAM,YAAW,KAAA,UAAK,QAAL,UAAK,SAAA,SAAL,MAAO,cAAQ,QAAA,OAAA,SAAA,KAAI;AAC5B,MAAA,8BAA4B,yBAAW,gBAAgB,EAAC;AAC1D,MAAA,KAA6C,kBAAkB,SAAA,MAAI;AAAI,WAAA,KAAK;EAAL,CAAW,GAAjF,wBAAqB,GAAA,IAAE,oBAAiB,GAAA;AAE/C,oCACE,SAAS,6BAA0B;AACjC,QAAI,CAAC,UAAU;AACb,8BAAwB,0BAAqB,QAArB,0BAAqB,SAArB,wBAAyB,CAAC;;AAGpD,WAAO,WAAA;AACL,UAAI,CAAC,UAAU;AACb,gCAAwB,CAAC;;IAE7B;EACF,GACA,CAAC,UAAU,uBAAuB,uBAAuB,CAAC;AAG5D,SAAO;AACT;",
  "names": []
}

{
  "version": 3,
  "sources": ["../../src/internal/components/live-region/index.tsx", "../../@cloudscape-design/components/internal/components/live-region/styles.css.js", "../../src/spinner/internal.tsx", "../../@cloudscape-design/components/spinner/styles.css.js"],
  "sourcesContent": ["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @cloudscape-design/prefer-live-region */\n\nimport clsx from 'clsx';\nimport React, { memo, useEffect, useRef } from 'react';\nimport ScreenreaderOnly, { ScreenreaderOnlyProps } from '../screenreader-only/index.js';\nimport styles from './styles.css.js';\n\nexport interface LiveRegionProps extends ScreenreaderOnlyProps {\n  assertive?: boolean;\n  delay?: number;\n  visible?: boolean;\n  children: React.ReactNode;\n}\n\n/**\n  The live region is hidden in the layout, but visible for screen readers.\n  It's purpose it to announce changes e.g. when custom navigation logic is used.\n\n  The way live region works differently in different browsers and screen readers and\n  it is recommended to manually test every new implementation.\n\n  If you notice there are different words being merged together,\n  check if there are text nodes not being wrapped in elements, like:\n  <LiveRegion>\n    {title}\n    <span><Details /></span>\n  </LiveRegion>\n\n  To fix, wrap \"title\" in an element:\n  <LiveRegion>\n    <span>{title}</span>\n    <span><Details /></span>\n  </LiveRegion>\n\n  Or create a single text node if possible:\n  <LiveRegion>\n    {`${title} ${details}`}\n  </LiveRegion>\n\n  The live region is always atomic, because non-atomic regions can be treated by screen readers\n  differently and produce unexpected results. To imitate non-atomic announcements simply use\n  multiple live regions:\n  <>\n    <LiveRegion>{title}</LiveRegion>\n    <LiveRegion><Details /></LiveRegion>\n  </>\n*/\nexport default memo(LiveRegion);\n\nfunction LiveRegion({ assertive = false, delay = 10, visible = false, children, ...restProps }: LiveRegionProps) {\n  const sourceRef = useRef<HTMLSpanElement>(null);\n  const targetRef = useRef<HTMLSpanElement>(null);\n\n  /*\n    When React state changes, React often produces too many DOM updates, causing NVDA to\n    issue many announcements for the same logical event (See https://github.com/nvaccess/nvda/issues/7996).\n\n    The code below imitates a debouncing, scheduling a callback every time new React state\n    update is detected. When a callback resolves, it copies content from a muted element\n    to the live region, which is recognized by screen readers as an update.\n\n    If the use case requires no announcement to be ignored, use delay = 0, but ensure it\n    does not impact the performance. If it does, prefer using a string as children prop.\n  */\n  useEffect(() => {\n    function updateLiveRegion() {\n      if (targetRef.current && sourceRef.current) {\n        const sourceContent = extractInnerText(sourceRef.current);\n        const targetContent = extractInnerText(targetRef.current);\n        if (targetContent !== sourceContent) {\n          // The aria-atomic does not work properly in Voice Over, causing\n          // certain parts of the content to be ignored. To fix that,\n          // we assign the source text content as a single node.\n          targetRef.current.innerText = sourceContent;\n        }\n      }\n    }\n\n    let timeoutId: null | number;\n    if (delay) {\n      timeoutId = setTimeout(updateLiveRegion, delay);\n    } else {\n      updateLiveRegion();\n    }\n\n    return () => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    };\n  });\n\n  return (\n    <>\n      {visible && <span ref={sourceRef}>{children}</span>}\n\n      <ScreenreaderOnly {...restProps} className={clsx(styles.root, restProps.className)}>\n        {!visible && (\n          <span ref={sourceRef} aria-hidden=\"true\">\n            {children}\n          </span>\n        )}\n\n        <span ref={targetRef} aria-atomic=\"true\" aria-live={assertive ? 'assertive' : 'polite'}></span>\n      </ScreenreaderOnly>\n    </>\n  );\n}\n\n// This only extracts text content from the node including all its children which is enough for now.\n// To make it more powerful, it is possible to create a more sophisticated extractor with respect to\n// ARIA properties to ignore aria-hidden nodes and read ARIA labels from the live content.\nfunction extractInnerText(node: HTMLElement) {\n  return (node.innerText || '').replace(/\\s+/g, ' ').trim();\n}\n", "\n    import './styles.scoped.css';\n    export default {\n  \"root\": \"awsui_root_3bgfn_im8v7_5\"\n};\n  ", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React from 'react';\nimport { getBaseProps } from '../internal/base-component';\nimport styles from './styles.css.js';\nimport { SpinnerProps } from './interfaces';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\n\ninterface InternalSpinnerProps extends SpinnerProps, InternalBaseComponentProps {}\n\nexport default function InternalSpinner({\n  size = 'normal',\n  variant = 'normal',\n  __internalRootRef,\n  ...props\n}: InternalSpinnerProps) {\n  const baseProps = getBaseProps(props);\n\n  return (\n    <span\n      {...baseProps}\n      className={clsx(baseProps.className, styles.root, styles[`size-${size}`], styles[`variant-${variant}`])}\n      ref={__internalRootRef}\n    >\n      <span className={clsx(styles.circle, styles['circle-left'])} />\n      <span className={clsx(styles.circle, styles['circle-right'])} />\n    </span>\n  );\n}\n", "\n    import './styles.scoped.css';\n    export default {\n  \"root\": \"awsui_root_1612d_9hw1o_127\",\n  \"spinner-rotator\": \"awsui_spinner-rotator_1612d_9hw1o_1\",\n  \"size-normal\": \"awsui_size-normal_1612d_9hw1o_135\",\n  \"size-big\": \"awsui_size-big_1612d_9hw1o_143\",\n  \"size-large\": \"awsui_size-large_1612d_9hw1o_151\",\n  \"variant-normal\": \"awsui_variant-normal_1612d_9hw1o_159\",\n  \"variant-disabled\": \"awsui_variant-disabled_1612d_9hw1o_162\",\n  \"variant-inverted\": \"awsui_variant-inverted_1612d_9hw1o_165\",\n  \"circle\": \"awsui_circle_1612d_9hw1o_169\",\n  \"circle-left\": \"awsui_circle-left_1612d_9hw1o_193\",\n  \"spinner-line-left\": \"awsui_spinner-line-left_1612d_9hw1o_1\",\n  \"circle-right\": \"awsui_circle-right_1612d_9hw1o_198\",\n  \"spinner-line-right\": \"awsui_spinner-line-right_1612d_9hw1o_1\"\n};\n  "],
  "mappings": ";;;;;;;;;;;;;;;;;;AAKA;AACA,mBAA+C;;;ACL3C,OAAO;AACP,IAAO,qBAAQ;AAAA,EACjB,QAAQ;AACV;;;AD8CA,IAAA,0BAAe,mBAAK,UAAU;AAE9B,SAAS,WAAW,IAA2F;AAAzF,MAAA,KAAA,GAAA,WAAA,YAAS,OAAA,SAAG,QAAK,IAAE,KAAA,GAAA,OAAA,QAAK,OAAA,SAAG,KAAE,IAAE,KAAA,GAAA,SAAA,UAAO,OAAA,SAAG,QAAK,IAAE,WAAQ,GAAA,UAAK,YAAS,OAAA,IAAxE,CAAA,aAAA,SAAA,WAAA,UAAA,CAA0E;AAC5F,MAAM,gBAAY,qBAAwB,IAAI;AAC9C,MAAM,gBAAY,qBAAwB,IAAI;AAa9C,8BAAU,WAAA;AACR,aAAS,mBAAgB;AACvB,UAAI,UAAU,WAAW,UAAU,SAAS;AAC1C,YAAM,gBAAgB,iBAAiB,UAAU,OAAO;AACxD,YAAM,gBAAgB,iBAAiB,UAAU,OAAO;AACxD,YAAI,kBAAkB,eAAe;AAInC,oBAAU,QAAQ,YAAY;;;IAGpC;AAEA,QAAI;AACJ,QAAI,OAAO;AACT,kBAAY,WAAW,kBAAkB,KAAK;WACzC;AACL,uBAAgB;;AAGlB,WAAO,WAAA;AACL,UAAI,WAAW;AACb,qBAAa,SAAS;;IAE1B;EACF,CAAC;AAED,SACE,aAAAA,QAAA;IAAA,aAAAA,QAAA;IAAA;IACG,WAAW,aAAAA,QAAA,cAAA,QAAA,EAAM,KAAK,UAAS,GAAG,QAAQ;IAE3C,aAAAA,QAAA;MAAC;MAAgB,SAAA,CAAA,GAAK,WAAS,EAAE,WAAW,eAAK,mBAAO,MAAM,UAAU,SAAS,EAAC,CAAA;MAC/E,CAAC,WACA,aAAAA,QAAA,cAAA,QAAA,EAAM,KAAK,WAAS,eAAc,OAAM,GACrC,QAAQ;MAIb,aAAAA,QAAA,cAAA,QAAA,EAAM,KAAK,WAAS,eAAc,QAAM,aAAY,YAAY,cAAc,SAAQ,CAAA;IAAS;EAC9E;AAGzB;AAKA,SAAS,iBAAiB,MAAiB;AACzC,UAAQ,KAAK,aAAa,IAAI,QAAQ,QAAQ,GAAG,EAAE,KAAI;AACzD;;;AEnHA;AACA,IAAAC,gBAAkB;;;ACFd,OAAO;AACP,IAAOC,sBAAQ;AAAA,EACjB,QAAQ;AAAA,EACR,mBAAmB;AAAA,EACnB,eAAe;AAAA,EACf,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,kBAAkB;AAAA,EAClB,oBAAoB;AAAA,EACpB,oBAAoB;AAAA,EACpB,UAAU;AAAA,EACV,eAAe;AAAA,EACf,qBAAqB;AAAA,EACrB,gBAAgB;AAAA,EAChB,sBAAsB;AACxB;;;ADLc,SAAP,gBAAiC,IAKjB;AAJrB,MAAA,KAAA,GAAA,MAAA,OAAI,OAAA,SAAG,WAAQ,IACf,KAAA,GAAA,SAAA,UAAO,OAAA,SAAG,WAAQ,IAClB,oBAAiB,GAAA,mBACd,QAAK,OAAA,IAJ8B,CAAA,QAAA,WAAA,mBAAA,CAKvC;AACC,MAAM,YAAY,aAAa,KAAK;AAEpC,SACE,cAAAC,QAAA;IAAA;IAAA,SAAA,CAAA,GACM,WAAS,EACb,WAAW,eAAK,UAAU,WAAWC,oBAAO,MAAMA,oBAAO,QAAA,OAAQ,IAAI,IAAKA,oBAAO,WAAA,OAAW,OAAO,EAAG,GACtG,KAAK,kBAAiB,CAAA;IAEtB,cAAAD,QAAA,cAAA,QAAA,EAAM,WAAW,eAAKC,oBAAO,QAAQA,oBAAO,cAAc,EAAC,CAAA;IAC3D,cAAAD,QAAA,cAAA,QAAA,EAAM,WAAW,eAAKC,oBAAO,QAAQA,oBAAO,eAAe,EAAC,CAAA;EAAI;AAGtE;",
  "names": ["React", "import_react", "styles_css_default", "React", "styles_css_default"]
}

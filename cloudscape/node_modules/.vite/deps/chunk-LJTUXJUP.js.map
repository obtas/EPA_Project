{
  "version": 3,
  "sources": ["../../@cloudscape-design/components/internal/utils/internal/utils/scrollable-containers.ts"],
  "sourcesContent": ["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport interface Dimensions {\n  height: number;\n  width: number;\n  top: number;\n  left: number;\n}\n\nexport const getOverflowParents = (element: HTMLElement): HTMLElement[] => {\n  const parents = [];\n  let node: HTMLElement | null = element;\n\n  while ((node = node.parentElement) && node !== document.body) {\n    getComputedStyle(node).overflow !== 'visible' && parents.push(node);\n  }\n  return parents;\n};\n\nexport const getOverflowParentDimensions = (\n  element: HTMLElement,\n  excludeClosestParent = false,\n  expandToViewport = false,\n  canExpandOutsideViewport = false\n): Dimensions[] => {\n  const parents = expandToViewport\n    ? []\n    : getOverflowParents(element).map(el => {\n        const { height, width, top, left } = el.getBoundingClientRect();\n        return {\n          // Treat the whole scrollable area as the available height\n          // if we're allowed to expand past the viewport.\n          height: canExpandOutsideViewport ? el.scrollHeight : height,\n          width,\n          top,\n          left,\n        };\n      });\n\n  if (canExpandOutsideViewport && !expandToViewport) {\n    const documentDimensions = document.documentElement.getBoundingClientRect();\n    parents.push({\n      width: Math.max(documentDimensions.width, document.documentElement.clientWidth),\n      height: Math.max(documentDimensions.height, document.documentElement.clientHeight),\n      top: documentDimensions.top,\n      left: documentDimensions.left,\n    });\n  } else {\n    parents.push({\n      height: window.innerHeight,\n      width: window.innerWidth,\n      top: 0,\n      left: 0,\n    });\n  }\n\n  if (excludeClosestParent && !expandToViewport) {\n    parents.shift();\n  }\n\n  return parents;\n};\n\ntype ScrollIntoViewOptions = Parameters<HTMLElement['scrollIntoView']>[0];\n\n/**\n * Calls `scrollIntoView` on the provided element with sensible defaults. If\n * the element does not existed or does not support the `scrollIntoView`\n * method, it will do nothing. This wrapper is created to support environments\n * where the native function is not available like JSDom (feature request:\n * https://github.com/jsdom/jsdom/issues/1422).\n *\n * @param element to be scrolled into view\n * @param options native options for `scrollIntoView`\n */\nexport function scrollElementIntoView(\n  element: HTMLElement | undefined,\n  options: ScrollIntoViewOptions = { block: 'nearest', inline: 'nearest' }\n) {\n  element?.scrollIntoView?.(options);\n}\n"],
  "mappings": ";AASO,IAAM,qBAAqB,CAAC,YAAuC;AACxE,QAAM,UAAU,CAAA;AAChB,MAAI,OAA2B;AAE/B,UAAQ,OAAO,KAAK,kBAAkB,SAAS,SAAS,MAAM;AAC5D,qBAAiB,IAAI,EAAE,aAAa,aAAa,QAAQ,KAAK,IAAI;;AAEpE,SAAO;AACT;AAEO,IAAM,8BAA8B,CACzC,SACA,uBAAuB,OACvB,mBAAmB,OACnB,2BAA2B,UACX;AAChB,QAAM,UAAU,mBACZ,CAAA,IACA,mBAAmB,OAAO,EAAE,IAAI,QAAK;AACnC,UAAM,EAAE,QAAQ,OAAO,KAAK,KAAI,IAAK,GAAG,sBAAqB;AAC7D,WAAO;MAGL,QAAQ,2BAA2B,GAAG,eAAe;MACrD;MACA;MACA;;EAEJ,CAAC;AAEL,MAAI,4BAA4B,CAAC,kBAAkB;AACjD,UAAM,qBAAqB,SAAS,gBAAgB,sBAAqB;AACzE,YAAQ,KAAK;MACX,OAAO,KAAK,IAAI,mBAAmB,OAAO,SAAS,gBAAgB,WAAW;MAC9E,QAAQ,KAAK,IAAI,mBAAmB,QAAQ,SAAS,gBAAgB,YAAY;MACjF,KAAK,mBAAmB;MACxB,MAAM,mBAAmB;KAC1B;SACI;AACL,YAAQ,KAAK;MACX,QAAQ,OAAO;MACf,OAAO,OAAO;MACd,KAAK;MACL,MAAM;KACP;;AAGH,MAAI,wBAAwB,CAAC,kBAAkB;AAC7C,YAAQ,MAAK;;AAGf,SAAO;AACT;AAcM,SAAU,sBACd,SACA,UAAiC,EAAE,OAAO,WAAW,QAAQ,UAAS,GAAE;;AAExE,GAAA,KAAA,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,oBAAc,QAAA,OAAA,SAAA,SAAA,GAAA,KAAA,SAAG,OAAO;AACnC;",
  "names": []
}

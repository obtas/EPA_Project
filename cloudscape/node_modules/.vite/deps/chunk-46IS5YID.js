import {
  InternalSpinner,
  live_region_default
} from "./chunk-JGOBMKQY.js";
import {
  checkSafeUrl,
  useFunnel
} from "./chunk-SD4QTYOH.js";
import {
  fireCancelableEvent,
  isPlainLeftClick
} from "./chunk-CTALK4OT.js";
import {
  internal_default,
  useMergeRefs
} from "./chunk-4FOLHITS.js";
import {
  __rest,
  clsx_m_default
} from "./chunk-YXZ34YT5.js";
import {
  __toESM,
  require_react
} from "./chunk-C3URVCCN.js";

// node_modules/@cloudscape-design/components/button/internal.js
var import_react3 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/forward-focus/index.js
var import_react = __toESM(require_react());
function useForwardFocus(mainRef, controlRef) {
  (0, import_react.useImperativeHandle)(mainRef, () => ({
    focus(...args) {
      var _a;
      (_a = controlRef.current) === null || _a === void 0 ? void 0 : _a.focus(...args);
    }
  }), [controlRef]);
}

// node_modules/@cloudscape-design/components/button/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/button/styles.scoped.css";
var styles_css_default = {
  "content": "awsui_content_vjswe_1hx49_97",
  "button": "awsui_button_vjswe_1hx49_101",
  "variant-normal": "awsui_variant-normal_vjswe_1hx49_126",
  "is-activated": "awsui_is-activated_vjswe_1hx49_139",
  "variant-icon": "awsui_variant-icon_vjswe_1hx49_166",
  "variant-modal-dismiss": "awsui_variant-modal-dismiss_vjswe_1hx49_166",
  "variant-flashbar-icon": "awsui_variant-flashbar-icon_vjswe_1hx49_166",
  "variant-inline-icon": "awsui_variant-inline-icon_vjswe_1hx49_184",
  "disabled": "awsui_disabled_vjswe_1hx49_202",
  "variant-primary": "awsui_variant-primary_vjswe_1hx49_210",
  "variant-link": "awsui_variant-link_vjswe_1hx49_294",
  "variant-inline-link": "awsui_variant-inline-link_vjswe_1hx49_546",
  "variant-breadcrumb-group": "awsui_variant-breadcrumb-group_vjswe_1hx49_800",
  "variant-menu-trigger": "awsui_variant-menu-trigger_vjswe_1hx49_887",
  "button-no-text": "awsui_button-no-text_vjswe_1hx49_971",
  "button-no-wrap": "awsui_button-no-wrap_vjswe_1hx49_975",
  "full-width": "awsui_full-width_vjswe_1hx49_978",
  "icon-left": "awsui_icon-left_vjswe_1hx49_995",
  "icon-right": "awsui_icon-right_vjswe_1hx49_1000",
  "icon": "awsui_icon_vjswe_1hx49_995"
};

// node_modules/@cloudscape-design/components/button/icon-helper.js
var React = __toESM(require_react());
function getIconAlign(props) {
  const standalone = props.variant === "icon" || props.variant === "inline-icon";
  return standalone ? "left" : props.iconAlign;
}
function IconWrapper(_a) {
  var { iconName, iconUrl, iconAlt, iconSvg, iconSize } = _a, props = __rest(_a, ["iconName", "iconUrl", "iconAlt", "iconSvg", "iconSize"]);
  if (!iconName && !iconUrl && !iconSvg) {
    return null;
  }
  return React.createElement(internal_default, { className: clsx_m_default(styles_css_default.icon, styles_css_default[`icon-${getIconAlign(props)}`], props.iconClass), name: iconName, url: iconUrl, svg: iconSvg, alt: iconAlt, size: iconSize });
}
function LeftIcon(props) {
  if (props.loading) {
    return React.createElement(InternalSpinner, { className: clsx_m_default(styles_css_default.icon, styles_css_default["icon-left"]) });
  } else if (getIconAlign(props) === "left") {
    return React.createElement(IconWrapper, Object.assign({}, props));
  }
  return null;
}
function RightIcon(props) {
  if (getIconAlign(props) === "right") {
    return React.createElement(IconWrapper, Object.assign({}, props));
  }
  return null;
}

// node_modules/@cloudscape-design/components/internal/context/button-context.js
var import_react2 = __toESM(require_react());
var ButtonContext = (0, import_react2.createContext)({
  onClick: () => {
  }
});
function useButtonContext() {
  return (0, import_react2.useContext)(ButtonContext);
}

// node_modules/@cloudscape-design/components/button/internal.js
var InternalButton = import_react3.default.forwardRef((_a, ref) => {
  var { children, iconName, __iconClass, onClick, onFollow, iconAlign = "left", iconUrl, iconSvg, iconAlt, variant = "normal", loading = false, loadingText, disabled = false, wrapText = true, href, target, rel, download, formAction = "submit", ariaLabel, ariaDescribedby, ariaExpanded, fullWidth, __nativeAttributes, __internalRootRef = null, __activated = false } = _a, props = __rest(_a, ["children", "iconName", "__iconClass", "onClick", "onFollow", "iconAlign", "iconUrl", "iconSvg", "iconAlt", "variant", "loading", "loadingText", "disabled", "wrapText", "href", "target", "rel", "download", "formAction", "ariaLabel", "ariaDescribedby", "ariaExpanded", "fullWidth", "__nativeAttributes", "__internalRootRef", "__activated"]);
  checkSafeUrl("Button", href);
  const isAnchor = Boolean(href);
  const isNotInteractive = loading || disabled;
  const shouldHaveContent = children && ["icon", "inline-icon", "flashbar-icon", "modal-dismiss"].indexOf(variant) === -1;
  const buttonRef = (0, import_react3.useRef)(null);
  useForwardFocus(ref, buttonRef);
  const buttonContext = useButtonContext();
  const handleClick = (event) => {
    if (isNotInteractive) {
      return event.preventDefault();
    }
    if (isAnchor && isPlainLeftClick(event)) {
      fireCancelableEvent(onFollow, { href, target }, event);
    }
    const { altKey, button, ctrlKey, metaKey, shiftKey } = event;
    fireCancelableEvent(onClick, { altKey, button, ctrlKey, metaKey, shiftKey }, event);
    buttonContext.onClick({ variant });
  };
  const buttonClass = clsx_m_default(props.className, styles_css_default.button, styles_css_default[`variant-${variant}`], {
    [styles_css_default.disabled]: isNotInteractive,
    [styles_css_default["button-no-wrap"]]: !wrapText,
    [styles_css_default["button-no-text"]]: !shouldHaveContent,
    [styles_css_default["is-activated"]]: __activated,
    [styles_css_default["full-width"]]: shouldHaveContent && fullWidth
  });
  const buttonProps = Object.assign(Object.assign(Object.assign({}, props), __nativeAttributes), {
    ref: useMergeRefs(buttonRef, __internalRootRef),
    "aria-label": ariaLabel,
    "aria-describedby": ariaDescribedby,
    "aria-expanded": ariaExpanded,
    title: ariaLabel,
    className: buttonClass,
    onClick: handleClick
  });
  const iconProps = {
    loading,
    iconName,
    iconAlign,
    iconUrl,
    iconSvg,
    iconAlt,
    variant,
    iconClass: __iconClass,
    iconSize: variant === "modal-dismiss" ? "medium" : "normal"
  };
  const buttonContent = import_react3.default.createElement(
    import_react3.default.Fragment,
    null,
    import_react3.default.createElement(LeftIcon, Object.assign({}, iconProps)),
    shouldHaveContent && import_react3.default.createElement("span", { className: styles_css_default.content }, children),
    import_react3.default.createElement(RightIcon, Object.assign({}, iconProps))
  );
  const { loadingButtonCount } = useFunnel();
  (0, import_react3.useEffect)(() => {
    if (loading) {
      loadingButtonCount.current++;
      return () => {
        loadingButtonCount.current--;
      };
    }
  }, [loading, loadingButtonCount]);
  if (isAnchor) {
    return import_react3.default.createElement(
      import_react3.default.Fragment,
      null,
      import_react3.default.createElement("a", Object.assign({}, buttonProps, {
        href,
        target,
        rel: rel !== null && rel !== void 0 ? rel : target === "_blank" ? "noopener noreferrer" : void 0,
        tabIndex: isNotInteractive ? -1 : void 0,
        "aria-disabled": isNotInteractive ? true : void 0,
        download
      }), buttonContent),
      loading && loadingText && import_react3.default.createElement(live_region_default, null, loadingText)
    );
  }
  return import_react3.default.createElement(
    import_react3.default.Fragment,
    null,
    import_react3.default.createElement("button", Object.assign({}, buttonProps, { type: formAction === "none" ? "button" : "submit", disabled, "aria-disabled": loading && !disabled ? true : void 0 }), buttonContent),
    loading && loadingText && import_react3.default.createElement(live_region_default, null, loadingText)
  );
});
var internal_default2 = InternalButton;

export {
  useForwardFocus,
  ButtonContext,
  InternalButton,
  internal_default2 as internal_default
};
//# sourceMappingURL=chunk-46IS5YID.js.map

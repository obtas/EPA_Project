import {
  DATA_ATTR_FUNNEL_INTERACTION_ID,
  DATA_ATTR_FUNNEL_SUBSTEP,
  getSubStepAllSelector
} from "./chunk-AX3SE4VV.js";
import {
  warnOnce
} from "./chunk-YXZ34YT5.js";
import {
  __toESM,
  require_react
} from "./chunk-C3URVCCN.js";

// node_modules/@cloudscape-design/components/internal/utils/check-safe-url.js
var allowedJavascriptUrls = ["javascript:void(0)", "javascript:void(0);", "javascript:;"];
function checkSafeUrl(component, url) {
  if (!url) {
    return;
  }
  if (allowedJavascriptUrls.indexOf(url.toLowerCase()) !== -1) {
    return;
  }
  let parsedUrl;
  try {
    parsedUrl = new URL(url);
  } catch (e) {
    return;
  }
  if (parsedUrl.protocol === "javascript:") {
    warnOnce(component, `A javascript: URL was blocked as a security precaution. The URL was "${url}".`);
    throw new Error(`A javascript: URL was blocked as a security precaution.`);
  }
  return;
}

// node_modules/@cloudscape-design/components/internal/analytics/hooks/use-funnel.js
var import_react2 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/analytics/context/analytics-context.js
var import_react = __toESM(require_react());
var FunnelContext = (0, import_react.createContext)({
  funnelInteractionId: void 0,
  setFunnelInteractionId: () => {
  },
  funnelType: "single-page",
  optionalStepNumbers: [],
  totalFunnelSteps: 0,
  funnelSubmit: () => {
  },
  funnelCancel: () => {
  },
  submissionAttempt: 0,
  funnelNextOrSubmitAttempt: () => {
  },
  funnelState: { current: "default" },
  errorCount: { current: 0 },
  loadingButtonCount: { current: 0 }
});
var FunnelStepContext = (0, import_react.createContext)({
  funnelInteractionId: void 0,
  stepNameSelector: "",
  stepNumber: 0,
  funnelStepProps: {}
});
var FunnelSubStepContext = (0, import_react.createContext)({
  funnelInteractionId: void 0,
  subStepId: "",
  stepNumber: 0,
  stepNameSelector: "",
  subStepSelector: "",
  subStepNameSelector: "",
  funnelStepProps: {}
});

// node_modules/@cloudscape-design/components/internal/analytics/index.js
var FunnelMetrics = {
  funnelStart() {
    return "";
  },
  funnelError() {
  },
  funnelComplete() {
  },
  funnelSuccessful() {
  },
  funnelCancelled() {
  },
  funnelStepStart() {
  },
  funnelStepComplete() {
  },
  funnelStepNavigation() {
  },
  funnelSubStepStart() {
  },
  funnelSubStepComplete() {
  },
  funnelSubStepError() {
  },
  helpPanelInteracted() {
  },
  externalLinkInteracted() {
  }
};

// node_modules/@cloudscape-design/components/internal/analytics/hooks/use-funnel.js
var useFunnelSubStep = () => {
  const subStepRef = (0, import_react2.useRef)(null);
  const context = (0, import_react2.useContext)(FunnelSubStepContext);
  const { funnelInteractionId, subStepId, subStepSelector, subStepNameSelector, stepNumber, stepNameSelector } = context;
  const { funnelState } = useFunnel();
  const onFocus = (event) => {
    if (funnelInteractionId && subStepRef.current && (!event.relatedTarget || !subStepRef.current.contains(event.relatedTarget)) && funnelState.current === "default") {
      FunnelMetrics.funnelSubStepStart({
        funnelInteractionId,
        subStepSelector,
        subStepNameSelector,
        stepNumber,
        stepNameSelector,
        subStepAllSelector: getSubStepAllSelector()
      });
    }
  };
  const onBlur = (event) => {
    if (funnelInteractionId && subStepRef.current && !subStepRef.current.contains(event.relatedTarget) && funnelState.current === "default") {
      FunnelMetrics.funnelSubStepComplete({
        funnelInteractionId,
        subStepSelector,
        subStepNameSelector,
        stepNumber,
        stepNameSelector,
        subStepAllSelector: getSubStepAllSelector()
      });
    }
  };
  const funnelSubStepProps = funnelInteractionId ? {
    [DATA_ATTR_FUNNEL_SUBSTEP]: subStepId,
    onFocus,
    onBlur
  } : {};
  return Object.assign({ funnelSubStepProps, subStepRef }, context);
};
var useFunnelStep = () => {
  const context = (0, import_react2.useContext)(FunnelStepContext);
  return context;
};
var useFunnel = () => {
  const context = (0, import_react2.useContext)(FunnelContext);
  const funnelProps = context.funnelInteractionId ? {
    [DATA_ATTR_FUNNEL_INTERACTION_ID]: context.funnelInteractionId
  } : {};
  return Object.assign({ funnelProps }, context);
};

export {
  checkSafeUrl,
  FunnelContext,
  FunnelStepContext,
  FunnelSubStepContext,
  FunnelMetrics,
  useFunnelSubStep,
  useFunnelStep,
  useFunnel
};
//# sourceMappingURL=chunk-SD4QTYOH.js.map

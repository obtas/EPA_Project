import {
  Portal
} from "./chunk-TM5SCOBX.js";
import {
  useVisualContext
} from "./chunk-W3EIS6OW.js";
import {
  TabTrap,
  focus_lock_default,
  getFirstFocusable,
  getLastFocusable
} from "./chunk-B33KRNJ3.js";
import {
  getOverflowParentDimensions,
  getOverflowParents,
  useUniqueId
} from "./chunk-5PTPSAWI.js";
import {
  InternalBox
} from "./chunk-OLA4AI5K.js";
import {
  Transition
} from "./chunk-TWOQSS3Q.js";
import {
  InternalButton,
  useForwardFocus
} from "./chunk-46IS5YID.js";
import {
  useInternalI18n
} from "./chunk-VOJM65QS.js";
import {
  useResizeObserver
} from "./chunk-7EUAENCI.js";
import {
  checkSafeUrl,
  useFunnel
} from "./chunk-SD4QTYOH.js";
import {
  useMobile
} from "./chunk-VAAYRRFE.js";
import {
  fireCancelableEvent,
  fireKeyboardEvent,
  fireNonCancelableEvent,
  isPlainLeftClick
} from "./chunk-CTALK4OT.js";
import {
  internal_default,
  useMergeRefs
} from "./chunk-4FOLHITS.js";
import {
  KeyCode,
  __rest,
  clsx_m_default,
  findUpUntil,
  getBaseProps,
  getContainingBlock,
  nodeContains,
  useCurrentMode,
  useDensityMode,
  useReducedMotion,
  useStableEventHandler,
  useVisualRefresh
} from "./chunk-YXZ34YT5.js";
import {
  require_react_dom
} from "./chunk-XY35XOXX.js";
import {
  __toESM,
  require_react
} from "./chunk-C3URVCCN.js";

// node_modules/@cloudscape-design/components/internal/components/dropdown/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/internal/components/dropdown/styles.scoped.css";
var styles_css_default = {
  "dropdown-content-wrapper": "awsui_dropdown-content-wrapper_qwoo0_np0k9_93",
  "awsui-motion-fade-in-dropdown": "awsui_awsui-motion-fade-in-dropdown_qwoo0_np0k9_1",
  "refresh": "awsui_refresh_qwoo0_np0k9_114",
  "awsui-motion-fade-in-0": "awsui_awsui-motion-fade-in-0_qwoo0_np0k9_1",
  "root": "awsui_root_qwoo0_np0k9_143",
  "interior": "awsui_interior_qwoo0_np0k9_157",
  "dropdown": "awsui_dropdown_qwoo0_np0k9_93",
  "use-portal": "awsui_use-portal_qwoo0_np0k9_168",
  "dropdown-drop-up": "awsui_dropdown-drop-up_qwoo0_np0k9_213",
  "with-limited-width": "awsui_with-limited-width_qwoo0_np0k9_217",
  "dropdown-drop-left": "awsui_dropdown-drop-left_qwoo0_np0k9_220",
  "dropdown-drop-right": "awsui_dropdown-drop-right_qwoo0_np0k9_223",
  "occupy-entire-width": "awsui_occupy-entire-width_qwoo0_np0k9_226",
  "hide-upper-border": "awsui_hide-upper-border_qwoo0_np0k9_229",
  "open": "awsui_open_qwoo0_np0k9_236",
  "nowrap": "awsui_nowrap_qwoo0_np0k9_245",
  "is-empty": "awsui_is-empty_qwoo0_np0k9_249",
  "dropdown-content": "awsui_dropdown-content_qwoo0_np0k9_93",
  "ie11-wrapper": "awsui_ie11-wrapper_qwoo0_np0k9_259",
  "stretch-trigger-height": "awsui_stretch-trigger-height_qwoo0_np0k9_263"
};

// node_modules/@cloudscape-design/components/internal/components/dropdown/index.js
var import_react2 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());

// node_modules/@cloudscape-design/components/internal/components/dropdown/dropdown-fit-handler.js
var AVAILABLE_SPACE_RESERVE_DEFAULT = 50;
var AVAILABLE_SPACE_RESERVE_MOBILE_VERTICAL = 19;
var AVAILABLE_SPACE_RESERVE_MOBILE_HORIZONTAL = 20;
var getClosestParentDimensions = (element) => {
  const parents = getOverflowParents(element).map((el) => {
    const { height, width, top, left } = el.getBoundingClientRect();
    return {
      height,
      width,
      top,
      left
    };
  });
  return parents.shift();
};
var getAvailableSpace = (trigger, dropdown, overflowParents, stretchWidth = false, stretchHeight = false, isMobile) => {
  const availableSpaceReserveVertical = stretchHeight ? 0 : isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_VERTICAL : AVAILABLE_SPACE_RESERVE_DEFAULT;
  const availableSpaceReserveHorizontal = stretchWidth ? 0 : isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_HORIZONTAL : AVAILABLE_SPACE_RESERVE_DEFAULT;
  const { bottom: triggerBottom, left: triggerLeft, right: triggerRight } = trigger.getBoundingClientRect();
  return overflowParents.reduce(({ above, below, left, right }, overflowParent) => {
    const offsetTop = triggerBottom - overflowParent.top;
    const currentAbove = offsetTop - trigger.offsetHeight - availableSpaceReserveVertical;
    const currentBelow = overflowParent.height - offsetTop - availableSpaceReserveVertical;
    const currentLeft = triggerRight - overflowParent.left - availableSpaceReserveHorizontal;
    const currentRight = overflowParent.left + overflowParent.width - triggerLeft - availableSpaceReserveHorizontal;
    return {
      above: Math.min(above, currentAbove),
      below: Math.min(below, currentBelow),
      left: Math.min(left, currentLeft),
      right: Math.min(right, currentRight)
    };
  }, { above: Number.MAX_VALUE, below: Number.MAX_VALUE, left: Number.MAX_VALUE, right: Number.MAX_VALUE });
};
var getInteriorAvailableSpace = (trigger, dropdown, overflowParents, isMobile) => {
  const AVAILABLE_SPACE_RESERVE_VERTICAL = isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_VERTICAL : AVAILABLE_SPACE_RESERVE_DEFAULT;
  const AVAILABLE_SPACE_RESERVE_HORIZONTAL = isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_HORIZONTAL : AVAILABLE_SPACE_RESERVE_DEFAULT;
  const { bottom: triggerBottom, top: triggerTop, left: triggerLeft, right: triggerRight } = trigger.getBoundingClientRect();
  return overflowParents.reduce(({ above, below, left, right }, overflowParent) => {
    const currentAbove = triggerBottom - overflowParent.top - AVAILABLE_SPACE_RESERVE_VERTICAL;
    const currentBelow = overflowParent.height - triggerTop + overflowParent.top - AVAILABLE_SPACE_RESERVE_VERTICAL;
    const currentLeft = triggerLeft - overflowParent.left - AVAILABLE_SPACE_RESERVE_HORIZONTAL;
    const currentRight = overflowParent.left + overflowParent.width - triggerRight - AVAILABLE_SPACE_RESERVE_HORIZONTAL;
    return {
      above: Math.min(above, currentAbove),
      below: Math.min(below, currentBelow),
      left: Math.min(left, currentLeft),
      right: Math.min(right, currentRight)
    };
  }, { above: Number.MAX_VALUE, below: Number.MAX_VALUE, left: Number.MAX_VALUE, right: Number.MAX_VALUE });
};
var getDropdownPosition = (trigger, dropdown, overflowParents, minWidth, preferCenter = false, stretchWidth = false, stretchHeight = false, isMobile) => {
  const availableSpace = getAvailableSpace(trigger, dropdown, overflowParents, stretchWidth, stretchHeight, isMobile);
  const triggerWidth = trigger.getBoundingClientRect().width;
  minWidth = minWidth ? Math.min(triggerWidth, minWidth) : triggerWidth;
  const requiredWidth = dropdown.getBoundingClientRect().width;
  const idealWidth = Math.max(requiredWidth, minWidth);
  let dropLeft;
  let left = null;
  let width = idealWidth;
  if (idealWidth <= availableSpace.right) {
    dropLeft = false;
  } else if (idealWidth <= availableSpace.left) {
    dropLeft = true;
  } else {
    dropLeft = availableSpace.left > availableSpace.right;
    width = Math.max(availableSpace.left, availableSpace.right, minWidth);
  }
  if (preferCenter) {
    const spillOver = (idealWidth - triggerWidth) / 2;
    const availableOutsideLeft = availableSpace.left - triggerWidth;
    const availableOutsideRight = availableSpace.right - triggerWidth;
    const fitsInCenter = availableOutsideLeft >= spillOver && availableOutsideRight >= spillOver;
    if (fitsInCenter) {
      left = -spillOver;
    }
  }
  const dropUp = availableSpace.below < dropdown.offsetHeight && availableSpace.above > availableSpace.below;
  const availableHeight = dropUp ? availableSpace.above : availableSpace.below;
  const croppedHeight = stretchHeight ? availableHeight : Math.floor(availableHeight / 31) * 31 + 16;
  return {
    dropUp,
    dropLeft,
    left: left === null ? "auto" : `${left}px`,
    height: `${croppedHeight}px`,
    width: `${width}px`
  };
};
var getInteriorDropdownPosition = (trigger, dropdown, overflowParents, isMobile) => {
  const availableSpace = getInteriorAvailableSpace(trigger, dropdown, overflowParents, isMobile);
  const { bottom: triggerBottom, top: triggerTop, width: triggerWidth } = trigger.getBoundingClientRect();
  const { top: parentDropdownTop, height: parentDropdownHeight } = getClosestParentDimensions(trigger);
  let dropLeft;
  let width = dropdown.getBoundingClientRect().width;
  const top = triggerTop - parentDropdownTop;
  if (width <= availableSpace.right) {
    dropLeft = false;
  } else if (width <= availableSpace.left) {
    dropLeft = true;
  } else {
    dropLeft = availableSpace.left > availableSpace.right;
    width = Math.max(availableSpace.left, availableSpace.right);
  }
  const left = dropLeft ? 0 - width : triggerWidth;
  const dropUp = availableSpace.below < dropdown.offsetHeight && availableSpace.above > availableSpace.below;
  const bottom = dropUp ? parentDropdownTop + parentDropdownHeight - triggerBottom : 0;
  const availableHeight = dropUp ? availableSpace.above : availableSpace.below;
  const croppedHeight = Math.floor(availableHeight / 31) * 31 + 16;
  return {
    dropUp,
    dropLeft,
    height: `${croppedHeight}px`,
    width: `${width}px`,
    top: `${top}px`,
    bottom: `${bottom}px`,
    left: `${left}px`
  };
};
var calculatePosition = (dropdownElement, triggerElement, verticalContainerElement, interior, expandToViewport, preferCenter, stretchWidth, stretchHeight, isMobile, minWidth) => {
  verticalContainerElement.style.maxHeight = "";
  dropdownElement.style.width = "";
  dropdownElement.style.top = "";
  dropdownElement.style.bottom = "";
  dropdownElement.style.left = "";
  dropdownElement.classList.remove(styles_css_default["dropdown-drop-left"]);
  dropdownElement.classList.remove(styles_css_default["dropdown-drop-right"]);
  dropdownElement.classList.remove(styles_css_default["dropdown-drop-up"]);
  const overflowParents = getOverflowParentDimensions(dropdownElement, interior, expandToViewport, stretchHeight);
  const position = interior ? getInteriorDropdownPosition(triggerElement, dropdownElement, overflowParents, isMobile) : getDropdownPosition(triggerElement, dropdownElement, overflowParents, minWidth, preferCenter, stretchWidth, stretchHeight, isMobile);
  const triggerBox = triggerElement.getBoundingClientRect();
  return [position, triggerBox];
};

// node_modules/@cloudscape-design/components/internal/hooks/use-portal-mode-classes/index.js
function usePortalModeClasses(ref) {
  const colorMode = useCurrentMode(ref);
  const densityMode = useDensityMode(ref);
  const context = useVisualContext(ref);
  const visualRefresh = useVisualRefresh();
  return clsx_m_default({
    "awsui-polaris-dark-mode awsui-dark-mode": colorMode === "dark",
    "awsui-polaris-compact-mode awsui-compact-mode": densityMode === "compact",
    "awsui-visual-refresh": visualRefresh,
    [`awsui-context-${context}`]: context
  });
}

// node_modules/@cloudscape-design/components/internal/components/dropdown/context.js
var import_react = __toESM(require_react());
var DropdownContext = import_react.default.createContext({
  position: "bottom-right"
});
function DropdownContextProvider({ children, position = "bottom-right" }) {
  return import_react.default.createElement(DropdownContext.Provider, { value: { position } }, children);
}
function useDropdownContext() {
  return (0, import_react.useContext)(DropdownContext);
}

// node_modules/@cloudscape-design/components/internal/components/dropdown/index.js
var DropdownContainer = ({ children, renderWithPortal = false, id, referrerId, open }) => {
  if (renderWithPortal) {
    if (open) {
      return (0, import_react_dom.createPortal)(import_react2.default.createElement("div", { id, "data-awsui-referrer-id": referrerId }, children), document.body);
    } else {
      return null;
    }
  } else {
    return import_react2.default.createElement(import_react2.default.Fragment, null, children);
  }
};
var TransitionContent = ({ state, transitionRef, dropdownClasses, stretchWidth, interior, isRefresh, dropdownRef, verticalContainerRef, expandToViewport, header, children, footer, position, open, onMouseDown }) => {
  const contentRef = useMergeRefs(dropdownRef, transitionRef);
  return import_react2.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default.dropdown, dropdownClasses, {
      [styles_css_default.open]: open,
      [styles_css_default["with-limited-width"]]: !stretchWidth,
      [styles_css_default["hide-upper-border"]]: stretchWidth,
      [styles_css_default.interior]: interior,
      [styles_css_default["is-empty"]]: !header && !children,
      [styles_css_default.refresh]: isRefresh,
      [styles_css_default["use-portal"]]: expandToViewport && !interior
    }), ref: contentRef, "data-open": open, "data-animating": state !== "exited", "aria-hidden": !open, onMouseDown },
    import_react2.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default["dropdown-content-wrapper"], isRefresh && styles_css_default.refresh) },
      import_react2.default.createElement(
        "div",
        { className: styles_css_default["ie11-wrapper"] },
        import_react2.default.createElement(
          "div",
          { ref: verticalContainerRef, className: styles_css_default["dropdown-content"] },
          import_react2.default.createElement(
            DropdownContextProvider,
            { position },
            header,
            children,
            footer
          )
        )
      )
    )
  );
};
var Dropdown = ({ children, trigger, open, onDropdownClose, onMouseDown, header, footer, dropdownId, stretchTriggerHeight = false, stretchWidth = true, stretchHeight = false, stretchToTriggerWidth = true, expandToViewport = false, preferCenter = false, interior = false, minWidth, scrollable = true, loopFocus = expandToViewport, onFocus, onBlur, contentKey }) => {
  const wrapperRef = (0, import_react2.useRef)(null);
  const triggerRef = (0, import_react2.useRef)(null);
  const dropdownRef = (0, import_react2.useRef)(null);
  const dropdownContainerRef = (0, import_react2.useRef)(null);
  const verticalContainerRef = (0, import_react2.useRef)(null);
  const fixedPosition = (0, import_react2.useRef)(null);
  const isRefresh = useVisualRefresh();
  const dropdownClasses = usePortalModeClasses(triggerRef);
  const [position, setPosition] = (0, import_react2.useState)("bottom-right");
  const isMobile = useMobile();
  const setDropdownPosition = (position2, triggerBox, target, verticalContainer) => {
    const entireWidth = !interior && stretchWidth;
    if (!stretchWidth) {
      verticalContainer.style.maxHeight = `${parseInt(position2.height) + 1}px`;
    } else {
      verticalContainer.style.maxHeight = position2.height;
    }
    if (entireWidth && !expandToViewport) {
      if (stretchToTriggerWidth) {
        target.classList.add(styles_css_default["occupy-entire-width"]);
      }
    } else {
      target.style.width = position2.width;
    }
    if (position2.dropUp && !interior) {
      target.classList.add(styles_css_default["dropdown-drop-up"]);
      if (!expandToViewport) {
        target.style.bottom = "100%";
      }
    } else {
      target.classList.remove(styles_css_default["dropdown-drop-up"]);
    }
    target.classList.add(position2.dropLeft ? styles_css_default["dropdown-drop-left"] : styles_css_default["dropdown-drop-right"]);
    if (position2.left && position2.left !== "auto") {
      target.style.left = position2.left;
    }
    if (expandToViewport && !interior) {
      target.style.position = "fixed";
      if (position2.dropUp) {
        target.style.bottom = `calc(100% - ${triggerBox.top}px)`;
      } else {
        target.style.top = `${triggerBox.bottom}px`;
      }
      if (position2.dropLeft) {
        target.style.left = `calc(${triggerBox.right}px - ${position2.width})`;
      } else {
        target.style.left = `${triggerBox.left}px`;
      }
      fixedPosition.current = position2;
      return;
    }
    if (interior && isInteriorPosition(position2)) {
      if (position2.dropUp) {
        target.style.bottom = position2.bottom;
      } else {
        target.style.top = position2.top;
      }
      target.style.left = position2.left;
    }
    if (position2.dropUp && position2.dropLeft) {
      setPosition("top-left");
    } else if (position2.dropUp) {
      setPosition("top-right");
    } else if (position2.dropLeft) {
      setPosition("bottom-left");
    } else {
      setPosition("bottom-right");
    }
  };
  const isOutsideDropdown = (element) => (!wrapperRef.current || !wrapperRef.current.contains(element)) && (!dropdownContainerRef.current || !dropdownContainerRef.current.contains(element));
  const focusHandler = (event) => {
    if (!event.relatedTarget || isOutsideDropdown(event.relatedTarget)) {
      fireNonCancelableEvent(onFocus, event);
    }
  };
  const blurHandler = (event) => {
    if (!event.relatedTarget || isOutsideDropdown(event.relatedTarget)) {
      fireNonCancelableEvent(onBlur, event);
    }
  };
  (0, import_react2.useLayoutEffect)(() => {
    const onDropdownOpen = () => {
      if (open && dropdownRef.current && triggerRef.current && verticalContainerRef.current) {
        if (scrollable) {
          dropdownRef.current.classList.add(styles_css_default.nowrap);
        }
        setDropdownPosition(...calculatePosition(dropdownRef.current, triggerRef.current, verticalContainerRef.current, interior, expandToViewport, preferCenter, stretchWidth, stretchHeight, isMobile, minWidth), dropdownRef.current, verticalContainerRef.current);
        if (scrollable) {
          dropdownRef.current.classList.remove(styles_css_default.nowrap);
        }
      }
    };
    onDropdownOpen();
    if (open) {
      window.addEventListener("scroll", onDropdownOpen);
      const timeoutId = setTimeout(() => {
        window.removeEventListener("scroll", onDropdownOpen);
      }, 500);
      return () => {
        clearTimeout(timeoutId);
        window.removeEventListener("scroll", onDropdownOpen);
      };
    }
  }, [open, dropdownRef, triggerRef, verticalContainerRef, interior, stretchWidth, isMobile, contentKey]);
  (0, import_react2.useEffect)(() => {
    if (!open) {
      return;
    }
    const clickListener = (e) => {
      var _a, _b;
      if (!((_a = dropdownRef.current) === null || _a === void 0 ? void 0 : _a.contains(e.target)) && !((_b = triggerRef.current) === null || _b === void 0 ? void 0 : _b.contains(e.target))) {
        fireNonCancelableEvent(onDropdownClose);
      }
    };
    window.addEventListener("click", clickListener, true);
    return () => {
      window.removeEventListener("click", clickListener, true);
    };
  }, [open, onDropdownClose]);
  (0, import_react2.useLayoutEffect)(() => {
    if (!expandToViewport || !open) {
      return;
    }
    const updateDropdownPosition = () => {
      if (triggerRef.current && dropdownRef.current && verticalContainerRef.current) {
        const triggerRect = triggerRef.current.getBoundingClientRect();
        const target = dropdownRef.current;
        if (fixedPosition.current) {
          if (fixedPosition.current.dropUp) {
            dropdownRef.current.style.bottom = `calc(100% - ${triggerRect.top}px)`;
          } else {
            target.style.top = `${triggerRect.bottom}px`;
          }
          if (fixedPosition.current.dropLeft) {
            target.style.left = `calc(${triggerRect.right}px - ${fixedPosition.current.width})`;
          } else {
            target.style.left = `${triggerRect.left}px`;
          }
        }
      }
    };
    updateDropdownPosition();
    window.addEventListener("scroll", updateDropdownPosition, true);
    window.addEventListener("resize", updateDropdownPosition, true);
    return () => {
      window.removeEventListener("scroll", updateDropdownPosition, true);
      window.removeEventListener("resize", updateDropdownPosition, true);
    };
  }, [open, expandToViewport]);
  const referrerId = useUniqueId();
  return import_react2.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default.root, interior && styles_css_default.interior, stretchTriggerHeight && styles_css_default["stretch-trigger-height"]), ref: wrapperRef, onFocus: focusHandler, onBlur: blurHandler },
    import_react2.default.createElement("div", { id: referrerId, className: clsx_m_default(stretchTriggerHeight && styles_css_default["stretch-trigger-height"]), ref: triggerRef }, trigger),
    import_react2.default.createElement(TabTrap, { focusNextCallback: () => {
      var _a;
      return dropdownRef.current && ((_a = getFirstFocusable(dropdownRef.current)) === null || _a === void 0 ? void 0 : _a.focus());
    }, disabled: !open || !loopFocus }),
    import_react2.default.createElement(
      DropdownContainer,
      { renderWithPortal: expandToViewport && !interior, id: dropdownId, referrerId, open },
      import_react2.default.createElement(Transition, { in: open !== null && open !== void 0 ? open : false, exit: false }, (state, ref) => import_react2.default.createElement(
        "div",
        { ref: dropdownContainerRef },
        import_react2.default.createElement(TabTrap, { focusNextCallback: () => {
          var _a;
          return triggerRef.current && ((_a = getLastFocusable(triggerRef.current)) === null || _a === void 0 ? void 0 : _a.focus());
        }, disabled: !open || !loopFocus }),
        import_react2.default.createElement(TransitionContent, { state, transitionRef: ref, dropdownClasses, open, stretchWidth, interior, header, expandToViewport, footer, onMouseDown, isRefresh, dropdownRef, verticalContainerRef, position }, children),
        import_react2.default.createElement(TabTrap, { focusNextCallback: () => {
          var _a;
          return triggerRef.current && ((_a = getFirstFocusable(triggerRef.current)) === null || _a === void 0 ? void 0 : _a.focus());
        }, disabled: !open || !loopFocus })
      ))
    )
  );
};
var isInteriorPosition = (position) => position.bottom !== void 0;
var dropdown_default = Dropdown;

// node_modules/@cloudscape-design/components/button-dropdown/internal.js
var import_react17 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/button-dropdown/styles.scoped.css";
var styles_css_default2 = {
  "button-dropdown": "awsui_button-dropdown_sne0l_14ox4_93",
  "items-list-container": "awsui_items-list-container_sne0l_14ox4_97",
  "awsui-motion-fade-in-0": "awsui_awsui-motion-fade-in-0_sne0l_14ox4_1",
  "rotate-up": "awsui_rotate-up_sne0l_14ox4_114",
  "rotate-down": "awsui_rotate-down_sne0l_14ox4_129",
  "header": "awsui_header_sne0l_14ox4_144",
  "title": "awsui_title_sne0l_14ox4_153",
  "description": "awsui_description_sne0l_14ox4_154"
};

// node_modules/@cloudscape-design/components/button-dropdown/items-list.js
var import_react13 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/item-element/index.js
var import_react8 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/utils/utils.js
var isItemGroup = (item) => item && item.items !== void 0;
var isLinkItem = (item) => item && item.href !== void 0;
var getItemTarget = (item) => item.external ? "_blank" : void 0;
function indexIncludes(source, target) {
  for (let index = 0; index < source.length; index++) {
    if (source[index] !== target[index]) {
      return false;
    }
  }
  return true;
}
function indexEquals(left, right) {
  if (left.length !== right.length) {
    return false;
  }
  for (let index = 0; index < left.length; index++) {
    if (left[index] !== right[index]) {
      return false;
    }
  }
  return true;
}

// node_modules/@cloudscape-design/components/button-dropdown/item-element/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/button-dropdown/item-element/styles.scoped.css";
var styles_css_default3 = {
  "item-element": "awsui_item-element_93a1u_afloc_93",
  "disabled": "awsui_disabled_93a1u_afloc_103",
  "last": "awsui_last_93a1u_afloc_110",
  "highlighted": "awsui_highlighted_93a1u_afloc_113",
  "variant-icon": "awsui_variant-icon_93a1u_afloc_117",
  "variant-normal": "awsui_variant-normal_93a1u_afloc_117",
  "variant-primary": "awsui_variant-primary_93a1u_afloc_117",
  "is-focused": "awsui_is-focused_93a1u_afloc_127",
  "variant-navigation": "awsui_variant-navigation_93a1u_afloc_131",
  "first": "awsui_first_93a1u_afloc_134",
  "has-category-header": "awsui_has-category-header_93a1u_afloc_134",
  "menu-item": "awsui_menu-item_93a1u_afloc_148",
  "icon": "awsui_icon_93a1u_afloc_166",
  "external-icon": "awsui_external-icon_93a1u_afloc_171"
};

// node_modules/@cloudscape-design/components/button-dropdown/tooltip.js
var import_react6 = __toESM(require_react());

// node_modules/@cloudscape-design/components/popover/arrow.js
var import_react3 = __toESM(require_react());

// node_modules/@cloudscape-design/components/popover/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/popover/styles.scoped.css";
var styles_css_default4 = {
  "arrow": "awsui_arrow_xjuzf_4e9fa_185",
  "arrow-outer": "awsui_arrow-outer_xjuzf_4e9fa_189",
  "arrow-inner": "awsui_arrow-inner_xjuzf_4e9fa_189",
  "arrow-position-right-top": "awsui_arrow-position-right-top_xjuzf_4e9fa_220",
  "arrow-position-right-bottom": "awsui_arrow-position-right-bottom_xjuzf_4e9fa_220",
  "arrow-position-left-top": "awsui_arrow-position-left-top_xjuzf_4e9fa_223",
  "arrow-position-left-bottom": "awsui_arrow-position-left-bottom_xjuzf_4e9fa_223",
  "arrow-position-top-center": "awsui_arrow-position-top-center_xjuzf_4e9fa_226",
  "arrow-position-top-right": "awsui_arrow-position-top-right_xjuzf_4e9fa_226",
  "arrow-position-top-left": "awsui_arrow-position-top-left_xjuzf_4e9fa_226",
  "arrow-position-top-responsive": "awsui_arrow-position-top-responsive_xjuzf_4e9fa_226",
  "arrow-position-bottom-center": "awsui_arrow-position-bottom-center_xjuzf_4e9fa_229",
  "arrow-position-bottom-right": "awsui_arrow-position-bottom-right_xjuzf_4e9fa_229",
  "arrow-position-bottom-left": "awsui_arrow-position-bottom-left_xjuzf_4e9fa_229",
  "arrow-position-bottom-responsive": "awsui_arrow-position-bottom-responsive_xjuzf_4e9fa_229",
  "body": "awsui_body_xjuzf_4e9fa_325",
  "body-overflow-visible": "awsui_body-overflow-visible_xjuzf_4e9fa_341",
  "has-dismiss": "awsui_has-dismiss_xjuzf_4e9fa_345",
  "dismiss": "awsui_dismiss_xjuzf_4e9fa_350",
  "dismiss-control": "awsui_dismiss-control_xjuzf_4e9fa_357",
  "header-row": "awsui_header-row_xjuzf_4e9fa_361",
  "header": "awsui_header_xjuzf_4e9fa_361",
  "content": "awsui_content_xjuzf_4e9fa_387",
  "content-overflow-visible": "awsui_content-overflow-visible_xjuzf_4e9fa_395",
  "container": "awsui_container_xjuzf_4e9fa_491",
  "container-body": "awsui_container-body_xjuzf_4e9fa_499",
  "container-body-variant-annotation": "awsui_container-body-variant-annotation_xjuzf_4e9fa_516",
  "container-body-size-small": "awsui_container-body-size-small_xjuzf_4e9fa_521",
  "fixed-width": "awsui_fixed-width_xjuzf_4e9fa_524",
  "container-body-size-medium": "awsui_container-body-size-medium_xjuzf_4e9fa_528",
  "container-body-size-large": "awsui_container-body-size-large_xjuzf_4e9fa_535",
  "container-arrow": "awsui_container-arrow_xjuzf_4e9fa_547",
  "container-arrow-position-right-top": "awsui_container-arrow-position-right-top_xjuzf_4e9fa_551",
  "container-arrow-position-right-bottom": "awsui_container-arrow-position-right-bottom_xjuzf_4e9fa_551",
  "container-arrow-position-left-top": "awsui_container-arrow-position-left-top_xjuzf_4e9fa_563",
  "container-arrow-position-left-bottom": "awsui_container-arrow-position-left-bottom_xjuzf_4e9fa_563",
  "container-arrow-position-top-center": "awsui_container-arrow-position-top-center_xjuzf_4e9fa_575",
  "container-arrow-position-top-right": "awsui_container-arrow-position-top-right_xjuzf_4e9fa_575",
  "container-arrow-position-top-left": "awsui_container-arrow-position-top-left_xjuzf_4e9fa_575",
  "container-arrow-position-top-responsive": "awsui_container-arrow-position-top-responsive_xjuzf_4e9fa_575",
  "container-arrow-position-bottom-center": "awsui_container-arrow-position-bottom-center_xjuzf_4e9fa_591",
  "container-arrow-position-bottom-right": "awsui_container-arrow-position-bottom-right_xjuzf_4e9fa_595",
  "container-arrow-position-bottom-left": "awsui_container-arrow-position-bottom-left_xjuzf_4e9fa_599",
  "awsui-motion-fade-in": "awsui_awsui-motion-fade-in_xjuzf_4e9fa_1",
  "refresh": "awsui_refresh_xjuzf_4e9fa_717",
  "root": "awsui_root_xjuzf_4e9fa_739",
  "trigger": "awsui_trigger_xjuzf_4e9fa_753",
  "trigger-type-text": "awsui_trigger-type-text_xjuzf_4e9fa_760",
  "trigger-inner-text": "awsui_trigger-inner-text_xjuzf_4e9fa_789",
  "popover-content": "awsui_popover-content_xjuzf_4e9fa_793"
};

// node_modules/@cloudscape-design/components/popover/arrow.js
var Arrow = (props) => import_react3.default.createElement(
  "div",
  { className: clsx_m_default(styles_css_default4.arrow, props.position && styles_css_default4[`arrow-position-${props.position}`]) },
  import_react3.default.createElement("div", { className: styles_css_default4["arrow-outer"] }),
  import_react3.default.createElement("div", { className: styles_css_default4["arrow-inner"] })
);
var arrow_default = import_react3.default.memo(Arrow);

// node_modules/@cloudscape-design/components/popover/container.js
var import_react4 = __toESM(require_react());

// node_modules/@cloudscape-design/components/popover/utils/positions.js
var ARROW_OFFSET = 12;
var PRIORITY_MAPPING = {
  top: [
    "top-center",
    "top-right",
    "top-left",
    "bottom-center",
    "bottom-right",
    "bottom-left",
    "right-top",
    "right-bottom",
    "left-top",
    "left-bottom"
  ],
  bottom: [
    "bottom-center",
    "bottom-right",
    "bottom-left",
    "top-center",
    "top-right",
    "top-left",
    "right-top",
    "right-bottom",
    "left-top",
    "left-bottom"
  ],
  left: [
    "left-top",
    "left-bottom",
    "right-top",
    "right-bottom",
    "bottom-center",
    "top-center",
    "bottom-left",
    "top-left",
    "bottom-right",
    "top-right"
  ],
  right: [
    "right-top",
    "right-bottom",
    "left-top",
    "left-bottom",
    "bottom-center",
    "top-center",
    "bottom-right",
    "top-right",
    "bottom-left",
    "top-left"
  ]
};
var RECTANGLE_CALCULATIONS = {
  "top-center": ({ body, trigger, arrow }) => {
    return {
      top: trigger.top - body.height - arrow.height,
      left: trigger.left + trigger.width / 2 - body.width / 2,
      width: body.width,
      height: body.height
    };
  },
  "top-right": ({ body, trigger, arrow }) => {
    return {
      top: trigger.top - body.height - arrow.height,
      left: trigger.left,
      width: body.width,
      height: body.height
    };
  },
  "top-left": ({ body, trigger, arrow }) => {
    return {
      top: trigger.top - body.height - arrow.height,
      left: trigger.left + trigger.width - body.width,
      width: body.width,
      height: body.height
    };
  },
  "bottom-center": ({ body, trigger, arrow }) => {
    return {
      top: trigger.top + trigger.height + arrow.height,
      left: trigger.left + trigger.width / 2 - body.width / 2,
      width: body.width,
      height: body.height
    };
  },
  "bottom-right": ({ body, trigger, arrow }) => {
    return {
      top: trigger.top + trigger.height + arrow.height,
      left: trigger.left,
      width: body.width,
      height: body.height
    };
  },
  "bottom-left": ({ body, trigger, arrow }) => {
    return {
      top: trigger.top + trigger.height + arrow.height,
      left: trigger.left + trigger.width - body.width,
      width: body.width,
      height: body.height
    };
  },
  "right-top": ({ body, trigger, arrow }) => {
    return {
      top: trigger.top + trigger.height / 2 - ARROW_OFFSET - arrow.height,
      left: trigger.left + trigger.width + arrow.height,
      width: body.width,
      height: body.height
    };
  },
  "right-bottom": ({ body, trigger, arrow }) => {
    return {
      top: trigger.top + trigger.height / 2 - body.height + ARROW_OFFSET + arrow.height,
      left: trigger.left + trigger.width + arrow.height,
      width: body.width,
      height: body.height
    };
  },
  "left-top": ({ body, trigger, arrow }) => {
    return {
      top: trigger.top + trigger.height / 2 - ARROW_OFFSET - arrow.height,
      left: trigger.left - body.width - arrow.height,
      width: body.width,
      height: body.height
    };
  },
  "left-bottom": ({ body, trigger, arrow }) => {
    return {
      top: trigger.top + trigger.height / 2 - body.height + ARROW_OFFSET + arrow.height,
      left: trigger.left - body.width - arrow.height,
      width: body.width,
      height: body.height
    };
  }
};
function canRectFit(inner, outer) {
  return inner.left >= outer.left && inner.top >= outer.top && inner.left + inner.width <= outer.left + outer.width && inner.top + inner.height <= outer.top + outer.height;
}
function fitIntoContainer(inner, outer) {
  let { left, width, top, height } = inner;
  if (left < outer.left) {
    width = left + width - outer.left;
    left = outer.left;
  } else if (left + width > outer.left + outer.width) {
    width = outer.left + outer.width - left;
  }
  if (top < outer.top) {
    height = top + height - outer.top;
    top = outer.top;
  } else if (top + height > outer.top + outer.height) {
    height = outer.top + outer.height - top;
  }
  return { left, width, top, height };
}
function getLargestRect(rect1, rect2) {
  const area1 = rect1.height * rect1.width;
  const area2 = rect2.height * rect2.width;
  return area1 >= area2 ? rect1 : rect2;
}
function intersectRectangles(rectangles) {
  let boundingOffset = null;
  for (const currentRect of rectangles) {
    if (!boundingOffset) {
      boundingOffset = currentRect;
      continue;
    }
    const left = Math.max(boundingOffset.left, currentRect.left);
    const top = Math.max(boundingOffset.top, currentRect.top);
    const right = Math.min(boundingOffset.left + boundingOffset.width, currentRect.left + currentRect.width);
    const bottom = Math.min(boundingOffset.top + boundingOffset.height, currentRect.top + currentRect.height);
    if (right < left || bottom < top) {
      return null;
    }
    boundingOffset = {
      left,
      top,
      width: right - left,
      height: bottom - top
    };
  }
  return boundingOffset && boundingOffset.height * boundingOffset.width;
}
function calculatePosition2(preferred, trigger, arrow, body, container, viewport, renderWithPortal) {
  let bestPositionOutsideViewport = null;
  let largestArea = 0;
  for (const internalPosition2 of PRIORITY_MAPPING[preferred]) {
    const boundingOffset = RECTANGLE_CALCULATIONS[internalPosition2]({ body, trigger, arrow });
    const fitsInContainer = renderWithPortal || canRectFit(boundingOffset, container);
    const fitsInViewport = canRectFit(boundingOffset, viewport);
    if (fitsInContainer && fitsInViewport) {
      return { internalPosition: internalPosition2, boundingOffset };
    }
    const boundingRectangles = [boundingOffset, viewport];
    if (!renderWithPortal) {
      boundingRectangles.push(container);
    }
    const availableArea = intersectRectangles(boundingRectangles);
    if (availableArea && availableArea > largestArea) {
      bestPositionOutsideViewport = { internalPosition: internalPosition2, boundingOffset };
      largestArea = availableArea;
    }
  }
  const internalPosition = (bestPositionOutsideViewport === null || bestPositionOutsideViewport === void 0 ? void 0 : bestPositionOutsideViewport.internalPosition) || "right-top";
  const defaultOffset = RECTANGLE_CALCULATIONS[internalPosition]({ body, trigger, arrow });
  const optimisedOffset = fitIntoContainer(defaultOffset, renderWithPortal ? viewport : getLargestRect(container, viewport));
  const scrollable = optimisedOffset.height < defaultOffset.height;
  return { internalPosition, boundingOffset: optimisedOffset, scrollable };
}

// node_modules/@cloudscape-design/components/popover/container.js
var INITIAL_STYLES = { position: "absolute", top: -9999, left: -9999 };
function PopoverContainer({ position, trackRef, trackKey, arrow, children, zIndex, renderWithPortal, size, fixedWidth, variant }) {
  const bodyRef = (0, import_react4.useRef)(null);
  const contentRef = (0, import_react4.useRef)(null);
  const popoverRef = (0, import_react4.useRef)(null);
  const arrowRef = (0, import_react4.useRef)(null);
  const [popoverStyle, setPopoverStyle] = (0, import_react4.useState)(INITIAL_STYLES);
  const [internalPosition, setInternalPosition] = (0, import_react4.useState)(null);
  const isRefresh = useVisualRefresh();
  const positionHandlerRef = (0, import_react4.useRef)(() => {
  });
  const updatePositionHandler = (0, import_react4.useCallback)(() => {
    if (!trackRef.current || !popoverRef.current || !bodyRef.current || !contentRef.current || !arrowRef.current) {
      return;
    }
    const popover = popoverRef.current;
    const body = bodyRef.current;
    const arrow2 = arrowRef.current;
    const document2 = popover.ownerDocument;
    const track = trackRef.current;
    if (popover.offsetWidth === 0 || popover.offsetHeight === 0 || !nodeContains(document2.body, track)) {
      return;
    }
    const prevTop = popover.style.top;
    const prevLeft = popover.style.left;
    popover.style.top = "0";
    popover.style.left = "0";
    body.style.maxHeight = "";
    body.style.overflowX = "";
    body.style.overflowY = "";
    const viewportRect = getViewportRect(document2.defaultView);
    const trackRect = track.getBoundingClientRect();
    const arrowRect = {
      width: parseFloat(getComputedStyle(arrow2).width),
      height: parseFloat(getComputedStyle(arrow2).height)
    };
    const containingBlock = getContainingBlock(popover);
    const containingBlockRect = containingBlock ? containingBlock.getBoundingClientRect() : viewportRect;
    const bodyBorderWidth = getBorderWidth(body);
    const contentRect = contentRef.current.getBoundingClientRect();
    const contentBoundingBox = {
      width: contentRect.width + 2 * bodyBorderWidth,
      height: contentRect.height + 2 * bodyBorderWidth
    };
    const { scrollable, internalPosition: newInternalPosition, boundingOffset } = calculatePosition2(position, trackRect, arrowRect, contentBoundingBox, containingBlock ? containingBlockRect : getDocumentRect(document2), viewportRect, renderWithPortal);
    const popoverOffset = toRelativePosition(boundingOffset, containingBlockRect);
    const trackRelativeOffset = toRelativePosition(popoverOffset, toRelativePosition(trackRect, containingBlockRect));
    popover.style.top = prevTop;
    popover.style.left = prevLeft;
    if (scrollable) {
      body.style.maxHeight = boundingOffset.height + "px";
      body.style.overflowX = "hidden";
      body.style.overflowY = "auto";
    }
    setInternalPosition(newInternalPosition);
    setPopoverStyle({ top: popoverOffset.top, left: popoverOffset.left });
    positionHandlerRef.current = () => {
      const newTrackOffset = toRelativePosition(track.getBoundingClientRect(), containingBlock ? containingBlock.getBoundingClientRect() : viewportRect);
      setPopoverStyle({
        top: newTrackOffset.top + trackRelativeOffset.top,
        left: newTrackOffset.left + trackRelativeOffset.left
      });
    };
  }, [position, trackRef, renderWithPortal]);
  (0, import_react4.useLayoutEffect)(() => {
    updatePositionHandler();
  }, [updatePositionHandler, trackKey]);
  useResizeObserver(contentRef, () => updatePositionHandler());
  (0, import_react4.useLayoutEffect)(() => {
    const updatePosition = () => requestAnimationFrame(() => updatePositionHandler());
    const refreshPosition = () => requestAnimationFrame(() => positionHandlerRef.current());
    window.addEventListener("click", updatePosition);
    window.addEventListener("resize", updatePosition);
    window.addEventListener("scroll", refreshPosition, true);
    return () => {
      window.removeEventListener("click", updatePosition);
      window.removeEventListener("resize", updatePosition);
      window.removeEventListener("scroll", refreshPosition, true);
    };
  }, [updatePositionHandler]);
  return import_react4.default.createElement(
    "div",
    { ref: popoverRef, style: Object.assign(Object.assign({}, popoverStyle), { zIndex }), className: clsx_m_default(styles_css_default4.container, isRefresh && styles_css_default4.refresh) },
    import_react4.default.createElement("div", { ref: arrowRef, className: clsx_m_default(styles_css_default4[`container-arrow`], styles_css_default4[`container-arrow-position-${internalPosition}`]), "aria-hidden": true }, arrow(internalPosition)),
    import_react4.default.createElement(
      "div",
      { ref: bodyRef, className: clsx_m_default(styles_css_default4["container-body"], styles_css_default4[`container-body-size-${size}`], {
        [styles_css_default4["fixed-width"]]: fixedWidth,
        [styles_css_default4[`container-body-variant-${variant}`]]: variant
      }) },
      import_react4.default.createElement("div", { ref: contentRef }, children)
    )
  );
}
function getBorderWidth(element) {
  return parseInt(getComputedStyle(element).borderWidth) || 0;
}
function toRelativePosition(element, parent) {
  return {
    top: element.top - parent.top,
    left: element.left - parent.left
  };
}
function getViewportRect(window2) {
  return {
    top: 0,
    left: 0,
    width: window2.innerWidth,
    height: window2.innerHeight
  };
}
function getDocumentRect(document2) {
  const { top, left } = document2.documentElement.getBoundingClientRect();
  return {
    top,
    left,
    width: document2.documentElement.scrollWidth,
    height: document2.documentElement.scrollHeight
  };
}

// node_modules/@cloudscape-design/components/popover/body.js
var import_react5 = __toESM(require_react());
function PopoverBody({ dismissButton: showDismissButton, dismissAriaLabel, header, children, onDismiss, variant, overflowVisible, className, ariaLabelledby }) {
  const i18n = useInternalI18n("popover");
  const labelledById = useUniqueId("awsui-popover-");
  const dismissButtonFocused = (0, import_react5.useRef)(false);
  const dismissButtonRef = (0, import_react5.useRef)(null);
  const onKeyDown = (0, import_react5.useCallback)((event) => {
    if (event.keyCode === KeyCode.escape) {
      onDismiss();
    }
  }, [onDismiss]);
  (0, import_react5.useEffect)(() => {
    var _a;
    if (showDismissButton && !dismissButtonFocused.current) {
      (_a = dismissButtonRef.current) === null || _a === void 0 ? void 0 : _a.focus({ preventScroll: true });
    }
    dismissButtonFocused.current = showDismissButton;
  }, [showDismissButton]);
  const dismissButton = (showDismissButton !== null && showDismissButton !== void 0 ? showDismissButton : null) && import_react5.default.createElement(
    "div",
    { className: styles_css_default4.dismiss },
    import_react5.default.createElement(InternalButton, { variant: "icon", formAction: "none", iconName: "close", className: styles_css_default4["dismiss-control"], ariaLabel: i18n("dismissAriaLabel", dismissAriaLabel), onClick: () => onDismiss(), ref: dismissButtonRef })
  );
  const isDialog = showDismissButton;
  const shouldTrapFocus = showDismissButton && variant !== "annotation";
  const dialogProps = isDialog ? {
    role: "dialog",
    "aria-modal": shouldTrapFocus ? true : void 0,
    "aria-labelledby": ariaLabelledby !== null && ariaLabelledby !== void 0 ? ariaLabelledby : header ? labelledById : void 0
  } : {};
  return import_react5.default.createElement(
    "div",
    Object.assign({ className: clsx_m_default(styles_css_default4.body, className, {
      [styles_css_default4["body-overflow-visible"]]: overflowVisible === "both"
    }), onKeyDown }, dialogProps),
    import_react5.default.createElement(
      focus_lock_default,
      { disabled: !shouldTrapFocus, autoFocus: false },
      header && import_react5.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default4["header-row"], showDismissButton && styles_css_default4["has-dismiss"]) },
        dismissButton,
        import_react5.default.createElement(
          "div",
          { className: styles_css_default4.header, id: labelledById },
          import_react5.default.createElement("h2", null, header)
        )
      ),
      import_react5.default.createElement(
        "div",
        { className: !header && showDismissButton ? styles_css_default4["has-dismiss"] : void 0 },
        !header && dismissButton,
        import_react5.default.createElement("div", { className: clsx_m_default(styles_css_default4.content, { [styles_css_default4["content-overflow-visible"]]: !!overflowVisible }) }, children)
      )
    )
  );
}

// node_modules/@cloudscape-design/components/button-dropdown/tooltip.js
var DEFAULT_OPEN_TIMEOUT_IN_MS = 120;
function Tooltip({ children, content, position = "right" }) {
  const ref = (0, import_react6.useRef)(null);
  const isReducedMotion = useReducedMotion(ref);
  const { open, triggerProps } = useTooltipOpen(isReducedMotion ? 0 : DEFAULT_OPEN_TIMEOUT_IN_MS);
  const portalClasses = usePortalModeClasses(ref);
  return import_react6.default.createElement(
    "span",
    Object.assign({ ref }, triggerProps),
    children,
    open && import_react6.default.createElement(
      Portal,
      null,
      import_react6.default.createElement(
        "span",
        { className: portalClasses },
        import_react6.default.createElement(
          PopoverContainer,
          { size: "small", fixedWidth: false, position, trackRef: ref, arrow: (position2) => import_react6.default.createElement(arrow_default, { position: position2 }), renderWithPortal: true, zIndex: 7e3 },
          import_react6.default.createElement(
            PopoverBody,
            { dismissButton: false, dismissAriaLabel: void 0, header: null, onDismiss: () => {
            }, overflowVisible: "both" },
            import_react6.default.createElement("span", { "data-testid": "button-dropdown-disabled-reason", role: "tooltip" }, content)
          )
        )
      )
    )
  );
}
function useTooltipOpen(timeout) {
  const handle = (0, import_react6.useRef)();
  const [isOpen, setIsOpen] = (0, import_react6.useState)(false);
  const close = () => {
    clearTimeout(handle.current);
    setIsOpen(false);
  };
  const open = () => setIsOpen(true);
  const openDelayed = () => {
    handle.current = setTimeout(open, timeout);
  };
  const onKeyDown = (e) => {
    if (isOpen && isEscape(e.key)) {
      e.preventDefault();
      e.stopPropagation();
      close();
    }
  };
  const onFocus = openDelayed;
  const onBlur = close;
  return {
    open: isOpen,
    triggerProps: {
      onBlur,
      onFocus,
      onKeyDown
    }
  };
}
var isEscape = (key) => key === "Escape" || key === "Esc";

// node_modules/@cloudscape-design/components/button-dropdown/utils/use-hidden-description.js
var import_react7 = __toESM(require_react());
function useHiddenDescription(description) {
  const id = useUniqueId();
  return {
    targetProps: {
      "aria-describedby": description ? id : void 0
    },
    descriptionEl: description ? import_react7.default.createElement("span", { id, hidden: true }, description) : null
  };
}

// node_modules/@cloudscape-design/components/button-dropdown/utils/menu-item.js
var getMenuItemProps = ({ disabled, parent, expanded }) => ({
  role: "menuitem",
  "aria-disabled": disabled ? "true" : void 0,
  "aria-haspopup": parent ? "true" : void 0,
  "aria-expanded": expanded ? "true" : parent ? "false" : void 0
});

// node_modules/@cloudscape-design/components/button-dropdown/item-element/index.js
var ItemElement = ({ item, disabled, onItemActivate, highlighted, highlightItem, first = false, last, hasCategoryHeader, isKeyboardHighlighted = false, variant = "normal" }) => {
  const isLink = isLinkItem(item);
  const onClick = (event) => {
    event.stopPropagation();
    if (!isLink) {
      event.preventDefault();
    }
    if (!disabled) {
      onItemActivate(item, event);
    }
  };
  const onHover = (event) => {
    event.preventDefault();
    highlightItem(item);
  };
  return import_react8.default.createElement(
    "li",
    { className: clsx_m_default(styles_css_default3["item-element"], styles_css_default3[`variant-${variant}`], {
      [styles_css_default3.highlighted]: highlighted,
      [styles_css_default3.disabled]: disabled,
      [styles_css_default3.first]: first,
      [styles_css_default3.last]: last,
      [styles_css_default3["has-category-header"]]: hasCategoryHeader,
      [styles_css_default3["is-focused"]]: isKeyboardHighlighted
    }), role: "presentation", "data-testid": item.id, "data-description": item.description, onClick, onMouseEnter: onHover, onTouchStart: onHover },
    import_react8.default.createElement(MenuItem, { item, disabled, highlighted })
  );
};
function MenuItem({ item, disabled, highlighted }) {
  const menuItemRef = (0, import_react8.useRef)(null);
  (0, import_react8.useEffect)(() => {
    if (highlighted && menuItemRef.current) {
      menuItemRef.current.focus();
    }
  }, [highlighted]);
  const isDisabledWithReason = disabled && item.disabledReason;
  const { targetProps, descriptionEl } = useHiddenDescription(item.disabledReason);
  const menuItemProps = Object.assign(Object.assign({
    className: styles_css_default3["menu-item"],
    lang: item.lang,
    ref: menuItemRef,
    tabIndex: highlighted ? 0 : -1
  }, getMenuItemProps({ disabled })), isDisabledWithReason ? targetProps : {});
  const menuItem = isLinkItem(item) ? import_react8.default.createElement(
    "a",
    Object.assign({}, menuItemProps, { href: !disabled ? item.href : void 0, target: getItemTarget(item), rel: item.external ? "noopener noreferrer" : void 0 }),
    import_react8.default.createElement(MenuItemContent, { item, disabled })
  ) : import_react8.default.createElement(
    "span",
    Object.assign({}, menuItemProps),
    import_react8.default.createElement(MenuItemContent, { item, disabled })
  );
  const { position } = useDropdownContext();
  const tooltipPosition = position === "bottom-left" || position === "top-left" ? "left" : "right";
  return isDisabledWithReason ? import_react8.default.createElement(
    Tooltip,
    { content: item.disabledReason, position: tooltipPosition },
    menuItem,
    descriptionEl
  ) : menuItem;
}
var MenuItemContent = ({ item, disabled }) => {
  const hasIcon = !!(item.iconName || item.iconUrl || item.iconSvg);
  const hasExternal = isLinkItem(item) && item.external;
  return import_react8.default.createElement(
    import_react8.default.Fragment,
    null,
    hasIcon && import_react8.default.createElement(MenuItemIcon, { name: item.iconName, url: item.iconUrl, svg: item.iconSvg, alt: item.iconAlt }),
    " ",
    item.text,
    " ",
    hasExternal && import_react8.default.createElement(ExternalIcon, { disabled, ariaLabel: item.externalIconAriaLabel })
  );
};
var MenuItemIcon = (props) => import_react8.default.createElement(
  "span",
  { className: styles_css_default3.icon },
  import_react8.default.createElement(internal_default, Object.assign({}, props))
);
var ExternalIcon = ({ disabled, ariaLabel }) => {
  const icon = import_react8.default.createElement(internal_default, { variant: disabled ? "disabled" : "normal", name: "external" });
  return import_react8.default.createElement("span", { className: styles_css_default3["external-icon"], role: ariaLabel ? "img" : void 0, "aria-label": ariaLabel }, icon);
};
var item_element_default = ItemElement;

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/expandable-category-element.js
var import_react9 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/button-dropdown/category-elements/styles.scoped.css";
var styles_css_default5 = {
  "header": "awsui_header_16mm3_3iz83_93",
  "disabled": "awsui_disabled_16mm3_3iz83_108",
  "expandable-header": "awsui_expandable-header_16mm3_3iz83_112",
  "rolled-down": "awsui_rolled-down_16mm3_3iz83_123",
  "highlighted": "awsui_highlighted_16mm3_3iz83_126",
  "is-focused": "awsui_is-focused_16mm3_3iz83_139",
  "variant-navigation": "awsui_variant-navigation_16mm3_3iz83_143",
  "category": "awsui_category_16mm3_3iz83_155",
  "expandable": "awsui_expandable_16mm3_3iz83_112",
  "expand-icon": "awsui_expand-icon_16mm3_3iz83_176",
  "expand-icon-up": "awsui_expand-icon-up_16mm3_3iz83_183",
  "expand-icon-right": "awsui_expand-icon-right_16mm3_3iz83_186",
  "items-list-container": "awsui_items-list-container_16mm3_3iz83_200"
};

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/expandable-category-element.js
var ExpandableCategoryElement = ({ item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, highlightItem, disabled, expandToViewport, variant }) => {
  const highlighted = isHighlighted(item);
  const expanded = isExpanded(item);
  const isKeyboardHighlighted = isKeyboardHighlight(item);
  const triggerRef = import_react9.default.useRef(null);
  const ref = (0, import_react9.useRef)(null);
  (0, import_react9.useEffect)(() => {
    if (triggerRef.current && highlighted && !expanded) {
      triggerRef.current.focus();
    }
  }, [expanded, highlighted]);
  const onClick = (event) => {
    var _a;
    if (!disabled) {
      event.preventDefault();
      onGroupToggle(item, event);
      (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    }
  };
  const onHover = (event) => {
    event.preventDefault();
    highlightItem(item);
  };
  const isDisabledWithReason = !!item.disabledReason && item.disabled;
  const { targetProps, descriptionEl } = useHiddenDescription(item.disabledReason);
  const trigger = item.text && import_react9.default.createElement(
    "span",
    Object.assign({
      className: clsx_m_default(styles_css_default5.header, styles_css_default5["expandable-header"], styles_css_default5[`variant-${variant}`], {
        [styles_css_default5.disabled]: disabled,
        [styles_css_default5.highlighted]: highlighted,
        [styles_css_default5["is-focused"]]: isKeyboardHighlighted
      }),
      tabIndex: highlighted ? 0 : -1,
      ref: triggerRef
    }, getMenuItemProps({ parent: true, expanded, disabled }), isDisabledWithReason ? targetProps : {}),
    item.text,
    import_react9.default.createElement(
      "span",
      { className: clsx_m_default(styles_css_default5["expand-icon"], styles_css_default5["expand-icon-right"]) },
      import_react9.default.createElement(internal_default, { name: "caret-down-filled" })
    )
  );
  let content;
  if (isDisabledWithReason) {
    content = import_react9.default.createElement(
      Tooltip,
      { content: item.disabledReason },
      trigger,
      descriptionEl
    );
  } else if (disabled) {
    content = trigger;
  } else {
    content = import_react9.default.createElement(dropdown_default, { open: expanded, stretchWidth: false, interior: true, expandToViewport, trigger }, item.items && expanded && import_react9.default.createElement(
      "ul",
      { role: "menu", "aria-label": item.text, className: clsx_m_default(styles_css_default5["items-list-container"]) },
      import_react9.default.createElement(ItemsList, { items: item.items, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, highlightItem, variant })
    ));
  }
  return import_react9.default.createElement("li", { className: clsx_m_default(styles_css_default5.category, styles_css_default5[`variant-${variant}`], styles_css_default5.expandable, {
    [styles_css_default5.expanded]: expanded,
    [styles_css_default5.disabled]: disabled,
    [styles_css_default5.highlighted]: highlighted
  }), role: "presentation", "data-testid": item.id, ref, onClick, onMouseEnter: onHover, onTouchStart: onHover }, content);
};
var expandable_category_element_default = ExpandableCategoryElement;

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/category-element.js
var import_react10 = __toESM(require_react());
var CategoryElement = ({ item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, highlightItem, disabled, variant }) => {
  return import_react10.default.createElement(
    "li",
    { className: clsx_m_default(styles_css_default5.category, styles_css_default5[`variant-${variant}`], disabled && styles_css_default5.disabled), role: "presentation", "aria-disabled": disabled ? "true" : void 0 },
    item.text && import_react10.default.createElement("p", { className: clsx_m_default(styles_css_default5.header, { [styles_css_default5.disabled]: disabled }), "aria-hidden": "true" }, item.text),
    import_react10.default.createElement("ul", { className: clsx_m_default(styles_css_default5["items-list-container"]), role: "group", "aria-label": item.text }, item.items && import_react10.default.createElement(ItemsList, { items: item.items, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, highlightItem, categoryDisabled: disabled, hasCategoryHeader: !!item.text, variant }))
  );
};
var category_element_default = CategoryElement;

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/mobile-expandable-category-element.js
var import_react12 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/mobile-expandable-group/mobile-expandable-group.js
var import_react11 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/mobile-expandable-group/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/button-dropdown/mobile-expandable-group/styles.scoped.css";
var styles_css_default6 = {
  "root": "awsui_root_14cnr_c6muv_93",
  "trigger": "awsui_trigger_14cnr_c6muv_108",
  "dropdown": "awsui_dropdown_14cnr_c6muv_111",
  "nowrap": "awsui_nowrap_14cnr_c6muv_122",
  "open": "awsui_open_14cnr_c6muv_125"
};

// node_modules/@cloudscape-design/components/button-dropdown/mobile-expandable-group/mobile-expandable-group.js
var MobileExpandableGroup = ({ children, trigger, open }) => {
  return import_react11.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default6.root) },
    import_react11.default.createElement("div", { className: styles_css_default6.trigger }, trigger),
    import_react11.default.createElement("div", { className: clsx_m_default(styles_css_default6.dropdown, { [styles_css_default6.open]: open }), "data-open": open }, children)
  );
};
var mobile_expandable_group_default = MobileExpandableGroup;

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/mobile-expandable-category-element.js
var MobileExpandableCategoryElement = ({ item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, highlightItem, disabled, variant }) => {
  const highlighted = isHighlighted(item);
  const expanded = isExpanded(item);
  const isKeyboardHighlighted = isKeyboardHighlight(item);
  const triggerRef = import_react12.default.useRef(null);
  (0, import_react12.useEffect)(() => {
    if (triggerRef.current && highlighted && !expanded) {
      triggerRef.current.focus();
    }
  }, [expanded, highlighted]);
  const onClick = (e) => {
    if (!disabled) {
      e.preventDefault();
      onGroupToggle(item, e);
    }
  };
  const onHover = (event) => {
    event.preventDefault();
    highlightItem(item);
  };
  const isDisabledWithReason = !!item.disabledReason && item.disabled;
  const { targetProps, descriptionEl } = useHiddenDescription(item.disabledReason);
  const trigger = item.text && import_react12.default.createElement(
    "span",
    Object.assign({
      className: clsx_m_default(styles_css_default5.header, styles_css_default5["expandable-header"], styles_css_default5[`variant-${variant}`], {
        [styles_css_default5.highlighted]: highlighted,
        [styles_css_default5["rolled-down"]]: expanded,
        [styles_css_default5.disabled]: disabled,
        [styles_css_default5["is-focused"]]: isKeyboardHighlighted
      }),
      tabIndex: highlighted ? 0 : -1,
      ref: triggerRef
    }, getMenuItemProps({ parent: true, disabled, expanded }), isDisabledWithReason ? targetProps : {}),
    item.text,
    import_react12.default.createElement(
      "span",
      { className: clsx_m_default(styles_css_default5["expand-icon"], {
        [styles_css_default5["expand-icon-up"]]: expanded
      }) },
      import_react12.default.createElement(internal_default, { name: "caret-down-filled" })
    )
  );
  let content;
  if (isDisabledWithReason) {
    content = import_react12.default.createElement(
      import_react12.default.Fragment,
      null,
      descriptionEl,
      import_react12.default.createElement(Tooltip, { content: item.disabledReason }, trigger)
    );
  } else if (disabled) {
    content = trigger;
  } else {
    content = import_react12.default.createElement(mobile_expandable_group_default, { open: expanded, trigger }, item.items && expanded && import_react12.default.createElement(
      "ul",
      { role: "menu", "aria-label": item.text, className: clsx_m_default(styles_css_default5["items-list-container"]) },
      import_react12.default.createElement(ItemsList, { items: item.items, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, highlightItem, hasCategoryHeader: true, variant })
    ));
  }
  return import_react12.default.createElement("li", { className: clsx_m_default(styles_css_default5.category, styles_css_default5[`variant-${variant}`], styles_css_default5.expandable, {
    [styles_css_default5.expanded]: expanded,
    [styles_css_default5.disabled]: disabled,
    [styles_css_default5.highlighted]: highlighted || expanded,
    [styles_css_default5.expandable]: true
  }), role: "presentation", onClick, onMouseEnter: onHover, onTouchStart: onHover, "data-testid": item.id }, content);
};
var mobile_expandable_category_element_default = MobileExpandableCategoryElement;

// node_modules/@cloudscape-design/components/button-dropdown/items-list.js
function ItemsList({ items, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, highlightItem, categoryDisabled = false, hasExpandableGroups = false, hasCategoryHeader = false, expandToViewport = false, variant = "normal" }) {
  const isMobile = useMobile();
  const elements = items.map((item, index) => {
    var _a, _b, _c, _d;
    if (!isItemGroup(item)) {
      return import_react13.default.createElement(item_element_default, { key: index, item, onItemActivate, disabled: (_a = item.disabled) !== null && _a !== void 0 ? _a : categoryDisabled, highlighted: isHighlighted(item), isKeyboardHighlighted: isKeyboardHighlight(item), highlightItem, first: index === 0 || isItemGroup(items[index - 1]), last: index === items.length - 1 || isItemGroup(items[index + 1]), hasCategoryHeader, variant });
    }
    if (hasExpandableGroups) {
      return item.text ? isMobile ? import_react13.default.createElement(mobile_expandable_category_element_default, { key: index, item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, highlightItem, disabled: (_b = item.disabled) !== null && _b !== void 0 ? _b : false, variant }) : import_react13.default.createElement(expandable_category_element_default, { key: index, item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, highlightItem, disabled: (_c = item.disabled) !== null && _c !== void 0 ? _c : false, expandToViewport, variant }) : null;
    }
    return import_react13.default.createElement(category_element_default, { key: index, item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, highlightItem, disabled: (_d = item.disabled) !== null && _d !== void 0 ? _d : false, variant });
  });
  return import_react13.default.createElement(import_react13.default.Fragment, null, elements);
}

// node_modules/@cloudscape-design/components/internal/components/options-list/utils/use-open-state.js
var import_react14 = __toESM(require_react());
var useOpenState = ({ onOpen, onClose }) => {
  const [isOpen, setIsOpen] = (0, import_react14.useState)(false);
  const openDropdown = () => {
    if (!isOpen) {
      setIsOpen(true);
      onOpen === null || onOpen === void 0 ? void 0 : onOpen();
    }
  };
  const closeDropdown = () => {
    if (isOpen) {
      setIsOpen(false);
      onClose === null || onClose === void 0 ? void 0 : onClose();
    }
  };
  const toggleDropdown = () => {
    if (isOpen) {
      closeDropdown();
    } else {
      openDropdown();
    }
  };
  return { isOpen, openDropdown, closeDropdown, toggleDropdown };
};

// node_modules/@cloudscape-design/components/button-dropdown/utils/use-highlighted-menu.js
var import_react15 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/utils/create-items-tree.js
function createItemsTree(items) {
  const itemToIndex = /* @__PURE__ */ new Map();
  const indexToItem = /* @__PURE__ */ new Map();
  const flatIndices = [];
  traverseItems(items, (item, index) => {
    const indexKey = stringifyIndex(index);
    itemToIndex.set(item, indexKey);
    indexToItem.set(indexKey, item);
    flatIndices.push(indexKey);
  });
  return {
    getItem: (index) => {
      const indexKey = stringifyIndex(index);
      return indexToItem.get(indexKey) || null;
    },
    getItemIndex: (item) => {
      const indexKey = itemToIndex.get(item);
      if (!indexKey) {
        throw new Error("Invariant violation: item is not found.");
      }
      return parseIndex(indexKey);
    },
    getSequentialIndex: (index, direction) => {
      const indexKey = stringifyIndex(index);
      const position = flatIndices.indexOf(indexKey);
      const nextIndexKey = flatIndices[position + direction];
      if (!nextIndexKey) {
        return null;
      }
      return parseIndex(nextIndexKey);
    },
    getParentIndex: (item) => {
      const indexKey = itemToIndex.get(item);
      if (!indexKey) {
        throw new Error("Invariant violation: item is not found.");
      }
      const index = parseIndex(indexKey);
      if (index.length === 1) {
        return null;
      }
      return index.slice(0, index.length - 1);
    }
  };
}
function traverseItems(items, act, parentIndex = []) {
  items.forEach((item, index) => {
    const itemIndex = [...parentIndex, index];
    act(item, itemIndex);
    if (isItemGroup(item)) {
      traverseItems(item.items, act, itemIndex);
    }
  });
}
function stringifyIndex(index) {
  return index.join("-");
}
function parseIndex(index) {
  return index.split("-").map((it) => parseInt(it));
}

// node_modules/@cloudscape-design/components/button-dropdown/utils/move-highlight.js
function moveHighlight({ startIndex, expandedIndex, getNext, hasExpandableGroups, isInRestrictedView }) {
  const tryMove = (currentIndex) => {
    var _a;
    const next = getNext(currentIndex);
    if (!next) {
      return null;
    }
    if (((_a = next.parent) === null || _a === void 0 ? void 0 : _a.disabled) && hasExpandableGroups) {
      return tryMove(next.index);
    }
    if (isItemGroup(next.item) && !hasExpandableGroups) {
      return tryMove(next.index);
    }
    if (hasExpandableGroups && !isInRestrictedView && !isSameParent(startIndex, next.index)) {
      return tryMove(next.index);
    }
    if (hasExpandableGroups && isInRestrictedView && !isSameLevel(next.index, expandedIndex) && !isIncluded(expandedIndex, next.index)) {
      return tryMove(next.index);
    }
    return next.index;
  };
  return tryMove(startIndex);
}
function isSameParent(left, right) {
  return indexEquals(left.slice(0, -1), right.slice(0, -1));
}
function isSameLevel(left, right) {
  return left.length === right.length;
}
function isIncluded(parent, child) {
  return indexEquals(parent, child.slice(0, -1));
}

// node_modules/@cloudscape-design/components/button-dropdown/utils/use-highlighted-menu.js
function useHighlightedMenu({ items, hasExpandableGroups, isInRestrictedView = false }) {
  const [targetIndex, setTargetIndex] = (0, import_react15.useState)([]);
  const [expandedIndex, setExpandedIndex] = (0, import_react15.useState)([]);
  const [isUsingMouse, setIsUsingMouse] = (0, import_react15.useState)(true);
  const { getItem, getItemIndex: getItemIndex2, getSequentialIndex, getParentIndex } = (0, import_react15.useMemo)(() => createItemsTree(items), [items]);
  const targetItem = (0, import_react15.useMemo)(() => getItem(targetIndex), [targetIndex, getItem]);
  const isHighlighted = (0, import_react15.useCallback)((item) => {
    const index = getItemIndex2(item);
    return indexIncludes(index, targetIndex);
  }, [targetIndex, getItemIndex2]);
  const isKeyboardHighlight = (0, import_react15.useCallback)((item) => {
    const index = getItemIndex2(item);
    return !isUsingMouse && indexEquals(index, targetIndex);
  }, [targetIndex, getItemIndex2, isUsingMouse]);
  const isExpanded = (0, import_react15.useCallback)((group) => {
    const index = getItemIndex2(group);
    return indexIncludes(index, expandedIndex);
  }, [expandedIndex, getItemIndex2]);
  const moveHighlight2 = (0, import_react15.useCallback)((direction) => {
    const getNext = (index) => {
      const nextIndex2 = getSequentialIndex(index, direction);
      const item = getItem(nextIndex2 || [-1]);
      if (!nextIndex2 || !item) {
        return null;
      }
      const parentIndex = getParentIndex(item);
      const parentItem = parentIndex && getItem(parentIndex);
      return { index: nextIndex2, item, parent: parentItem || void 0 };
    };
    const nextIndex = moveHighlight({
      startIndex: targetIndex,
      expandedIndex,
      getNext,
      hasExpandableGroups,
      isInRestrictedView
    });
    if (nextIndex) {
      setTargetIndex(nextIndex);
    }
  }, [targetIndex, expandedIndex, getItem, getSequentialIndex, getParentIndex, hasExpandableGroups, isInRestrictedView]);
  const highlightItem = (0, import_react15.useCallback)((item) => {
    setTargetIndex(getItemIndex2(item));
  }, [getItemIndex2]);
  const expandGroup = (0, import_react15.useCallback)((group) => {
    const groupIndex = group ? getItemIndex2(group) : targetIndex;
    const firstChildIndex = [...groupIndex, 0];
    setTargetIndex(isInRestrictedView ? groupIndex : firstChildIndex);
    setExpandedIndex(groupIndex);
  }, [targetIndex, getItemIndex2, isInRestrictedView]);
  const collapseGroup = (0, import_react15.useCallback)(() => {
    if (expandedIndex.length > 0) {
      setTargetIndex(expandedIndex);
      setExpandedIndex(expandedIndex.slice(0, -1));
    }
  }, [expandedIndex]);
  const reset = (0, import_react15.useCallback)(() => {
    setTargetIndex([]);
    setExpandedIndex([]);
  }, []);
  return {
    targetItem,
    isHighlighted,
    isKeyboardHighlight,
    isExpanded,
    moveHighlight: moveHighlight2,
    highlightItem,
    expandGroup,
    collapseGroup,
    reset,
    setIsUsingMouse
  };
}

// node_modules/@cloudscape-design/components/button-dropdown/utils/use-button-dropdown.js
function useButtonDropdown({ items, onItemClick, onItemFollow, onReturnFocus, hasExpandableGroups, isInRestrictedView = false, expandToViewport = false }) {
  const { targetItem, isHighlighted, isKeyboardHighlight, isExpanded, highlightItem, moveHighlight: moveHighlight2, expandGroup, collapseGroup, reset, setIsUsingMouse } = useHighlightedMenu({
    items,
    hasExpandableGroups,
    isInRestrictedView
  });
  const _a = useOpenState({ onClose: reset }), { isOpen, closeDropdown } = _a, openStateProps = __rest(_a, ["isOpen", "closeDropdown"]);
  const toggleDropdown = (options = {}) => {
    var _a2;
    const moveHighlightOnOpen = (_a2 = options.moveHighlightOnOpen) !== null && _a2 !== void 0 ? _a2 : true;
    if (!isOpen && moveHighlightOnOpen) {
      moveHighlight2(1);
    }
    openStateProps.toggleDropdown();
  };
  const onGroupToggle = (item) => !isExpanded(item) ? expandGroup(item) : collapseGroup();
  const onItemActivate = (item, event) => {
    const details = {
      id: item.id || "undefined",
      href: item.href,
      external: item.external,
      target: getItemTarget(item)
    };
    if (onItemFollow && item.href && isPlainLeftClick(event)) {
      fireCancelableEvent(onItemFollow, details, event);
    }
    if (onItemClick) {
      fireCancelableEvent(onItemClick, details, event);
    }
    onReturnFocus();
    closeDropdown();
  };
  const doVerticalNavigation = (direction) => {
    if (isOpen) {
      moveHighlight2(direction);
    }
  };
  const openAndSelectFirst = (event) => {
    toggleDropdown();
    event.preventDefault();
  };
  const actOnParentDropdown = (event) => {
    if (!targetItem) {
      if (isOpen && !isInRestrictedView) {
        toggleDropdown();
      } else {
        openAndSelectFirst(event);
      }
    } else {
      if (isItemGroup(targetItem)) {
        onGroupToggle(targetItem, event);
      } else {
        onItemActivate(targetItem, event);
      }
    }
  };
  const activate = (event, isEnter) => {
    setIsUsingMouse(false);
    if (targetItem && isLinkItem(targetItem) && isEnter) {
      return;
    }
    event.preventDefault();
    actOnParentDropdown(event);
  };
  const onKeyDown = (event) => {
    setIsUsingMouse(false);
    switch (event.keyCode) {
      case KeyCode.down: {
        doVerticalNavigation(1);
        event.preventDefault();
        break;
      }
      case KeyCode.up: {
        doVerticalNavigation(-1);
        event.preventDefault();
        break;
      }
      case KeyCode.space: {
        event.preventDefault();
        break;
      }
      case KeyCode.enter: {
        if (!(targetItem === null || targetItem === void 0 ? void 0 : targetItem.disabled)) {
          activate(event, true);
        }
        break;
      }
      case KeyCode.left:
      case KeyCode.right: {
        if (targetItem && !targetItem.disabled && isItemGroup(targetItem) && !isExpanded(targetItem)) {
          expandGroup();
        } else if (hasExpandableGroups) {
          collapseGroup();
        }
        event.preventDefault();
        break;
      }
      case KeyCode.escape: {
        onReturnFocus();
        closeDropdown();
        event.preventDefault();
        break;
      }
      case KeyCode.tab: {
        if (expandToViewport) {
          onReturnFocus();
        }
        closeDropdown();
        break;
      }
    }
  };
  const onKeyUp = (event) => {
    if (event.keyCode === KeyCode.space && !(targetItem === null || targetItem === void 0 ? void 0 : targetItem.disabled)) {
      activate(event);
    }
  };
  return {
    isOpen,
    targetItem,
    isHighlighted,
    isKeyboardHighlight,
    isExpanded,
    highlightItem,
    onKeyDown,
    onKeyUp,
    onItemActivate,
    onGroupToggle,
    toggleDropdown,
    setIsUsingMouse
  };
}

// node_modules/@cloudscape-design/components/internal/components/options-list/index.js
var import_react16 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/options-list/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/internal/components/options-list/styles.scoped.css";
var styles_css_default7 = {
  "options-list": "awsui_options-list_19gcf_4c10m_93",
  "decrease-top-margin": "awsui_decrease-top-margin_19gcf_4c10m_115"
};

// node_modules/@cloudscape-design/components/internal/components/options-list/index.js
var BOTTOM_TRIGGER_OFFSET = 80;
var getItemIndex = (containerRef, event) => {
  const target = findUpUntil(event.target, (element) => element === containerRef.current || !!element.dataset.mouseTarget);
  const mouseTarget = target === null || target === void 0 ? void 0 : target.dataset.mouseTarget;
  return mouseTarget ? parseInt(mouseTarget) : -1;
};
var OptionsList = (_a, ref) => {
  var { open, statusType, children, nativeAttributes = {}, onKeyDown, onBlur, onFocus, onLoadMore, onMouseUp, onMouseMove, position = "relative", role = "listbox", decreaseTopMargin = false, ariaLabelledby, ariaDescribedby } = _a, restProps = __rest(_a, ["open", "statusType", "children", "nativeAttributes", "onKeyDown", "onBlur", "onFocus", "onLoadMore", "onMouseUp", "onMouseMove", "position", "role", "decreaseTopMargin", "ariaLabelledby", "ariaDescribedby"]);
  const baseProps = getBaseProps(restProps);
  const menuRef = (0, import_react16.useRef)(null);
  const handleScroll = useStableEventHandler(() => {
    const scrollContainer = menuRef === null || menuRef === void 0 ? void 0 : menuRef.current;
    if (scrollContainer) {
      const bottomEdgePosition = scrollContainer.scrollTop + scrollContainer.clientHeight;
      const remainingScrollHeight = scrollContainer.scrollHeight - bottomEdgePosition;
      if (remainingScrollHeight < BOTTOM_TRIGGER_OFFSET) {
        fireNonCancelableEvent(onLoadMore);
      }
    }
  });
  (0, import_react16.useEffect)(() => {
    if (open && statusType === "pending") {
      handleScroll();
    }
  }, [open, statusType, handleScroll]);
  const className = clsx_m_default(styles_css_default7["options-list"], {
    [styles_css_default7["decrease-top-margin"]]: decreaseTopMargin
  });
  const mergedRef = useMergeRefs(ref, menuRef);
  return import_react16.default.createElement("ul", Object.assign({}, baseProps, nativeAttributes, { className, ref: mergedRef, style: { position }, role, onScroll: handleScroll, onKeyDown: (event) => onKeyDown && fireKeyboardEvent(onKeyDown, event), onMouseMove: (event) => onMouseMove === null || onMouseMove === void 0 ? void 0 : onMouseMove(getItemIndex(menuRef, event)), onMouseUp: (event) => onMouseUp === null || onMouseUp === void 0 ? void 0 : onMouseUp(getItemIndex(menuRef, event)), onBlur: (event) => fireNonCancelableEvent(onBlur, { relatedTarget: event.relatedTarget }), onFocus: () => fireNonCancelableEvent(onFocus), tabIndex: -1, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby }), open && children);
};
var options_list_default = import_react16.default.forwardRef(OptionsList);

// node_modules/@cloudscape-design/components/button-dropdown/internal.js
var InternalButtonDropdown = import_react17.default.forwardRef((_a, ref) => {
  var { items, variant = "normal", loading = false, loadingText, disabled = false, expandableGroups = false, children, onItemClick, onItemFollow, customTriggerBuilder, expandToViewport, ariaLabel, title, description, preferCenter, __internalRootRef } = _a, props = __rest(_a, ["items", "variant", "loading", "loadingText", "disabled", "expandableGroups", "children", "onItemClick", "onItemFollow", "customTriggerBuilder", "expandToViewport", "ariaLabel", "title", "description", "preferCenter", "__internalRootRef"]);
  const isInRestrictedView = useMobile();
  const dropdownId = useUniqueId("dropdown");
  for (const item of items) {
    checkSafeUrl("ButtonDropdown", item.href);
  }
  const { isOpen, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, highlightItem, onKeyDown, onKeyUp, onItemActivate, onGroupToggle, toggleDropdown, setIsUsingMouse } = useButtonDropdown({
    items,
    onItemClick,
    onItemFollow,
    onReturnFocus: () => {
      var _a2;
      return (_a2 = dropdownRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    },
    expandToViewport,
    hasExpandableGroups: expandableGroups,
    isInRestrictedView
  });
  const handleMouseEvent = () => {
    setIsUsingMouse(true);
  };
  const baseProps = getBaseProps(props);
  const dropdownRef = (0, import_react17.useRef)(null);
  useForwardFocus(ref, dropdownRef);
  const clickHandler = () => {
    if (!loading && !disabled) {
      toggleDropdown({ moveHighlightOnOpen: !isInRestrictedView });
    }
  };
  const canBeOpened = !loading && !disabled;
  const triggerVariant = variant === "navigation" ? void 0 : variant === "inline-icon" ? "inline-icon" : variant;
  const iconProps = variant === "icon" || variant === "inline-icon" ? {
    iconName: "ellipsis"
  } : {
    iconName: "caret-down-filled",
    iconAlign: "right",
    __iconClass: canBeOpened && isOpen ? styles_css_default2["rotate-up"] : styles_css_default2["rotate-down"]
  };
  const trigger = customTriggerBuilder ? customTriggerBuilder(clickHandler, dropdownRef, disabled, isOpen, ariaLabel) : import_react17.default.createElement(InternalButton, Object.assign({ ref: dropdownRef }, iconProps, { variant: triggerVariant, loading, loadingText, disabled, onClick: (event) => {
    event.preventDefault();
    clickHandler();
  }, ariaLabel, "aria-haspopup": true, ariaExpanded: canBeOpened && isOpen, formAction: "none" }), children);
  const hasHeader = title || description;
  const headerId = useUniqueId("awsui-button-dropdown__header");
  const { loadingButtonCount } = useFunnel();
  (0, import_react17.useEffect)(() => {
    if (loading) {
      loadingButtonCount.current++;
      return () => {
        loadingButtonCount.current--;
      };
    }
  }, [loading, loadingButtonCount]);
  return import_react17.default.createElement(
    "div",
    Object.assign({}, baseProps, { onKeyDown, onKeyUp, onMouseDown: handleMouseEvent, onMouseMove: handleMouseEvent, className: clsx_m_default(styles_css_default2["button-dropdown"], styles_css_default2[`variant-${variant}`], baseProps.className), "aria-owns": expandToViewport && isOpen ? dropdownId : void 0, ref: __internalRootRef }),
    import_react17.default.createElement(
      dropdown_default,
      { open: canBeOpened && isOpen, stretchWidth: false, stretchTriggerHeight: variant === "navigation", expandToViewport, preferCenter, onDropdownClose: () => toggleDropdown(), trigger, dropdownId },
      hasHeader && import_react17.default.createElement(
        "div",
        { className: styles_css_default2.header, id: headerId },
        title && import_react17.default.createElement(
          "div",
          { className: styles_css_default2.title },
          import_react17.default.createElement(InternalBox, { fontSize: "heading-s", fontWeight: "bold", color: "inherit", tagOverride: "h2", margin: { vertical: "n", horizontal: "n" } }, title)
        ),
        description && import_react17.default.createElement(
          InternalBox,
          { fontSize: "body-s" },
          import_react17.default.createElement("span", { className: styles_css_default2.description }, description)
        )
      ),
      import_react17.default.createElement(
        options_list_default,
        { open: canBeOpened && isOpen, position: "static", role: "menu", decreaseTopMargin: true, ariaLabelledby: hasHeader ? headerId : void 0, statusType: "finished" },
        import_react17.default.createElement(ItemsList, { items, onItemActivate, onGroupToggle, hasExpandableGroups: expandableGroups, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, highlightItem, expandToViewport, variant })
      )
    )
  );
});
var internal_default2 = InternalButtonDropdown;

export {
  styles_css_default2 as styles_css_default,
  usePortalModeClasses,
  dropdown_default,
  styles_css_default4 as styles_css_default2,
  arrow_default,
  PopoverContainer,
  PopoverBody,
  useOpenState,
  options_list_default,
  internal_default2 as internal_default
};
//# sourceMappingURL=chunk-CNESFELA.js.map

import {
  joinStrings
} from "./chunk-IXOWUQJP.js";
import {
  internal_default as internal_default3
} from "./chunk-MIT655T7.js";
import {
  internal_default as internal_default4,
  styles_css_default
} from "./chunk-EW7GCZX3.js";
import {
  Portal
} from "./chunk-TM5SCOBX.js";
import {
  VisualContext
} from "./chunk-VTHOLXAY.js";
import {
  focus_lock_default
} from "./chunk-NUB4MB4Q.js";
import {
  InternalButton,
  internal_default as internal_default2
} from "./chunk-WKOYGYGF.js";
import {
  useInternalI18n
} from "./chunk-VOJM65QS.js";
import {
  useUniqueId
} from "./chunk-ZOQJCCJI.js";
import {
  checkSafeUrl
} from "./chunk-JPGUN2BY.js";
import {
  fireCancelableEvent,
  isPlainLeftClick
} from "./chunk-CTALK4OT.js";
import {
  internal_default
} from "./chunk-CRWXG7GH.js";
import {
  useContainerBreakpoints,
  useContainerQuery
} from "./chunk-6QG3XHFW.js";
import {
  useMergeRefs
} from "./chunk-INN7TUPO.js";
import {
  __rest,
  applyDisplayName,
  clsx_m_default,
  getBaseProps,
  useBaseComponent
} from "./chunk-BATVD76T.js";
import {
  __toESM,
  require_react
} from "./chunk-C3URVCCN.js";

// node_modules/@cloudscape-design/components/top-navigation/index.js
var import_react12 = __toESM(require_react());

// node_modules/@cloudscape-design/components/top-navigation/internal.js
var import_react11 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/use-effect-on-update.js
var import_react = __toESM(require_react());
function useEffectOnUpdate(callback, deps) {
  const isFirstRender = (0, import_react.useRef)(true);
  (0, import_react.useEffect)(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
    } else {
      return callback();
    }
  }, deps);
}

// node_modules/@cloudscape-design/components/top-navigation/use-top-navigation.js
var import_react2 = __toESM(require_react());

// node_modules/@cloudscape-design/components/top-navigation/styles.css.js
import "/local/home/samilafo/final_epa_project/cloudscape_wrkshp/cloudscape-design-system-workshop/node_modules/@cloudscape-design/components/top-navigation/styles.scoped.css";
var styles_css_default2 = {
  "icon": "awsui_icon_k5dlb_b522n_93",
  "top-navigation": "awsui_top-navigation_k5dlb_b522n_111",
  "padding-box": "awsui_padding-box_k5dlb_b522n_124",
  "medium": "awsui_medium_k5dlb_b522n_134",
  "narrow": "awsui_narrow_k5dlb_b522n_134",
  "virtual": "awsui_virtual_k5dlb_b522n_145",
  "hidden": "awsui_hidden_k5dlb_b522n_149",
  "	": "awsui_	_k5dlb_b522n_1",
  "identity": "awsui_identity_k5dlb_b522n_161",
  "identity-link": "awsui_identity-link_k5dlb_b522n_164",
  "no-logo": "awsui_no-logo_k5dlb_b522n_181",
  "logo": "awsui_logo_k5dlb_b522n_185",
  "title": "awsui_title_k5dlb_b522n_197",
  "inputs": "awsui_inputs_k5dlb_b522n_212",
  "search": "awsui_search_k5dlb_b522n_219",
  "search-expanded": "awsui_search-expanded_k5dlb_b522n_223",
  "utilities": "awsui_utilities_k5dlb_b522n_227",
  "utility-wrapper": "awsui_utility-wrapper_k5dlb_b522n_238",
  "utility-type-button-link": "awsui_utility-type-button-link_k5dlb_b522n_259",
  "utility-type-menu-dropdown": "awsui_utility-type-menu-dropdown_k5dlb_b522n_263",
  "utility-type-button-primary-button": "awsui_utility-type-button-primary-button_k5dlb_b522n_271",
  "utility-link-icon": "awsui_utility-link-icon_k5dlb_b522n_279",
  "utility-button-external-icon": "awsui_utility-button-external-icon_k5dlb_b522n_283",
  "offset-right-none": "awsui_offset-right-none_k5dlb_b522n_287",
  "offset-right-l": "awsui_offset-right-l_k5dlb_b522n_291",
  "offset-right-xxl": "awsui_offset-right-xxl_k5dlb_b522n_295",
  "overflow-menu-drawer": "awsui_overflow-menu-drawer_k5dlb_b522n_300",
  "overflow-menu": "awsui_overflow-menu_k5dlb_b522n_300",
  "overflow-menu-header": "awsui_overflow-menu-header_k5dlb_b522n_322",
  "overflow-menu-header-text": "awsui_overflow-menu-header-text_k5dlb_b522n_329",
  "overflow-menu-header-text--secondary": "awsui_overflow-menu-header-text--secondary_k5dlb_b522n_340",
  "overflow-menu-header-text--title": "awsui_overflow-menu-header-text--title_k5dlb_b522n_346",
  "overflow-menu-back-button": "awsui_overflow-menu-back-button_k5dlb_b522n_350",
  "overflow-menu-dismiss-button": "awsui_overflow-menu-dismiss-button_k5dlb_b522n_354",
  "overflow-menu-control": "awsui_overflow-menu-control_k5dlb_b522n_358",
  "overflow-menu-list-item-utility": "awsui_overflow-menu-list-item-utility_k5dlb_b522n_375",
  "overflow-menu-control-link": "awsui_overflow-menu-control-link_k5dlb_b522n_382",
  "overflow-menu-control-expandable-menu-trigger": "awsui_overflow-menu-control-expandable-menu-trigger_k5dlb_b522n_385",
  "overflow-menu-list": "awsui_overflow-menu-list_k5dlb_b522n_375",
  "overflow-menu-list-submenu": "awsui_overflow-menu-list-submenu_k5dlb_b522n_416",
  "overflow-menu-list-item": "awsui_overflow-menu-list-item_k5dlb_b522n_375",
  "overflow-menu-list-item-icon": "awsui_overflow-menu-list-item-icon_k5dlb_b522n_424",
  "overflow-menu-list-item-text": "awsui_overflow-menu-list-item-text_k5dlb_b522n_427",
  "overflow-menu-list-item-submenu": "awsui_overflow-menu-list-item-submenu_k5dlb_b522n_436",
  "overflow-menu-list-item-dropdown-menu": "awsui_overflow-menu-list-item-dropdown-menu_k5dlb_b522n_441",
  "overflow-menu-list-item-expandable": "awsui_overflow-menu-list-item-expandable_k5dlb_b522n_444",
  "expanded": "awsui_expanded_k5dlb_b522n_452"
};

// node_modules/@cloudscape-design/components/top-navigation/use-top-navigation.js
var RESPONSIVENESS_BUFFER = 20;
function useTopNavigation({ identity, search, utilities }) {
  const mainRef = (0, import_react2.useRef)(null);
  const virtualRef = (0, import_react2.useRef)(null);
  const [breakpoint, breakpointRef] = useContainerBreakpoints(["xxs", "s"]);
  const hasSearch = !!search;
  const hasTitleWithLogo = identity && !!identity.logo && !!identity.title;
  const responsiveStates = (0, import_react2.useMemo)(() => {
    return generateResponsiveStateKeys(utilities, hasSearch, hasTitleWithLogo);
  }, [utilities, hasSearch, hasTitleWithLogo]);
  const [responsiveState, setResponsiveState] = (0, import_react2.useState)();
  const recalculateFit = (0, import_react2.useCallback)(() => {
    var _a, _b, _c, _d;
    if (!(mainRef === null || mainRef === void 0 ? void 0 : mainRef.current) || !virtualRef.current) {
      setResponsiveState(responsiveStates[0]);
      return;
    }
    const availableWidth = getContentBoxWidth(mainRef.current.querySelector(`.${styles_css_default2["padding-box"]}`));
    if (availableWidth === 0) {
      setResponsiveState(responsiveStates[0]);
      return;
    }
    const sizeConfiguration = {
      hasSearch,
      availableWidth,
      fullIdentityWidth: virtualRef.current.querySelector(`.${styles_css_default2.identity}`).getBoundingClientRect().width,
      titleWidth: (_b = (_a = virtualRef.current.querySelector(`.${styles_css_default2.title}`)) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().width) !== null && _b !== void 0 ? _b : 0,
      searchSlotWidth: (_d = (_c = virtualRef.current.querySelector(`.${styles_css_default2.search}`)) === null || _c === void 0 ? void 0 : _c.getBoundingClientRect().width) !== null && _d !== void 0 ? _d : 0,
      searchUtilityWidth: virtualRef.current.querySelector('[data-utility-special="search"]').getBoundingClientRect().width,
      utilitiesLeftPadding: parseFloat(getComputedStyle(virtualRef.current.querySelector(`.${styles_css_default2.utilities}`)).paddingLeft || "0px"),
      utilityWithLabelWidths: Array.prototype.slice.call(virtualRef.current.querySelectorAll(`[data-utility-hide="false"]`)).map((element) => element.getBoundingClientRect().width),
      utilityWithoutLabelWidths: Array.prototype.slice.call(virtualRef.current.querySelectorAll(`[data-utility-hide="true"]`)).map((element) => element.getBoundingClientRect().width),
      menuTriggerUtilityWidth: virtualRef.current.querySelector('[data-utility-special="menu-trigger"]').getBoundingClientRect().width
    };
    setResponsiveState(determineBestResponsiveState(responsiveStates, sizeConfiguration));
  }, [responsiveStates, hasSearch]);
  const [, containerQueryRef] = useContainerQuery(() => {
    recalculateFit();
  }, [recalculateFit]);
  const onVirtualMount = (0, import_react2.useCallback)((element) => {
    virtualRef.current = element;
    recalculateFit();
  }, [recalculateFit]);
  const [isSearchMinimized, setSearchMinimized] = (0, import_react2.useState)(true);
  const isSearchExpanded = !isSearchMinimized && hasSearch && (responsiveState === null || responsiveState === void 0 ? void 0 : responsiveState.hideSearch);
  (0, import_react2.useEffect)(() => {
    if (!(responsiveState === null || responsiveState === void 0 ? void 0 : responsiveState.hideSearch)) {
      setSearchMinimized(true);
    }
  }, [responsiveState]);
  (0, import_react2.useEffect)(() => {
    var _a, _b;
    if (isSearchExpanded) {
      (_b = (_a = mainRef === null || mainRef === void 0 ? void 0 : mainRef.current) === null || _a === void 0 ? void 0 : _a.querySelector(`.${styles_css_default2.search} input`)) === null || _b === void 0 ? void 0 : _b.focus();
    }
  }, [isSearchExpanded, mainRef]);
  const mergedMainRef = useMergeRefs(mainRef, containerQueryRef, breakpointRef);
  return {
    mainRef: mergedMainRef,
    virtualRef: onVirtualMount,
    responsiveState: responsiveState !== null && responsiveState !== void 0 ? responsiveState : responsiveStates[0],
    breakpoint: breakpoint !== null && breakpoint !== void 0 ? breakpoint : "default",
    isSearchExpanded: !!isSearchExpanded,
    onSearchUtilityClick: () => setSearchMinimized((isSearchMinimized2) => !isSearchMinimized2)
  };
}
function getContentBoxWidth(element) {
  const style = getComputedStyle(element);
  return parseFloat(style.width || "0px") - parseFloat(style.paddingLeft || "0px") - parseFloat(style.paddingRight || "0px");
}
function generateResponsiveStateKeys(utilities, canHideSearch, canHideTitle) {
  const states = [{}];
  if (utilities.some((utility) => utility.text)) {
    states.push({ hideUtilityText: true });
  }
  if (canHideSearch) {
    states.push({
      hideUtilityText: true,
      hideSearch: true
    });
  }
  const hiddenUtilties = [];
  for (let i = 0; i < utilities.length; i++) {
    if (!utilities[i].disableUtilityCollapse) {
      hiddenUtilties.push(i);
      states.push({
        hideUtilityText: true,
        hideSearch: canHideSearch || void 0,
        hideUtilities: hiddenUtilties.length > 0 ? hiddenUtilties.slice() : void 0
      });
    }
  }
  if (canHideTitle) {
    states.push({
      hideUtilityText: true,
      hideSearch: canHideSearch || void 0,
      hideUtilities: hiddenUtilties.length > 0 ? hiddenUtilties.slice() : void 0,
      hideTitle: true
    });
  }
  return states;
}
function determineBestResponsiveState(possibleStates, sizes) {
  const { hasSearch, availableWidth, utilitiesLeftPadding, fullIdentityWidth, titleWidth, searchSlotWidth, searchUtilityWidth, utilityWithLabelWidths, utilityWithoutLabelWidths, menuTriggerUtilityWidth } = sizes;
  for (const state of possibleStates) {
    const searchWidth = hasSearch ? state.hideSearch ? searchUtilityWidth : searchSlotWidth : 0;
    const utilitiesWidth = (state.hideUtilityText ? utilityWithoutLabelWidths : utilityWithLabelWidths).filter((_width, i) => !state.hideUtilities || state.hideUtilities.indexOf(i) === -1).reduce((sum, width) => sum + width, 0);
    const menuTriggerWidth = state.hideUtilities ? menuTriggerUtilityWidth : 0;
    const identityWidth = state.hideTitle ? fullIdentityWidth - titleWidth : fullIdentityWidth;
    const expectedInnerWidth = identityWidth + searchWidth + utilitiesLeftPadding + utilitiesWidth + menuTriggerWidth;
    if (expectedInnerWidth <= availableWidth - RESPONSIVENESS_BUFFER) {
      return state;
    }
  }
  return possibleStates[possibleStates.length - 1];
}

// node_modules/@cloudscape-design/components/top-navigation/parts/utility.js
var import_react4 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/menu-dropdown/index.js
var import_react3 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/menu-dropdown/styles.css.js
import "/local/home/samilafo/final_epa_project/cloudscape_wrkshp/cloudscape-design-system-workshop/node_modules/@cloudscape-design/components/internal/components/menu-dropdown/styles.scoped.css";
var styles_css_default3 = {
  "button": "awsui_button_m5h9f_19a0q_93",
  "expanded": "awsui_expanded_m5h9f_19a0q_127",
  "offset-right-none": "awsui_offset-right-none_m5h9f_19a0q_138",
  "offset-right-l": "awsui_offset-right-l_m5h9f_19a0q_141",
  "offset-right-xxl": "awsui_offset-right-xxl_m5h9f_19a0q_144",
  "text": "awsui_text_m5h9f_19a0q_166",
  "icon": "awsui_icon_m5h9f_19a0q_170"
};

// node_modules/@cloudscape-design/components/internal/components/menu-dropdown/index.js
var ButtonTrigger = import_react3.default.forwardRef(({ iconName, iconUrl, iconAlt, iconSvg, badge, ariaLabel, offsetRight, disabled, expanded, children, onClick }, ref) => {
  const hasIcon = iconName || iconUrl || iconSvg;
  return import_react3.default.createElement(
    "button",
    { ref, type: "button", className: clsx_m_default(styles_css_default3.button, styles_css_default3[`offset-right-${offsetRight}`], { [styles_css_default3.expanded]: expanded }), "aria-label": ariaLabel, "aria-expanded": !!expanded, "aria-haspopup": true, disabled, onClick: (event) => {
      event.preventDefault();
      onClick && onClick();
    } },
    hasIcon && import_react3.default.createElement(internal_default, { className: styles_css_default3.icon, name: iconName, url: iconUrl, alt: iconAlt, svg: iconSvg, badge }),
    children && import_react3.default.createElement("span", { className: styles_css_default3.text }, children),
    children && import_react3.default.createElement(internal_default, { name: "caret-down-filled", className: expanded ? styles_css_default["rotate-up"] : styles_css_default["rotate-down"] })
  );
});
var MenuDropdown = (_a) => {
  var { iconName, iconUrl, iconAlt, iconSvg, badge, ariaLabel, offsetRight, children } = _a, props = __rest(_a, ["iconName", "iconUrl", "iconAlt", "iconSvg", "badge", "ariaLabel", "offsetRight", "children"]);
  const baseProps = getBaseProps(props);
  const dropdownTrigger = (clickHandler, ref, isDisabled, isExpanded) => {
    return import_react3.default.createElement(ButtonTrigger, { ref, disabled: isDisabled, expanded: isExpanded, iconName, iconUrl, iconAlt, iconSvg, badge, ariaLabel, offsetRight, onClick: clickHandler }, children);
  };
  return import_react3.default.createElement(internal_default4, Object.assign({}, baseProps, props, { variant: "navigation", customTriggerBuilder: dropdownTrigger, preferCenter: true }));
};
applyDisplayName(MenuDropdown, "MenuDropdown");
var menu_dropdown_default = MenuDropdown;

// node_modules/@cloudscape-design/components/top-navigation/parts/utility.js
function Utility({ hideText, definition, offsetRight }) {
  var _a;
  const hasIcon = !!definition.iconName || !!definition.iconUrl || !!definition.iconAlt || !!definition.iconSvg;
  const shouldHideText = hideText && !definition.disableTextCollapse && hasIcon;
  let ariaLabel = (_a = definition.ariaLabel) !== null && _a !== void 0 ? _a : definition.text;
  if (definition.type === "button") {
    ariaLabel = definition.ariaLabel ? definition.ariaLabel : joinStrings(definition.text, definition.externalIconAriaLabel);
    checkSafeUrl("TopNavigation", definition.href);
    if (definition.variant === "primary-button") {
      return import_react4.default.createElement(
        "span",
        { className: styles_css_default2[`offset-right-${offsetRight}`] },
        import_react4.default.createElement(InternalButton, { variant: "primary", href: definition.href, target: definition.external ? "_blank" : void 0, onClick: definition.onClick, onFollow: definition.onFollow, ariaLabel, iconName: definition.iconName, iconUrl: definition.iconUrl, iconAlt: definition.iconAlt, iconSvg: definition.iconSvg }, shouldHideText ? null : import_react4.default.createElement(
          import_react4.default.Fragment,
          null,
          definition.text,
          definition.external && import_react4.default.createElement(
            import_react4.default.Fragment,
            null,
            " ",
            import_react4.default.createElement(
              "span",
              { className: clsx_m_default(styles_css_default2["utility-button-external-icon"], styles_css_default2[`offset-right-${offsetRight}`]), "aria-label": definition.externalIconAriaLabel, role: definition.externalIconAriaLabel ? "img" : void 0 },
              import_react4.default.createElement(internal_default, { name: "external" })
            )
          )
        ))
      );
    } else {
      return import_react4.default.createElement(
        "span",
        { className: styles_css_default2[`offset-right-${offsetRight}`] },
        import_react4.default.createElement(
          internal_default3,
          { variant: "top-navigation", href: definition.href, target: definition.target, rel: definition.rel, external: definition.external, onFollow: (evt) => {
            fireCancelableEvent(definition.onFollow, { href: definition.href, target: definition.target, external: definition.external }, evt);
            fireCancelableEvent(definition.onClick, { href: definition.href, target: definition.target, external: definition.external }, evt);
          }, ariaLabel },
          hasIcon && import_react4.default.createElement(internal_default, { name: definition.iconName, url: definition.iconUrl, alt: definition.iconAlt, svg: definition.iconSvg, badge: definition.badge }),
          !shouldHideText && definition.text && import_react4.default.createElement("span", { className: hasIcon ? styles_css_default2["utility-link-icon"] : void 0 }, definition.text)
        )
      );
    }
  } else if (definition.type === "menu-dropdown") {
    const title = definition.title || definition.text;
    const shouldShowTitle = shouldHideText || !definition.text;
    checkSafeUrlRecursively(definition.items);
    return import_react4.default.createElement(menu_dropdown_default, Object.assign({}, definition, { title: shouldShowTitle ? title : "", ariaLabel, offsetRight }), !shouldHideText && definition.text);
  }
  return null;
}
function checkSafeUrlRecursively(itemOrGroup) {
  for (const item of itemOrGroup) {
    checkSafeUrl("TopNavigation", item.href);
    if ("items" in item) {
      checkSafeUrlRecursively(item.items);
    }
  }
}

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/index.js
var import_react10 = __toESM(require_react());

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/router.js
var import_react5 = __toESM(require_react());
var defaultCtx = { state: { view: "utilities", data: null }, setState: () => {
} };
var ViewContext = (0, import_react5.createContext)(defaultCtx);
var useNavigate = () => {
  const { setState } = (0, import_react5.useContext)(ViewContext);
  const navigate = (view, data) => {
    setState({ view, data });
  };
  return navigate;
};
var Route = ({ view, element }) => {
  const { state } = (0, import_react5.useContext)(ViewContext);
  if (view === state.view) {
    if (typeof element === "function") {
      return element(state.data);
    }
    return import_react5.default.createElement(import_react5.default.Fragment, null, element);
  }
  return null;
};
var Router = ({ children }) => {
  const [state, setState] = (0, import_react5.useState)({ view: "utilities", data: null });
  return import_react5.default.createElement(ViewContext.Provider, { value: { state, setState } }, children);
};
var router_default = Router;

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/views/utilities.js
var import_react8 = __toESM(require_react());

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/header.js
var import_react6 = __toESM(require_react());
var Header = ({ children, secondaryText, backIconAriaLabel, dismissIconAriaLabel, onBack, onClose }) => {
  return import_react6.default.createElement(
    "div",
    { className: styles_css_default2["overflow-menu-header"] },
    onBack && import_react6.default.createElement(
      internal_default2,
      {
        className: styles_css_default2["overflow-menu-back-button"],
        ariaLabel: backIconAriaLabel,
        iconName: "angle-left",
        variant: "icon",
        onClick: () => onBack()
      }
    ),
    import_react6.default.createElement(
      "h2",
      { className: styles_css_default2["overflow-menu-header-text"] },
      import_react6.default.createElement("div", { className: styles_css_default2["overflow-menu-header-text--title"] }, children),
      secondaryText && import_react6.default.createElement("div", { className: styles_css_default2["overflow-menu-header-text--secondary"] }, secondaryText)
    ),
    import_react6.default.createElement(
      internal_default2,
      {
        className: styles_css_default2["overflow-menu-dismiss-button"],
        ariaLabel: dismissIconAriaLabel,
        iconName: "close",
        variant: "icon",
        onClick: () => onClose && onClose()
      }
    )
  );
};
var header_default = Header;

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/menu-item.js
var import_react7 = __toESM(require_react());
var ListItem = ({ children, startIcon, endIcon }) => {
  return import_react7.default.createElement(
    import_react7.default.Fragment,
    null,
    startIcon && import_react7.default.createElement("span", { className: styles_css_default2["overflow-menu-list-item-icon"] }, startIcon),
    import_react7.default.createElement("span", { className: styles_css_default2["overflow-menu-list-item-text"] }, children),
    endIcon && endIcon
  );
};
var LinkItem = (0, import_react7.forwardRef)(({ children, external, href, target, rel, startIcon, endIcon, onClick, context, testId }, ref) => {
  const anchorTarget = target !== null && target !== void 0 ? target : external ? "_blank" : void 0;
  const anchorRel = rel !== null && rel !== void 0 ? rel : anchorTarget === "_blank" ? "noopener noreferrer" : void 0;
  return import_react7.default.createElement(
    "a",
    Object.assign({ ref, onClick, className: clsx_m_default(styles_css_default2["overflow-menu-control"], styles_css_default2["overflow-menu-control-link"], context && styles_css_default2[`overflow-menu-control-${context}`]), href, target: anchorTarget, rel: anchorRel }, testId ? { "data-testid": testId } : {}),
    import_react7.default.createElement(ListItem, { startIcon, endIcon }, children)
  );
});
var ButtonItem = (0, import_react7.forwardRef)(({ children, startIcon, endIcon, onClick, testId }, ref) => {
  return import_react7.default.createElement(
    "button",
    Object.assign({ ref, className: styles_css_default2["overflow-menu-control"], onClick }, typeof testId === "string" ? { "data-testid": testId } : {}),
    import_react7.default.createElement(ListItem, { startIcon, endIcon }, children)
  );
});
var NavigationItem = (0, import_react7.forwardRef)((_a, ref) => {
  var { startIcon, children, index, testId } = _a, definition = __rest(_a, ["startIcon", "children", "index", "testId"]);
  const navigate = useNavigate();
  return import_react7.default.createElement(ButtonItem, { ref, startIcon, endIcon: import_react7.default.createElement(internal_default, { name: "angle-right" }), testId, onClick: () => navigate("dropdown-menu", {
    definition,
    headerText: definition.text || definition.title,
    headerSecondaryText: definition.description,
    utilityIndex: index
  }) }, children);
});
var ExpandableItem = (_a) => {
  var { children, onItemClick } = _a, definition = __rest(_a, ["children", "onItemClick"]);
  const [expanded, setExpanded] = (0, import_react7.useState)(false);
  const headerId = useUniqueId("overflow-menu-item");
  return import_react7.default.createElement(
    import_react7.default.Fragment,
    null,
    import_react7.default.createElement(
      "button",
      { className: clsx_m_default(styles_css_default2["overflow-menu-control"], styles_css_default2["overflow-menu-control-expandable-menu-trigger"]), onClick: () => setExpanded((value) => !value), "aria-expanded": expanded },
      import_react7.default.createElement(
        ListItem,
        { endIcon: import_react7.default.createElement(
          "span",
          { className: clsx_m_default(styles_css_default2.icon, expanded && styles_css_default2.expanded) },
          import_react7.default.createElement(internal_default, { name: "caret-up-filled" })
        ) },
        import_react7.default.createElement("span", { id: headerId }, children)
      )
    ),
    expanded && import_react7.default.createElement("ul", { className: clsx_m_default(styles_css_default2["overflow-menu-list"], styles_css_default2["overflow-menu-list-submenu"]), "aria-labelledby": headerId }, definition.items.map((item, index) => {
      const isGroup = typeof item.items !== "undefined";
      return import_react7.default.createElement("li", { key: index, className: clsx_m_default(styles_css_default2[`overflow-menu-list-item`], styles_css_default2[`overflow-menu-list-item-dropdown-menu`]) }, dropdownComponentFactory(item, isGroup, onItemClick));
    }))
  );
};
function utilityComponentFactory(utility, index, ref) {
  const label = utility.text || utility.title;
  const hasIcon = !!utility.iconName || !!utility.iconUrl || !!utility.iconAlt || !!utility.iconSvg;
  const startIcon = hasIcon && import_react7.default.createElement(internal_default, { name: utility.iconName, url: utility.iconUrl, alt: utility.iconAlt, svg: utility.iconSvg });
  switch (utility.type) {
    case "button": {
      const handleClick = (event) => {
        var _a;
        if (Boolean(utility.href) && isPlainLeftClick(event)) {
          fireCancelableEvent(utility.onFollow, { href: utility.href, target: utility.target }, event);
        }
        fireCancelableEvent(utility.onClick, {}, event);
        (_a = utility.onClose) === null || _a === void 0 ? void 0 : _a.call(utility);
      };
      const content = import_react7.default.createElement(
        import_react7.default.Fragment,
        null,
        label,
        utility.external && import_react7.default.createElement(
          import_react7.default.Fragment,
          null,
          " ",
          import_react7.default.createElement(
            "span",
            { "aria-label": utility.externalIconAriaLabel, role: utility.externalIconAriaLabel ? "img" : void 0 },
            import_react7.default.createElement(internal_default, { name: "external", size: "normal" })
          )
        )
      );
      if (!utility.href) {
        return import_react7.default.createElement(ButtonItem, { ref, startIcon, onClick: handleClick, testId: `__${index}` }, content);
      }
      return import_react7.default.createElement(LinkItem, { ref, startIcon, href: utility.href, external: utility.external, target: utility.target, rel: utility.rel, testId: `__${index}`, onClick: handleClick }, content);
    }
    case "menu-dropdown": {
      return import_react7.default.createElement(NavigationItem, Object.assign({ ref, startIcon, index }, utility, { testId: `__${index}` }), label);
    }
  }
}
function dropdownComponentFactory(item, expandable, onItemClick) {
  const label = item.text;
  const hasIcon = !!item.iconName || !!item.iconUrl || !!item.iconAlt || !!item.iconSvg;
  const startIcon = hasIcon && import_react7.default.createElement(internal_default, { name: item.iconName, url: item.iconUrl, alt: item.iconAlt, svg: item.iconSvg });
  if (expandable) {
    return import_react7.default.createElement(ExpandableItem, Object.assign({}, item, { onItemClick }), label);
  }
  return import_react7.default.createElement(
    LinkItem,
    { startIcon, href: item.href, external: item.external, context: "dropdown-menu", testId: item.id, onClick: (event) => onItemClick(event, item) },
    label,
    item.external && import_react7.default.createElement(
      import_react7.default.Fragment,
      null,
      " ",
      import_react7.default.createElement(
        "span",
        { "aria-label": item.externalIconAriaLabel, role: item.externalIconAriaLabel ? "img" : void 0 },
        import_react7.default.createElement(internal_default, { name: "external", size: "normal" })
      )
    )
  );
}
var UtilityMenuItem = (0, import_react7.forwardRef)((_a, ref) => {
  var { index } = _a, props = __rest(_a, ["index"]);
  return import_react7.default.createElement("li", { className: clsx_m_default(styles_css_default2[`overflow-menu-list-item`], styles_css_default2[`overflow-menu-list-item-utility`]) }, utilityComponentFactory(props, index, ref));
});
var SubmenuItem = (props) => {
  const expandable = typeof props.items !== "undefined";
  return import_react7.default.createElement("li", { className: clsx_m_default(styles_css_default2[`overflow-menu-list-item`], styles_css_default2[`overflow-menu-list-item-submenu`], expandable && styles_css_default2[`overflow-menu-list-item-expandable`]) }, dropdownComponentFactory(props, expandable, props.onClick));
};

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/views/utilities.js
var UtilitiesView = ({ headerText, dismissIconAriaLabel, onClose, items = [], focusIndex }) => {
  const headerId = useUniqueId("overflow-menu-header");
  const ref = (0, import_react8.useRef)(null);
  (0, import_react8.useEffect)(() => {
    var _a;
    if (typeof focusIndex === "number") {
      (_a = ref.current) === null || _a === void 0 ? void 0 : _a.focus();
    }
  }, [focusIndex]);
  return import_react8.default.createElement(
    focus_lock_default,
    { autoFocus: true },
    import_react8.default.createElement(
      header_default,
      { dismissIconAriaLabel, onClose },
      import_react8.default.createElement("span", { id: headerId }, headerText)
    ),
    import_react8.default.createElement("ul", { className: styles_css_default2["overflow-menu-list"], "aria-labelledby": headerId }, items.map((utility, index) => import_react8.default.createElement(UtilityMenuItem, Object.assign({ key: index, index, ref: index === focusIndex ? ref : void 0, onClose }, utility))))
  );
};
var utilities_default = UtilitiesView;

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/views/submenu.js
var import_react9 = __toESM(require_react());
var SubmenuView = ({ onClose, utilityIndex, headerText, headerSecondaryText, dismissIconAriaLabel, backIconAriaLabel, definition }) => {
  const navigate = useNavigate();
  const headerId = useUniqueId("overflow-menu-header");
  return import_react9.default.createElement(
    focus_lock_default,
    { autoFocus: true },
    import_react9.default.createElement(
      header_default,
      { secondaryText: headerSecondaryText, dismissIconAriaLabel, backIconAriaLabel, onClose, onBack: () => navigate("utilities", { utilityIndex }) },
      import_react9.default.createElement("span", { id: headerId }, headerText)
    ),
    import_react9.default.createElement("ul", { className: clsx_m_default(styles_css_default2["overflow-menu-list"], styles_css_default2["overflow-menu-list-submenu"]), "aria-labelledby": headerId }, definition.items.map((item, index) => import_react9.default.createElement(SubmenuItem, Object.assign({ key: index }, item, { onClick: (event, item2) => {
      if (item2.href && isPlainLeftClick(event)) {
        fireCancelableEvent(definition.onItemFollow, { id: item2.id, href: item2.href, external: item2.external }, event);
      }
      fireCancelableEvent(definition.onItemClick, { id: item2.id, href: item2.href, external: item2.external }, event);
      onClose === null || onClose === void 0 ? void 0 : onClose();
    } }))))
  );
};
var submenu_default = SubmenuView;

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/index.js
var OverflowMenu = ({ headerText, dismissIconAriaLabel, backIconAriaLabel, items = [], onClose }) => {
  const i18n = useInternalI18n("top-navigation");
  const renderedDismissIconAriaLabel = i18n("i18nStrings.overflowMenuDismissIconAriaLabel", dismissIconAriaLabel);
  const renderedBackIconAriaLabel = i18n("i18nStrings.overflowMenuBackIconAriaLabel", backIconAriaLabel);
  return import_react10.default.createElement(
    "div",
    { className: styles_css_default2["overflow-menu"], onKeyUp: (event) => {
      if (event.key === "Escape") {
        onClose === null || onClose === void 0 ? void 0 : onClose();
      }
    } },
    import_react10.default.createElement(
      router_default,
      null,
      import_react10.default.createElement(Route, { view: "utilities", element: (data) => import_react10.default.createElement(utilities_default, { headerText: i18n("i18nStrings.overflowMenuTitleText", headerText), items, focusIndex: data === null || data === void 0 ? void 0 : data.utilityIndex, dismissIconAriaLabel: renderedDismissIconAriaLabel, backIconAriaLabel: renderedBackIconAriaLabel, onClose }) }),
      import_react10.default.createElement(Route, { view: "dropdown-menu", element: (data) => import_react10.default.createElement(submenu_default, { headerText: data === null || data === void 0 ? void 0 : data.headerText, headerSecondaryText: data === null || data === void 0 ? void 0 : data.headerSecondaryText, dismissIconAriaLabel: renderedDismissIconAriaLabel, backIconAriaLabel: renderedBackIconAriaLabel, definition: data === null || data === void 0 ? void 0 : data.definition, utilityIndex: data === null || data === void 0 ? void 0 : data.utilityIndex, onClose }) })
    )
  );
};
var overflow_menu_default = OverflowMenu;

// node_modules/@cloudscape-design/components/top-navigation/internal.js
function InternalTopNavigation(_a) {
  var { __internalRootRef, identity, i18nStrings, utilities, search } = _a, restProps = __rest(_a, ["__internalRootRef", "identity", "i18nStrings", "utilities", "search"]);
  checkSafeUrl("TopNavigation", identity.href);
  const baseProps = getBaseProps(restProps);
  const { mainRef, virtualRef, breakpoint, responsiveState, isSearchExpanded, onSearchUtilityClick } = useTopNavigation({ identity, search, utilities });
  const [overflowMenuOpen, setOverflowMenuOpen] = (0, import_react11.useState)(false);
  const overflowMenuTriggerRef = (0, import_react11.useRef)(null);
  const isNarrowViewport = breakpoint === "default";
  const isMediumViewport = breakpoint === "xxs";
  const isLargeViewport = breakpoint === "s";
  const i18n = useInternalI18n("top-navigation");
  const onIdentityClick = (event) => {
    if (isPlainLeftClick(event)) {
      fireCancelableEvent(identity.onFollow, {}, event);
    }
  };
  const toggleOverflowMenu = () => {
    setOverflowMenuOpen((overflowMenuOpen2) => !overflowMenuOpen2);
  };
  const menuTriggerVisible = !isSearchExpanded && responsiveState.hideUtilities;
  (0, import_react11.useEffect)(() => {
    setOverflowMenuOpen(false);
  }, [menuTriggerVisible]);
  useEffectOnUpdate(() => {
    var _a2;
    if (!overflowMenuOpen) {
      (_a2 = overflowMenuTriggerRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
  }, [overflowMenuOpen]);
  const content = (isVirtual) => {
    var _a2, _b;
    const Wrapper = isVirtual ? "div" : "header";
    const showIdentity = isVirtual || !isSearchExpanded;
    const showTitle = isVirtual || !responsiveState.hideTitle;
    const showSearchSlot = search && (isVirtual || !responsiveState.hideSearch || isSearchExpanded);
    const showSearchUtility = isVirtual || search && responsiveState.hideSearch;
    const showUtilities = isVirtual || !isSearchExpanded;
    const showMenuTrigger = isVirtual || menuTriggerVisible;
    return import_react11.default.createElement(
      Wrapper,
      {
        ref: isVirtual ? virtualRef : mainRef,
        "aria-hidden": isVirtual ? true : void 0,
        className: clsx_m_default(styles_css_default2["top-navigation"], {
          [styles_css_default2.virtual]: isVirtual,
          [styles_css_default2.hidden]: isVirtual,
          [styles_css_default2.narrow]: isNarrowViewport,
          [styles_css_default2.medium]: isMediumViewport
        })
      },
      import_react11.default.createElement(
        "div",
        { className: styles_css_default2["padding-box"] },
        showIdentity && import_react11.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default2.identity, !identity.logo && styles_css_default2["no-logo"]) },
          import_react11.default.createElement(
            "a",
            { className: styles_css_default2["identity-link"], href: identity.href, onClick: onIdentityClick },
            identity.logo && import_react11.default.createElement("img", { role: "img", src: (_a2 = identity.logo) === null || _a2 === void 0 ? void 0 : _a2.src, alt: (_b = identity.logo) === null || _b === void 0 ? void 0 : _b.alt, className: clsx_m_default(styles_css_default2.logo, {
              [styles_css_default2.narrow]: isNarrowViewport
            }) }),
            showTitle && import_react11.default.createElement("span", { className: styles_css_default2.title }, identity.title)
          )
        ),
        showSearchSlot && import_react11.default.createElement(
          "div",
          { className: styles_css_default2.inputs },
          import_react11.default.createElement("div", { className: clsx_m_default(styles_css_default2.search, !isVirtual && isSearchExpanded && styles_css_default2["search-expanded"]) }, search)
        ),
        import_react11.default.createElement(
          "div",
          { className: styles_css_default2.utilities },
          showSearchUtility && import_react11.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default2["utility-wrapper"], styles_css_default2["utility-type-button"], styles_css_default2["utility-type-button-link"], {
              [styles_css_default2.narrow]: isNarrowViewport,
              [styles_css_default2.medium]: isMediumViewport
            }), "data-utility-special": "search" },
            import_react11.default.createElement(Utility, { hideText: true, definition: {
              type: "button",
              iconName: isSearchExpanded ? "close" : "search",
              ariaLabel: isSearchExpanded ? i18n("i18nStrings.searchDismissIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.searchDismissIconAriaLabel) : i18n("i18nStrings.searchIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.searchIconAriaLabel),
              onClick: onSearchUtilityClick
            } })
          ),
          showUtilities && utilities.filter((_utility, i) => isVirtual || !responsiveState.hideUtilities || responsiveState.hideUtilities.indexOf(i) === -1).map((utility, i) => {
            var _a3;
            const hideText = !!responsiveState.hideUtilityText;
            const isLast = (isVirtual || !showMenuTrigger) && i === utilities.length - 1;
            const offsetRight = isLast && isLargeViewport ? "xxl" : isLast ? "l" : void 0;
            return import_react11.default.createElement(
              "div",
              { key: i, className: clsx_m_default(styles_css_default2["utility-wrapper"], styles_css_default2[`utility-type-${utility.type}`], utility.type === "button" && styles_css_default2[`utility-type-button-${(_a3 = utility.variant) !== null && _a3 !== void 0 ? _a3 : "link"}`], {
                [styles_css_default2.narrow]: isNarrowViewport,
                [styles_css_default2.medium]: isMediumViewport
              }), "data-utility-index": i, "data-utility-hide": `${hideText}` },
              import_react11.default.createElement(Utility, { hideText, definition: utility, offsetRight })
            );
          }),
          isVirtual && utilities.map((utility, i) => {
            var _a3;
            const hideText = !responsiveState.hideUtilityText;
            const isLast = !showMenuTrigger && i === utilities.length - 1;
            const offsetRight = isLast && isLargeViewport ? "xxl" : isLast ? "l" : void 0;
            return import_react11.default.createElement(
              "div",
              { key: i, className: clsx_m_default(styles_css_default2["utility-wrapper"], styles_css_default2[`utility-type-${utility.type}`], utility.type === "button" && styles_css_default2[`utility-type-button-${(_a3 = utility.variant) !== null && _a3 !== void 0 ? _a3 : "link"}`], {
                [styles_css_default2.narrow]: isNarrowViewport,
                [styles_css_default2.medium]: isMediumViewport
              }), "data-utility-index": i, "data-utility-hide": `${hideText}` },
              import_react11.default.createElement(Utility, { hideText, definition: utility, offsetRight })
            );
          }),
          showMenuTrigger && import_react11.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default2["utility-wrapper"], styles_css_default2["utility-type-menu-dropdown"], {
              [styles_css_default2.narrow]: isNarrowViewport,
              [styles_css_default2.medium]: isMediumViewport
            }), "data-utility-special": "menu-trigger" },
            import_react11.default.createElement(ButtonTrigger, { expanded: overflowMenuOpen, onClick: toggleOverflowMenu, offsetRight: "l", ref: !isVirtual ? overflowMenuTriggerRef : void 0 }, i18n("i18nStrings.overflowMenuTriggerText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.overflowMenuTriggerText))
          )
        )
      )
    );
  };
  return import_react11.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: __internalRootRef }),
    import_react11.default.createElement(
      VisualContext,
      { contextName: "top-navigation" },
      content(false),
      import_react11.default.createElement(Portal, null, content(true)),
      menuTriggerVisible && overflowMenuOpen && import_react11.default.createElement(
        "div",
        { className: styles_css_default2["overflow-menu-drawer"] },
        import_react11.default.createElement(overflow_menu_default, { headerText: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.overflowMenuTitleText, dismissIconAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.overflowMenuDismissIconAriaLabel, backIconAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.overflowMenuBackIconAriaLabel, items: utilities.filter((utility, i) => (!responsiveState.hideUtilities || responsiveState.hideUtilities.indexOf(i) !== -1) && !utility.disableUtilityCollapse), onClose: toggleOverflowMenu })
      )
    )
  );
}

// node_modules/@cloudscape-design/components/top-navigation/index.js
function TopNavigation(_a) {
  var { utilities = [] } = _a, restProps = __rest(_a, ["utilities"]);
  const baseComponentProps = useBaseComponent("TopNavigation");
  return import_react12.default.createElement(InternalTopNavigation, Object.assign({}, baseComponentProps, { utilities }, restProps));
}
applyDisplayName(TopNavigation, "TopNavigation");

export {
  useEffectOnUpdate,
  TopNavigation
};
//# sourceMappingURL=chunk-CPJJ4GFT.js.map

import {
  Portal,
  VisualContext,
  internal_default as internal_default3,
  styles_css_default
} from "./chunk-XWOMHCOV.js";
import "./chunk-PP7ZM6P5.js";
import {
  useUniqueId
} from "./chunk-4SPBHLDO.js";
import "./chunk-ORU3SSIL.js";
import {
  InternalButton,
  internal_default as internal_default2
} from "./chunk-AI6YPQFM.js";
import {
  useForwardFocus
} from "./chunk-ZVZYH4QP.js";
import "./chunk-AQX2ZZQ6.js";
import {
  useEffectOnUpdate
} from "./chunk-3B73VQSS.js";
import {
  _extends,
  _inheritsLoose,
  _objectWithoutPropertiesLoose,
  require_prop_types,
  useContainerBreakpoints,
  useContainerQuery
} from "./chunk-SIDBM5Q2.js";
import "./chunk-XI4RR77K.js";
import {
  checkSafeUrl
} from "./chunk-5EWUESHH.js";
import {
  KeyCode,
  fireCancelableEvent,
  isPlainLeftClick,
  useFocusVisible
} from "./chunk-CVSDZ3HK.js";
import "./chunk-AN4UEH7R.js";
import "./chunk-SWK72FBN.js";
import {
  internal_default,
  useMergeRefs
} from "./chunk-3AAOFNJY.js";
import {
  useVisualRefresh
} from "./chunk-455JEJF4.js";
import {
  __assign,
  __rest,
  applyDisplayName,
  clsx_m_default,
  getBaseProps,
  useBaseComponent
} from "./chunk-XTANDRJM.js";
import "./chunk-WZDUAPVE.js";
import {
  require_react
} from "./chunk-JLBVE3FS.js";
import {
  __toESM
} from "./chunk-HUBM7RA2.js";

// node_modules/@cloudscape-design/components/top-navigation/index.js
var import_react17 = __toESM(require_react());

// node_modules/@cloudscape-design/components/top-navigation/internal.js
var import_react16 = __toESM(require_react());

// node_modules/@cloudscape-design/components/top-navigation/use-top-navigation.js
var import_react = __toESM(require_react());

// node_modules/@cloudscape-design/components/top-navigation/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/top-navigation/styles.scoped.css";
var styles_css_default2 = {
  "icon": "awsui_icon_k5dlb_14a5k_93",
  "top-navigation": "awsui_top-navigation_k5dlb_14a5k_111",
  "padding-box": "awsui_padding-box_k5dlb_14a5k_122",
  "medium": "awsui_medium_k5dlb_14a5k_132",
  "narrow": "awsui_narrow_k5dlb_14a5k_132",
  "virtual": "awsui_virtual_k5dlb_14a5k_143",
  "hidden": "awsui_hidden_k5dlb_14a5k_147",
  "	": "awsui_	_k5dlb_14a5k_1",
  "identity": "awsui_identity_k5dlb_14a5k_159",
  "identity-link": "awsui_identity-link_k5dlb_14a5k_162",
  "no-logo": "awsui_no-logo_k5dlb_14a5k_179",
  "logo": "awsui_logo_k5dlb_14a5k_183",
  "title": "awsui_title_k5dlb_14a5k_195",
  "inputs": "awsui_inputs_k5dlb_14a5k_208",
  "search": "awsui_search_k5dlb_14a5k_215",
  "search-expanded": "awsui_search-expanded_k5dlb_14a5k_219",
  "utilities": "awsui_utilities_k5dlb_14a5k_223",
  "utility-wrapper": "awsui_utility-wrapper_k5dlb_14a5k_234",
  "utility-type-button-link": "awsui_utility-type-button-link_k5dlb_14a5k_255",
  "utility-type-menu-dropdown": "awsui_utility-type-menu-dropdown_k5dlb_14a5k_259",
  "utility-type-button-primary-button": "awsui_utility-type-button-primary-button_k5dlb_14a5k_267",
  "utility-link-icon": "awsui_utility-link-icon_k5dlb_14a5k_275",
  "utility-button-external-icon": "awsui_utility-button-external-icon_k5dlb_14a5k_279",
  "offset-right-none": "awsui_offset-right-none_k5dlb_14a5k_283",
  "offset-right-l": "awsui_offset-right-l_k5dlb_14a5k_287",
  "offset-right-xxl": "awsui_offset-right-xxl_k5dlb_14a5k_291",
  "overflow-menu-drawer": "awsui_overflow-menu-drawer_k5dlb_14a5k_296",
  "overflow-menu": "awsui_overflow-menu_k5dlb_14a5k_296",
  "overflow-menu-header": "awsui_overflow-menu-header_k5dlb_14a5k_316",
  "overflow-menu-header-text": "awsui_overflow-menu-header-text_k5dlb_14a5k_323",
  "overflow-menu-header-text--secondary": "awsui_overflow-menu-header-text--secondary_k5dlb_14a5k_332",
  "overflow-menu-header-text--title": "awsui_overflow-menu-header-text--title_k5dlb_14a5k_338",
  "overflow-menu-back-button": "awsui_overflow-menu-back-button_k5dlb_14a5k_342",
  "overflow-menu-dismiss-button": "awsui_overflow-menu-dismiss-button_k5dlb_14a5k_346",
  "overflow-menu-control": "awsui_overflow-menu-control_k5dlb_14a5k_350",
  "overflow-menu-list-item-utility": "awsui_overflow-menu-list-item-utility_k5dlb_14a5k_365",
  "overflow-menu-control-link": "awsui_overflow-menu-control-link_k5dlb_14a5k_372",
  "overflow-menu-control-expandable-menu-trigger": "awsui_overflow-menu-control-expandable-menu-trigger_k5dlb_14a5k_375",
  "overflow-menu-list": "awsui_overflow-menu-list_k5dlb_14a5k_365",
  "overflow-menu-list-submenu": "awsui_overflow-menu-list-submenu_k5dlb_14a5k_406",
  "overflow-menu-list-item": "awsui_overflow-menu-list-item_k5dlb_14a5k_365",
  "overflow-menu-list-item-icon": "awsui_overflow-menu-list-item-icon_k5dlb_14a5k_414",
  "overflow-menu-list-item-text": "awsui_overflow-menu-list-item-text_k5dlb_14a5k_417",
  "overflow-menu-list-item-submenu": "awsui_overflow-menu-list-item-submenu_k5dlb_14a5k_424",
  "overflow-menu-list-item-dropdown-menu": "awsui_overflow-menu-list-item-dropdown-menu_k5dlb_14a5k_429",
  "overflow-menu-list-item-expandable": "awsui_overflow-menu-list-item-expandable_k5dlb_14a5k_432",
  "expanded": "awsui_expanded_k5dlb_14a5k_440"
};

// node_modules/@cloudscape-design/components/top-navigation/use-top-navigation.js
var RESPONSIVENESS_BUFFER = 20;
function useTopNavigation(_a) {
  var identity = _a.identity, search = _a.search, utilities = _a.utilities;
  var mainRef = (0, import_react.useRef)(null);
  var virtualRef = (0, import_react.useRef)(null);
  var _b = useContainerBreakpoints(["xxs", "s"]), breakpoint = _b[0], breakpointRef = _b[1];
  var hasSearch = !!search;
  var hasTitleWithLogo = identity && !!identity.logo && !!identity.title;
  var responsiveStates = (0, import_react.useMemo)(function() {
    return generateResponsiveStateKeys(utilities, hasSearch, hasTitleWithLogo);
  }, [utilities, hasSearch, hasTitleWithLogo]);
  var _c = (0, import_react.useState)(), responsiveState = _c[0], setResponsiveState = _c[1];
  var recalculateFit = (0, import_react.useCallback)(function() {
    var _a2, _b2, _c2, _d2;
    if (!(mainRef === null || mainRef === void 0 ? void 0 : mainRef.current) || !virtualRef.current) {
      setResponsiveState(responsiveStates[0]);
      return;
    }
    var availableWidth = getContentBoxWidth(mainRef.current.querySelector(".".concat(styles_css_default2["padding-box"])));
    if (availableWidth === 0) {
      setResponsiveState(responsiveStates[0]);
      return;
    }
    var sizeConfiguration = {
      hasSearch,
      availableWidth,
      fullIdentityWidth: virtualRef.current.querySelector(".".concat(styles_css_default2.identity)).getBoundingClientRect().width,
      titleWidth: (_b2 = (_a2 = virtualRef.current.querySelector(".".concat(styles_css_default2.title))) === null || _a2 === void 0 ? void 0 : _a2.getBoundingClientRect().width) !== null && _b2 !== void 0 ? _b2 : 0,
      searchSlotWidth: (_d2 = (_c2 = virtualRef.current.querySelector(".".concat(styles_css_default2.search))) === null || _c2 === void 0 ? void 0 : _c2.getBoundingClientRect().width) !== null && _d2 !== void 0 ? _d2 : 0,
      searchUtilityWidth: virtualRef.current.querySelector('[data-utility-special="search"]').getBoundingClientRect().width,
      utilitiesLeftPadding: parseFloat(getComputedStyle(virtualRef.current.querySelector(".".concat(styles_css_default2.utilities))).paddingLeft || "0px"),
      utilityWithLabelWidths: Array.prototype.slice.call(virtualRef.current.querySelectorAll('[data-utility-hide="false"]')).map(function(element) {
        return element.getBoundingClientRect().width;
      }),
      utilityWithoutLabelWidths: Array.prototype.slice.call(virtualRef.current.querySelectorAll('[data-utility-hide="true"]')).map(function(element) {
        return element.getBoundingClientRect().width;
      }),
      menuTriggerUtilityWidth: virtualRef.current.querySelector('[data-utility-special="menu-trigger"]').getBoundingClientRect().width
    };
    setResponsiveState(determineBestResponsiveState(responsiveStates, sizeConfiguration));
  }, [responsiveStates, hasSearch]);
  var _d = useContainerQuery(function() {
    recalculateFit();
  }, [recalculateFit]), containerQueryRef = _d[1];
  var onVirtualMount = (0, import_react.useCallback)(function(element) {
    virtualRef.current = element;
    recalculateFit();
  }, [recalculateFit]);
  var _e = (0, import_react.useState)(true), isSearchMinimized = _e[0], setSearchMinimized = _e[1];
  var isSearchExpanded = !isSearchMinimized && hasSearch && (responsiveState === null || responsiveState === void 0 ? void 0 : responsiveState.hideSearch);
  (0, import_react.useEffect)(function() {
    if (!(responsiveState === null || responsiveState === void 0 ? void 0 : responsiveState.hideSearch)) {
      setSearchMinimized(true);
    }
  }, [responsiveState]);
  (0, import_react.useEffect)(function() {
    var _a2, _b2;
    if (isSearchExpanded) {
      (_b2 = (_a2 = mainRef === null || mainRef === void 0 ? void 0 : mainRef.current) === null || _a2 === void 0 ? void 0 : _a2.querySelector(".".concat(styles_css_default2.search, " input"))) === null || _b2 === void 0 ? void 0 : _b2.focus();
    }
  }, [isSearchExpanded, mainRef]);
  var mergedMainRef = useMergeRefs(mainRef, containerQueryRef, breakpointRef);
  return {
    mainRef: mergedMainRef,
    virtualRef: onVirtualMount,
    responsiveState: responsiveState !== null && responsiveState !== void 0 ? responsiveState : responsiveStates[0],
    breakpoint: breakpoint !== null && breakpoint !== void 0 ? breakpoint : "default",
    isSearchExpanded: !!isSearchExpanded,
    onSearchUtilityClick: function() {
      return setSearchMinimized(function(isSearchMinimized2) {
        return !isSearchMinimized2;
      });
    }
  };
}
function getContentBoxWidth(element) {
  var style = getComputedStyle(element);
  return parseFloat(style.width || "0px") - parseFloat(style.paddingLeft || "0px") - parseFloat(style.paddingRight || "0px");
}
function generateResponsiveStateKeys(utilities, canHideSearch, canHideTitle) {
  var states = [{}];
  if (utilities.some(function(utility) {
    return utility.text;
  })) {
    states.push({ hideUtilityText: true });
  }
  if (canHideSearch) {
    states.push({
      hideUtilityText: true,
      hideSearch: true
    });
  }
  var hiddenUtilties = [];
  for (var i = 0; i < utilities.length; i++) {
    if (!utilities[i].disableUtilityCollapse) {
      hiddenUtilties.push(i);
      states.push({
        hideUtilityText: true,
        hideSearch: canHideSearch || void 0,
        hideUtilities: hiddenUtilties.length > 0 ? hiddenUtilties.slice() : void 0
      });
    }
  }
  if (canHideTitle) {
    states.push({
      hideUtilityText: true,
      hideSearch: canHideSearch || void 0,
      hideUtilities: hiddenUtilties.length > 0 ? hiddenUtilties.slice() : void 0,
      hideTitle: true
    });
  }
  return states;
}
function determineBestResponsiveState(possibleStates, sizes) {
  var hasSearch = sizes.hasSearch, availableWidth = sizes.availableWidth, utilitiesLeftPadding = sizes.utilitiesLeftPadding, fullIdentityWidth = sizes.fullIdentityWidth, titleWidth = sizes.titleWidth, searchSlotWidth = sizes.searchSlotWidth, searchUtilityWidth = sizes.searchUtilityWidth, utilityWithLabelWidths = sizes.utilityWithLabelWidths, utilityWithoutLabelWidths = sizes.utilityWithoutLabelWidths, menuTriggerUtilityWidth = sizes.menuTriggerUtilityWidth;
  var _loop_1 = function(state2) {
    var searchWidth = hasSearch ? state2.hideSearch ? searchUtilityWidth : searchSlotWidth : 0;
    var utilitiesWidth = (state2.hideUtilityText ? utilityWithoutLabelWidths : utilityWithLabelWidths).filter(function(_width, i) {
      return !state2.hideUtilities || state2.hideUtilities.indexOf(i) === -1;
    }).reduce(function(sum, width) {
      return sum + width;
    }, 0);
    var menuTriggerWidth = state2.hideUtilities ? menuTriggerUtilityWidth : 0;
    var identityWidth = state2.hideTitle ? fullIdentityWidth - titleWidth : fullIdentityWidth;
    var expectedInnerWidth = identityWidth + searchWidth + utilitiesLeftPadding + utilitiesWidth + menuTriggerWidth;
    if (expectedInnerWidth <= availableWidth - RESPONSIVENESS_BUFFER) {
      return { value: state2 };
    }
  };
  for (var _i = 0, possibleStates_1 = possibleStates; _i < possibleStates_1.length; _i++) {
    var state = possibleStates_1[_i];
    var state_1 = _loop_1(state);
    if (typeof state_1 === "object")
      return state_1.value;
  }
  return possibleStates[possibleStates.length - 1];
}

// node_modules/@cloudscape-design/components/top-navigation/parts/utility.js
var import_react4 = __toESM(require_react());

// node_modules/@cloudscape-design/components/link/internal.js
var import_react2 = __toESM(require_react());

// node_modules/@cloudscape-design/components/link/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/link/styles.scoped.css";
var styles_css_default3 = {
  "link": "awsui_link_4c84z_d1guz_93",
  "variant-secondary": "awsui_variant-secondary_4c84z_d1guz_138",
  "variant-primary": "awsui_variant-primary_4c84z_d1guz_173",
  "variant-info": "awsui_variant-info_4c84z_d1guz_208",
  "variant-value-large": "awsui_variant-value-large_4c84z_d1guz_243",
  "variant-top-navigation": "awsui_variant-top-navigation_4c84z_d1guz_277",
  "variant-recovery": "awsui_variant-recovery_4c84z_d1guz_312",
  "button": "awsui_button_4c84z_d1guz_347",
  "color-inverted": "awsui_color-inverted_4c84z_d1guz_382",
  "font-size-body-s": "awsui_font-size-body-s_4c84z_d1guz_401",
  "font-size-body-m": "awsui_font-size-body-m_4c84z_d1guz_406",
  "font-size-heading-xs": "awsui_font-size-heading-xs_4c84z_d1guz_410",
  "font-size-heading-s": "awsui_font-size-heading-s_4c84z_d1guz_414",
  "font-size-heading-m": "awsui_font-size-heading-m_4c84z_d1guz_419",
  "font-size-heading-l": "awsui_font-size-heading-l_4c84z_d1guz_424",
  "font-size-heading-xl": "awsui_font-size-heading-xl_4c84z_d1guz_429",
  "font-size-display-l": "awsui_font-size-display-l_4c84z_d1guz_434",
  "font-size-inherit": "awsui_font-size-inherit_4c84z_d1guz_439",
  "icon-wrapper": "awsui_icon-wrapper_4c84z_d1guz_445",
  "icon": "awsui_icon_4c84z_d1guz_445"
};

// node_modules/@cloudscape-design/components/link/internal.js
var InternalLink = import_react2.default.forwardRef(function(_a, ref) {
  var _b = _a.variant, variant = _b === void 0 ? "secondary" : _b, _c = _a.fontSize, fontSize = _c === void 0 ? "body-m" : _c, _d = _a.color, color = _d === void 0 ? "normal" : _d, _e = _a.external, external = _e === void 0 ? false : _e, target = _a.target, href = _a.href, rel = _a.rel, ariaLabel = _a.ariaLabel, externalIconAriaLabel = _a.externalIconAriaLabel, onFollow = _a.onFollow, children = _a.children, _f = _a.__internalRootRef, __internalRootRef = _f === void 0 ? null : _f, props = __rest(_a, ["variant", "fontSize", "color", "external", "target", "href", "rel", "ariaLabel", "externalIconAriaLabel", "onFollow", "children", "__internalRootRef"]);
  checkSafeUrl("Link", href);
  var isButton = !href;
  var specialStyles = ["top-navigation", "link", "recovery"];
  var hasSpecialStyle = specialStyles.indexOf(variant) > -1;
  var focusVisible = useFocusVisible();
  var baseProps = getBaseProps(props);
  var anchorTarget = target !== null && target !== void 0 ? target : external ? "_blank" : void 0;
  var anchorRel = rel !== null && rel !== void 0 ? rel : anchorTarget === "_blank" ? "noopener noreferrer" : void 0;
  var fireFollowEvent = function(event) {
    fireCancelableEvent(onFollow, { href, external, target: anchorTarget }, event);
  };
  var handleLinkClick = function(event) {
    if (isPlainLeftClick(event)) {
      fireFollowEvent(event);
    }
  };
  var handleButtonClick = function(event) {
    fireFollowEvent(event);
  };
  var handleButtonKeyDown = function(event) {
    if (event.keyCode === KeyCode.space || event.keyCode === KeyCode.enter) {
      event.preventDefault();
      fireFollowEvent(event);
    }
  };
  var linkRef = (0, import_react2.useRef)(null);
  var isVisualRefresh = useVisualRefresh();
  useForwardFocus(ref, linkRef);
  var applyButtonStyles = isButton && isVisualRefresh && !hasSpecialStyle;
  var sharedProps = __assign(__assign(__assign({}, focusVisible), baseProps), {
    ref: useMergeRefs(linkRef, __internalRootRef),
    className: clsx_m_default(styles_css_default3.link, baseProps.className, applyButtonStyles ? styles_css_default3.button : null, styles_css_default3[getVariantStyle(variant)], styles_css_default3[getFontSizeStyle(variant, fontSize)], styles_css_default3[getColorStyle(variant, color)]),
    "aria-label": ariaLabel
  });
  var content = import_react2.default.createElement(
    import_react2.default.Fragment,
    null,
    children,
    external && import_react2.default.createElement(
      "span",
      { className: styles_css_default3["icon-wrapper"] },
      "\xA0",
      import_react2.default.createElement(
        "span",
        { className: styles_css_default3.icon, "aria-label": externalIconAriaLabel, role: externalIconAriaLabel ? "img" : void 0 },
        import_react2.default.createElement(internal_default, { name: "external", size: "inherit" })
      )
    )
  );
  if (isButton) {
    return import_react2.default.createElement("a", __assign({}, sharedProps, { role: "button", tabIndex: 0, onKeyDown: handleButtonKeyDown, onClick: handleButtonClick }), content);
  }
  return import_react2.default.createElement("a", __assign({}, sharedProps, { target: anchorTarget, rel: anchorRel, href, onClick: handleLinkClick }), content);
});
function getVariantStyle(variant) {
  return "variant-".concat(variant.replace(/^awsui-/, ""));
}
function getFontSizeStyle(variant, fontSize) {
  switch (variant) {
    case "info":
      return "font-size-body-s";
    case "awsui-value-large":
      return "font-size-display-l";
    default:
      return "font-size-".concat(fontSize);
  }
}
function getColorStyle(variant, color) {
  return "color-".concat(variant === "info" ? "normal" : color);
}
var internal_default4 = InternalLink;

// node_modules/@cloudscape-design/components/internal/components/menu-dropdown/index.js
var import_react3 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/menu-dropdown/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/internal/components/menu-dropdown/styles.scoped.css";
var styles_css_default4 = {
  "button": "awsui_button_m5h9f_vm2i5_93",
  "expanded": "awsui_expanded_m5h9f_vm2i5_123",
  "offset-right-none": "awsui_offset-right-none_m5h9f_vm2i5_134",
  "offset-right-l": "awsui_offset-right-l_m5h9f_vm2i5_137",
  "offset-right-xxl": "awsui_offset-right-xxl_m5h9f_vm2i5_140",
  "text": "awsui_text_m5h9f_vm2i5_162",
  "icon": "awsui_icon_m5h9f_vm2i5_166"
};

// node_modules/@cloudscape-design/components/internal/components/menu-dropdown/index.js
var ButtonTrigger = import_react3.default.forwardRef(function(_a, ref) {
  var _b;
  var iconName = _a.iconName, iconUrl = _a.iconUrl, iconAlt = _a.iconAlt, iconSvg = _a.iconSvg, badge = _a.badge, ariaLabel = _a.ariaLabel, offsetRight = _a.offsetRight, disabled = _a.disabled, expanded = _a.expanded, children = _a.children, onClick = _a.onClick;
  var focusVisible = useFocusVisible();
  var hasIcon = iconName || iconUrl || iconSvg;
  return import_react3.default.createElement(
    "button",
    __assign({}, focusVisible, { ref, type: "button", className: clsx_m_default(styles_css_default4.button, styles_css_default4["offset-right-".concat(offsetRight)], (_b = {}, _b[styles_css_default4.expanded] = expanded, _b)), "aria-label": ariaLabel, "aria-expanded": !!expanded, "aria-haspopup": true, disabled, onClick: function(event) {
      event.preventDefault();
      onClick && onClick();
    } }),
    hasIcon && import_react3.default.createElement(internal_default, { className: styles_css_default4.icon, name: iconName, url: iconUrl, alt: iconAlt, svg: iconSvg, badge }),
    children && import_react3.default.createElement("span", { className: styles_css_default4.text }, children),
    children && import_react3.default.createElement(internal_default, { name: "caret-down-filled", className: expanded ? styles_css_default["rotate-up"] : styles_css_default["rotate-down"] })
  );
});
var MenuDropdown = function(_a) {
  var iconName = _a.iconName, iconUrl = _a.iconUrl, iconAlt = _a.iconAlt, iconSvg = _a.iconSvg, badge = _a.badge, ariaLabel = _a.ariaLabel, offsetRight = _a.offsetRight, children = _a.children, props = __rest(_a, ["iconName", "iconUrl", "iconAlt", "iconSvg", "badge", "ariaLabel", "offsetRight", "children"]);
  var baseProps = getBaseProps(props);
  var dropdownTrigger = function(clickHandler, ref, isDisabled, isExpanded) {
    return import_react3.default.createElement(ButtonTrigger, { ref, disabled: isDisabled, expanded: isExpanded, iconName, iconUrl, iconAlt, iconSvg, badge, ariaLabel, offsetRight, onClick: clickHandler }, children);
  };
  return import_react3.default.createElement(internal_default3, __assign({}, baseProps, props, { variant: "navigation", customTriggerBuilder: dropdownTrigger, preferCenter: true }));
};
applyDisplayName(MenuDropdown, "MenuDropdown");
var menu_dropdown_default = MenuDropdown;

// node_modules/@cloudscape-design/components/top-navigation/parts/utility.js
function Utility(_a) {
  var _b;
  var hideText = _a.hideText, definition = _a.definition, offsetRight = _a.offsetRight;
  var hasIcon = !!definition.iconName || !!definition.iconUrl || !!definition.iconAlt || !!definition.iconSvg;
  var shouldHideText = hideText && !definition.disableTextCollapse && hasIcon;
  var ariaLabel = (_b = definition.ariaLabel) !== null && _b !== void 0 ? _b : definition.text;
  if (definition.type === "button") {
    checkSafeUrl("TopNavigation", definition.href);
    if (definition.variant === "primary-button") {
      return import_react4.default.createElement(
        "span",
        { className: styles_css_default2["offset-right-".concat(offsetRight)] },
        import_react4.default.createElement(InternalButton, { variant: "primary", href: definition.href, target: definition.external ? "_blank" : void 0, onClick: definition.onClick, ariaLabel, iconName: definition.iconName, iconUrl: definition.iconUrl, iconAlt: definition.iconAlt, iconSvg: definition.iconSvg }, shouldHideText ? null : import_react4.default.createElement(
          import_react4.default.Fragment,
          null,
          definition.text,
          definition.external && import_react4.default.createElement(
            import_react4.default.Fragment,
            null,
            " ",
            import_react4.default.createElement(
              "span",
              { className: clsx_m_default(styles_css_default2["utility-button-external-icon"], styles_css_default2["offset-right-".concat(offsetRight)]), "aria-label": definition.externalIconAriaLabel, role: definition.externalIconAriaLabel ? "img" : void 0 },
              import_react4.default.createElement(internal_default, { name: "external" })
            )
          )
        ))
      );
    } else {
      return import_react4.default.createElement(
        "span",
        { className: styles_css_default2["offset-right-".concat(offsetRight)] },
        import_react4.default.createElement(
          internal_default4,
          { variant: "top-navigation", href: definition.href, target: definition.external ? "_blank" : void 0, onFollow: definition.onClick, ariaLabel },
          hasIcon && import_react4.default.createElement(internal_default, { name: definition.iconName, url: definition.iconUrl, alt: definition.iconAlt, svg: definition.iconSvg, badge: definition.badge }),
          !shouldHideText && definition.text && import_react4.default.createElement("span", { className: hasIcon ? styles_css_default2["utility-link-icon"] : void 0 }, definition.text),
          definition.external && import_react4.default.createElement(
            import_react4.default.Fragment,
            null,
            " ",
            import_react4.default.createElement(
              "span",
              { role: definition.externalIconAriaLabel ? "img" : void 0, "aria-label": definition.externalIconAriaLabel },
              import_react4.default.createElement(internal_default, { name: "external", size: "normal" })
            )
          )
        )
      );
    }
  } else if (definition.type === "menu-dropdown") {
    var title = definition.title || definition.text;
    var shouldShowTitle = shouldHideText || !definition.text;
    checkSafeUrlRecursively(definition.items);
    return import_react4.default.createElement(menu_dropdown_default, __assign({}, definition, { title: shouldShowTitle ? title : "", ariaLabel, offsetRight }), !shouldHideText && definition.text);
  }
  return null;
}
function checkSafeUrlRecursively(itemOrGroup) {
  for (var _i = 0, itemOrGroup_1 = itemOrGroup; _i < itemOrGroup_1.length; _i++) {
    var item = itemOrGroup_1[_i];
    checkSafeUrl("TopNavigation", item.href);
    if ("items" in item) {
      checkSafeUrlRecursively(item.items);
    }
  }
}

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/index.js
var import_react15 = __toESM(require_react());

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/router.js
var import_react5 = __toESM(require_react());
var defaultCtx = { state: { view: "utilities", data: null }, setState: function() {
} };
var ViewContext = (0, import_react5.createContext)(defaultCtx);
var useNavigate = function() {
  var setState = (0, import_react5.useContext)(ViewContext).setState;
  var navigate = function(view, data) {
    setState({ view, data });
  };
  return navigate;
};
var Route = function(_a) {
  var view = _a.view, element = _a.element;
  var state = (0, import_react5.useContext)(ViewContext).state;
  if (view === state.view) {
    if (typeof element === "function") {
      return element(state.data);
    }
    return import_react5.default.createElement(import_react5.default.Fragment, null, element);
  }
  return null;
};
var Router = function(_a) {
  var children = _a.children;
  var _b = (0, import_react5.useState)({ view: "utilities", data: null }), state = _b[0], setState = _b[1];
  return import_react5.default.createElement(ViewContext.Provider, { value: { state, setState } }, children);
};
var router_default = Router;

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/views/utilities.js
var import_react13 = __toESM(require_react());

// node_modules/react-focus-lock/dist/es2015/Combination.js
var React12 = __toESM(require_react());

// node_modules/react-focus-lock/dist/es2015/Lock.js
var React9 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());

// node_modules/focus-lock/dist/es2015/constants.js
var FOCUS_GROUP = "data-focus-lock";
var FOCUS_DISABLED = "data-focus-lock-disabled";
var FOCUS_ALLOW = "data-no-focus-lock";
var FOCUS_AUTO = "data-autofocus-inside";

// node_modules/use-callback-ref/dist/es2015/assignRef.js
function assignRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
  return ref;
}

// node_modules/use-callback-ref/dist/es2015/useRef.js
var import_react6 = __toESM(require_react());
function useCallbackRef(initialValue, callback) {
  var ref = (0, import_react6.useState)(function() {
    return {
      value: initialValue,
      callback,
      facade: {
        get current() {
          return ref.value;
        },
        set current(value) {
          var last = ref.value;
          if (last !== value) {
            ref.value = value;
            ref.callback(value, last);
          }
        }
      }
    };
  })[0];
  ref.callback = callback;
  return ref.facade;
}

// node_modules/use-callback-ref/dist/es2015/useMergeRef.js
function useMergeRefs2(refs, defaultValue) {
  return useCallbackRef(defaultValue || null, function(newValue) {
    return refs.forEach(function(ref) {
      return assignRef(ref, newValue);
    });
  });
}

// node_modules/react-focus-lock/dist/es2015/Lock.js
var import_react9 = __toESM(require_react());

// node_modules/react-focus-lock/dist/es2015/FocusGuard.js
var React5 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var hiddenGuard = {
  width: "1px",
  height: "0px",
  padding: 0,
  overflow: "hidden",
  position: "fixed",
  top: "1px",
  left: "1px"
};
var InFocusGuard = function InFocusGuard2(_ref2) {
  var children = _ref2.children;
  return React5.createElement(React5.Fragment, null, React5.createElement("div", {
    key: "guard-first",
    "data-focus-guard": true,
    "data-focus-auto-guard": true,
    style: hiddenGuard
  }), children, children && React5.createElement("div", {
    key: "guard-last",
    "data-focus-guard": true,
    "data-focus-auto-guard": true,
    style: hiddenGuard
  }));
};
InFocusGuard.propTypes = true ? {
  children: import_prop_types.default.node
} : {};
InFocusGuard.defaultProps = {
  children: null
};

// node_modules/use-sidecar/dist/es2015/hoc.js
var React6 = __toESM(require_react());

// node_modules/use-sidecar/dist/es2015/hook.js
var import_react7 = __toESM(require_react());

// node_modules/use-sidecar/dist/es2015/medium.js
function ItoI(a) {
  return a;
}
function innerCreateMedium(defaults, middleware) {
  if (middleware === void 0) {
    middleware = ItoI;
  }
  var buffer = [];
  var assigned = false;
  var medium = {
    read: function() {
      if (assigned) {
        throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
      }
      if (buffer.length) {
        return buffer[buffer.length - 1];
      }
      return defaults;
    },
    useMedium: function(data) {
      var item = middleware(data, assigned);
      buffer.push(item);
      return function() {
        buffer = buffer.filter(function(x) {
          return x !== item;
        });
      };
    },
    assignSyncMedium: function(cb) {
      assigned = true;
      while (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb);
      }
      buffer = {
        push: function(x) {
          return cb(x);
        },
        filter: function() {
          return buffer;
        }
      };
    },
    assignMedium: function(cb) {
      assigned = true;
      var pendingQueue = [];
      if (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb);
        pendingQueue = buffer;
      }
      var executeQueue = function() {
        var cbs2 = pendingQueue;
        pendingQueue = [];
        cbs2.forEach(cb);
      };
      var cycle = function() {
        return Promise.resolve().then(executeQueue);
      };
      cycle();
      buffer = {
        push: function(x) {
          pendingQueue.push(x);
          cycle();
        },
        filter: function(filter) {
          pendingQueue = pendingQueue.filter(filter);
          return buffer;
        }
      };
    }
  };
  return medium;
}
function createMedium(defaults, middleware) {
  if (middleware === void 0) {
    middleware = ItoI;
  }
  return innerCreateMedium(defaults, middleware);
}
function createSidecarMedium(options) {
  if (options === void 0) {
    options = {};
  }
  var medium = innerCreateMedium(null);
  medium.options = __assign({ async: true, ssr: false }, options);
  return medium;
}

// node_modules/use-sidecar/dist/es2015/renderProp.js
var React7 = __toESM(require_react());
var import_react8 = __toESM(require_react());

// node_modules/use-sidecar/dist/es2015/exports.js
var React8 = __toESM(require_react());
var SideCar = function(_a) {
  var sideCar2 = _a.sideCar, rest = __rest(_a, ["sideCar"]);
  if (!sideCar2) {
    throw new Error("Sidecar: please provide `sideCar` property to import the right car");
  }
  var Target = sideCar2.read();
  if (!Target) {
    throw new Error("Sidecar medium not found");
  }
  return React8.createElement(Target, __assign({}, rest));
};
SideCar.isSideCarExport = true;

// node_modules/react-focus-lock/dist/es2015/medium.js
var mediumFocus = createMedium({}, function(_ref2) {
  var target = _ref2.target, currentTarget = _ref2.currentTarget;
  return {
    target,
    currentTarget
  };
});
var mediumBlur = createMedium();
var mediumEffect = createMedium();
var mediumSidecar = createSidecarMedium({
  async: true
});

// node_modules/react-focus-lock/dist/es2015/Lock.js
var emptyArray = [];
var FocusLock = React9.forwardRef(function FocusLockUI(props, parentRef) {
  var _extends2;
  var _React$useState = React9.useState(), realObserved = _React$useState[0], setObserved = _React$useState[1];
  var observed = React9.useRef();
  var isActive = React9.useRef(false);
  var originalFocusedElement = React9.useRef(null);
  var children = props.children, disabled = props.disabled, noFocusGuards = props.noFocusGuards, persistentFocus = props.persistentFocus, crossFrame = props.crossFrame, autoFocus = props.autoFocus, allowTextSelection = props.allowTextSelection, group = props.group, className = props.className, whiteList = props.whiteList, hasPositiveIndices = props.hasPositiveIndices, _props$shards = props.shards, shards = _props$shards === void 0 ? emptyArray : _props$shards, _props$as = props.as, Container = _props$as === void 0 ? "div" : _props$as, _props$lockProps = props.lockProps, containerProps = _props$lockProps === void 0 ? {} : _props$lockProps, SideCar2 = props.sideCar, shouldReturnFocus = props.returnFocus, focusOptions = props.focusOptions, onActivationCallback = props.onActivation, onDeactivationCallback = props.onDeactivation;
  var _React$useState2 = React9.useState({}), id = _React$useState2[0];
  var onActivation = React9.useCallback(function() {
    originalFocusedElement.current = originalFocusedElement.current || document && document.activeElement;
    if (observed.current && onActivationCallback) {
      onActivationCallback(observed.current);
    }
    isActive.current = true;
  }, [onActivationCallback]);
  var onDeactivation = React9.useCallback(function() {
    isActive.current = false;
    if (onDeactivationCallback) {
      onDeactivationCallback(observed.current);
    }
  }, [onDeactivationCallback]);
  (0, import_react9.useEffect)(function() {
    if (!disabled) {
      originalFocusedElement.current = null;
    }
  }, []);
  var returnFocus = React9.useCallback(function(allowDefer) {
    var returnFocusTo = originalFocusedElement.current;
    if (returnFocusTo && returnFocusTo.focus) {
      var howToReturnFocus = typeof shouldReturnFocus === "function" ? shouldReturnFocus(returnFocusTo) : shouldReturnFocus;
      if (howToReturnFocus) {
        var returnFocusOptions = typeof howToReturnFocus === "object" ? howToReturnFocus : void 0;
        originalFocusedElement.current = null;
        if (allowDefer) {
          Promise.resolve().then(function() {
            return returnFocusTo.focus(returnFocusOptions);
          });
        } else {
          returnFocusTo.focus(returnFocusOptions);
        }
      }
    }
  }, [shouldReturnFocus]);
  var onFocus3 = React9.useCallback(function(event) {
    if (isActive.current) {
      mediumFocus.useMedium(event);
    }
  }, []);
  var onBlur3 = mediumBlur.useMedium;
  var setObserveNode = React9.useCallback(function(newObserved) {
    if (observed.current !== newObserved) {
      observed.current = newObserved;
      setObserved(newObserved);
    }
  }, []);
  if (true) {
    if (typeof allowTextSelection !== "undefined") {
      console.warn("React-Focus-Lock: allowTextSelection is deprecated and enabled by default");
    }
    React9.useEffect(function() {
      if (!observed.current) {
        console.error("FocusLock: could not obtain ref to internal node");
      }
    }, []);
  }
  var lockProps = _extends((_extends2 = {}, _extends2[FOCUS_DISABLED] = disabled && "disabled", _extends2[FOCUS_GROUP] = group, _extends2), containerProps);
  var hasLeadingGuards = noFocusGuards !== true;
  var hasTailingGuards = hasLeadingGuards && noFocusGuards !== "tail";
  var mergedRef = useMergeRefs2([parentRef, setObserveNode]);
  return React9.createElement(React9.Fragment, null, hasLeadingGuards && [
    React9.createElement("div", {
      key: "guard-first",
      "data-focus-guard": true,
      tabIndex: disabled ? -1 : 0,
      style: hiddenGuard
    }),
    hasPositiveIndices ? React9.createElement("div", {
      key: "guard-nearest",
      "data-focus-guard": true,
      tabIndex: disabled ? -1 : 1,
      style: hiddenGuard
    }) : null
  ], !disabled && React9.createElement(SideCar2, {
    id,
    sideCar: mediumSidecar,
    observed: realObserved,
    disabled,
    persistentFocus,
    crossFrame,
    autoFocus,
    whiteList,
    shards,
    onActivation,
    onDeactivation,
    returnFocus,
    focusOptions
  }), React9.createElement(Container, _extends({
    ref: mergedRef
  }, lockProps, {
    className,
    onBlur: onBlur3,
    onFocus: onFocus3
  }), children), hasTailingGuards && React9.createElement("div", {
    "data-focus-guard": true,
    tabIndex: disabled ? -1 : 0,
    style: hiddenGuard
  }));
});
FocusLock.propTypes = true ? {
  children: import_prop_types2.node,
  disabled: import_prop_types2.bool,
  returnFocus: (0, import_prop_types2.oneOfType)([import_prop_types2.bool, import_prop_types2.object, import_prop_types2.func]),
  focusOptions: import_prop_types2.object,
  noFocusGuards: import_prop_types2.bool,
  hasPositiveIndices: import_prop_types2.bool,
  allowTextSelection: import_prop_types2.bool,
  autoFocus: import_prop_types2.bool,
  persistentFocus: import_prop_types2.bool,
  crossFrame: import_prop_types2.bool,
  group: import_prop_types2.string,
  className: import_prop_types2.string,
  whiteList: import_prop_types2.func,
  shards: (0, import_prop_types2.arrayOf)(import_prop_types2.any),
  as: (0, import_prop_types2.oneOfType)([import_prop_types2.string, import_prop_types2.func, import_prop_types2.object]),
  lockProps: import_prop_types2.object,
  onActivation: import_prop_types2.func,
  onDeactivation: import_prop_types2.func,
  sideCar: import_prop_types2.any.isRequired
} : {};
FocusLock.defaultProps = {
  children: void 0,
  disabled: false,
  returnFocus: false,
  focusOptions: void 0,
  noFocusGuards: false,
  autoFocus: true,
  persistentFocus: false,
  crossFrame: true,
  hasPositiveIndices: void 0,
  allowTextSelection: void 0,
  group: void 0,
  className: void 0,
  whiteList: void 0,
  shards: void 0,
  as: "div",
  lockProps: {},
  onActivation: void 0,
  onDeactivation: void 0
};
var Lock_default = FocusLock;

// node_modules/react-focus-lock/dist/es2015/Trap.js
var React11 = __toESM(require_react());
var import_prop_types3 = __toESM(require_prop_types());

// node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

// node_modules/react-clientside-effect/lib/index.es.js
var import_react10 = __toESM(require_react());
function withSideEffect(reducePropsToState2, handleStateChangeOnClient2) {
  if (true) {
    if (typeof reducePropsToState2 !== "function") {
      throw new Error("Expected reducePropsToState to be a function.");
    }
    if (typeof handleStateChangeOnClient2 !== "function") {
      throw new Error("Expected handleStateChangeOnClient to be a function.");
    }
  }
  function getDisplayName(WrappedComponent) {
    return WrappedComponent.displayName || WrappedComponent.name || "Component";
  }
  return function wrap(WrappedComponent) {
    if (true) {
      if (typeof WrappedComponent !== "function") {
        throw new Error("Expected WrappedComponent to be a React component.");
      }
    }
    var mountedInstances = [];
    var state;
    function emitChange() {
      state = reducePropsToState2(mountedInstances.map(function(instance) {
        return instance.props;
      }));
      handleStateChangeOnClient2(state);
    }
    var SideEffect = function(_PureComponent) {
      _inheritsLoose(SideEffect2, _PureComponent);
      function SideEffect2() {
        return _PureComponent.apply(this, arguments) || this;
      }
      SideEffect2.peek = function peek() {
        return state;
      };
      var _proto = SideEffect2.prototype;
      _proto.componentDidMount = function componentDidMount() {
        mountedInstances.push(this);
        emitChange();
      };
      _proto.componentDidUpdate = function componentDidUpdate() {
        emitChange();
      };
      _proto.componentWillUnmount = function componentWillUnmount() {
        var index = mountedInstances.indexOf(this);
        mountedInstances.splice(index, 1);
        emitChange();
      };
      _proto.render = function render() {
        return import_react10.default.createElement(WrappedComponent, this.props);
      };
      return SideEffect2;
    }(import_react10.PureComponent);
    _defineProperty(SideEffect, "displayName", "SideEffect(" + getDisplayName(WrappedComponent) + ")");
    return SideEffect;
  };
}
var index_es_default = withSideEffect;

// node_modules/focus-lock/dist/es2015/utils/array.js
var toArray = function(a) {
  var ret = Array(a.length);
  for (var i = 0; i < a.length; ++i) {
    ret[i] = a[i];
  }
  return ret;
};
var asArray = function(a) {
  return Array.isArray(a) ? a : [a];
};

// node_modules/focus-lock/dist/es2015/utils/all-affected.js
var filterNested = function(nodes) {
  var contained = /* @__PURE__ */ new Set();
  var l = nodes.length;
  for (var i = 0; i < l; i += 1) {
    for (var j = i + 1; j < l; j += 1) {
      var position = nodes[i].compareDocumentPosition(nodes[j]);
      if ((position & Node.DOCUMENT_POSITION_CONTAINED_BY) > 0) {
        contained.add(j);
      }
      if ((position & Node.DOCUMENT_POSITION_CONTAINS) > 0) {
        contained.add(i);
      }
    }
  }
  return nodes.filter(function(_, index) {
    return !contained.has(index);
  });
};
var getTopParent = function(node2) {
  return node2.parentNode ? getTopParent(node2.parentNode) : node2;
};
var getAllAffectedNodes = function(node2) {
  var nodes = asArray(node2);
  return nodes.filter(Boolean).reduce(function(acc, currentNode) {
    var group = currentNode.getAttribute(FOCUS_GROUP);
    acc.push.apply(acc, group ? filterNested(toArray(getTopParent(currentNode).querySelectorAll("[".concat(FOCUS_GROUP, '="').concat(group, '"]:not([').concat(FOCUS_DISABLED, '="disabled"])')))) : [currentNode]);
    return acc;
  }, []);
};

// node_modules/focus-lock/dist/es2015/utils/getActiveElement.js
var getActiveElement = function() {
  return document.activeElement ? document.activeElement.shadowRoot ? document.activeElement.shadowRoot.activeElement : document.activeElement : void 0;
};

// node_modules/focus-lock/dist/es2015/focusInside.js
var focusInFrame = function(frame) {
  return frame === document.activeElement;
};
var focusInsideIframe = function(topNode) {
  return Boolean(toArray(topNode.querySelectorAll("iframe")).some(function(node2) {
    return focusInFrame(node2);
  }));
};
var focusInside = function(topNode) {
  var activeElement = document && getActiveElement();
  if (!activeElement || activeElement.dataset && activeElement.dataset.focusGuard) {
    return false;
  }
  return getAllAffectedNodes(topNode).reduce(function(result, node2) {
    return result || node2.contains(activeElement) || focusInsideIframe(node2);
  }, false);
};

// node_modules/focus-lock/dist/es2015/focusIsHidden.js
var focusIsHidden = function() {
  var activeElement = document && getActiveElement();
  if (!activeElement) {
    return false;
  }
  return toArray(document.querySelectorAll("[".concat(FOCUS_ALLOW, "]"))).some(function(node2) {
    return node2.contains(activeElement);
  });
};

// node_modules/focus-lock/dist/es2015/utils/is.js
var isElementHidden = function(node2) {
  if (node2.nodeType !== Node.ELEMENT_NODE) {
    return false;
  }
  var computedStyle = window.getComputedStyle(node2, null);
  if (!computedStyle || !computedStyle.getPropertyValue) {
    return false;
  }
  return computedStyle.getPropertyValue("display") === "none" || computedStyle.getPropertyValue("visibility") === "hidden";
};
var isVisibleUncached = function(node2, checkParent) {
  return !node2 || node2 === document || node2 && node2.nodeType === Node.DOCUMENT_NODE || !isElementHidden(node2) && checkParent(node2.parentNode && node2.parentNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? node2.parentNode.host : node2.parentNode);
};
var isVisibleCached = function(visibilityCache, node2) {
  var cached = visibilityCache.get(node2);
  if (cached !== void 0) {
    return cached;
  }
  var result = isVisibleUncached(node2, isVisibleCached.bind(void 0, visibilityCache));
  visibilityCache.set(node2, result);
  return result;
};
var getDataset = function(node2) {
  return node2.dataset;
};
var isHTMLButtonElement = function(node2) {
  return node2.tagName === "BUTTON";
};
var isHTMLInputElement = function(node2) {
  return node2.tagName === "INPUT";
};
var isRadioElement = function(node2) {
  return isHTMLInputElement(node2) && node2.type === "radio";
};
var notHiddenInput = function(node2) {
  return !((isHTMLInputElement(node2) || isHTMLButtonElement(node2)) && (node2.type === "hidden" || node2.disabled)) && !node2.ariaDisabled;
};
var isGuard = function(node2) {
  var _a;
  return Boolean(node2 && ((_a = getDataset(node2)) === null || _a === void 0 ? void 0 : _a.focusGuard));
};
var isNotAGuard = function(node2) {
  return !isGuard(node2);
};
var isDefined = function(x) {
  return Boolean(x);
};

// node_modules/focus-lock/dist/es2015/utils/correctFocus.js
var findSelectedRadio = function(node2, nodes) {
  return nodes.filter(isRadioElement).filter(function(el) {
    return el.name === node2.name;
  }).filter(function(el) {
    return el.checked;
  })[0] || node2;
};
var correctNode = function(node2, nodes) {
  if (isRadioElement(node2) && node2.name) {
    return findSelectedRadio(node2, nodes);
  }
  return node2;
};
var correctNodes = function(nodes) {
  var resultSet = /* @__PURE__ */ new Set();
  nodes.forEach(function(node2) {
    return resultSet.add(correctNode(node2, nodes));
  });
  return nodes.filter(function(node2) {
    return resultSet.has(node2);
  });
};

// node_modules/focus-lock/dist/es2015/utils/firstFocus.js
var pickFirstFocus = function(nodes) {
  if (nodes[0] && nodes.length > 1) {
    return correctNode(nodes[0], nodes);
  }
  return nodes[0];
};
var pickFocusable = function(nodes, index) {
  if (nodes.length > 1) {
    return nodes.indexOf(correctNode(nodes[index], nodes));
  }
  return index;
};

// node_modules/focus-lock/dist/es2015/solver.js
var NEW_FOCUS = "NEW_FOCUS";
var newFocus = function(innerNodes, outerNodes, activeElement, lastNode) {
  var cnt = innerNodes.length;
  var firstFocus = innerNodes[0];
  var lastFocus = innerNodes[cnt - 1];
  var isOnGuard = isGuard(activeElement);
  if (activeElement && innerNodes.indexOf(activeElement) >= 0) {
    return void 0;
  }
  var activeIndex = activeElement !== void 0 ? outerNodes.indexOf(activeElement) : -1;
  var lastIndex = lastNode ? outerNodes.indexOf(lastNode) : activeIndex;
  var lastNodeInside = lastNode ? innerNodes.indexOf(lastNode) : -1;
  var indexDiff = activeIndex - lastIndex;
  var firstNodeIndex = outerNodes.indexOf(firstFocus);
  var lastNodeIndex = outerNodes.indexOf(lastFocus);
  var correctedNodes = correctNodes(outerNodes);
  var correctedIndex = activeElement !== void 0 ? correctedNodes.indexOf(activeElement) : -1;
  var correctedIndexDiff = correctedIndex - (lastNode ? correctedNodes.indexOf(lastNode) : activeIndex);
  var returnFirstNode = pickFocusable(innerNodes, 0);
  var returnLastNode = pickFocusable(innerNodes, cnt - 1);
  if (activeIndex === -1 || lastNodeInside === -1) {
    return NEW_FOCUS;
  }
  if (!indexDiff && lastNodeInside >= 0) {
    return lastNodeInside;
  }
  if (activeIndex <= firstNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {
    return returnLastNode;
  }
  if (activeIndex >= lastNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {
    return returnFirstNode;
  }
  if (indexDiff && Math.abs(correctedIndexDiff) > 1) {
    return lastNodeInside;
  }
  if (activeIndex <= firstNodeIndex) {
    return returnLastNode;
  }
  if (activeIndex > lastNodeIndex) {
    return returnFirstNode;
  }
  if (indexDiff) {
    if (Math.abs(indexDiff) > 1) {
      return lastNodeInside;
    }
    return (cnt + lastNodeInside + indexDiff) % cnt;
  }
  return void 0;
};

// node_modules/focus-lock/dist/es2015/utils/tabOrder.js
var tabSort = function(a, b) {
  var tabDiff = a.tabIndex - b.tabIndex;
  var indexDiff = a.index - b.index;
  if (tabDiff) {
    if (!a.tabIndex) {
      return 1;
    }
    if (!b.tabIndex) {
      return -1;
    }
  }
  return tabDiff || indexDiff;
};
var orderByTabIndex = function(nodes, filterNegative, keepGuards) {
  return toArray(nodes).map(function(node2, index) {
    return {
      node: node2,
      index,
      tabIndex: keepGuards && node2.tabIndex === -1 ? (node2.dataset || {}).focusGuard ? 0 : -1 : node2.tabIndex
    };
  }).filter(function(data) {
    return !filterNegative || data.tabIndex >= 0;
  }).sort(tabSort);
};

// node_modules/focus-lock/dist/es2015/utils/tabbables.js
var tabbables = [
  "button:enabled",
  "select:enabled",
  "textarea:enabled",
  "input:enabled",
  "a[href]",
  "area[href]",
  "summary",
  "iframe",
  "object",
  "embed",
  "audio[controls]",
  "video[controls]",
  "[tabindex]",
  "[contenteditable]",
  "[autofocus]"
];

// node_modules/focus-lock/dist/es2015/utils/tabUtils.js
var queryTabbables = tabbables.join(",");
var queryGuardTabbables = "".concat(queryTabbables, ", [data-focus-guard]");
var getFocusables = function(parents, withGuards) {
  return parents.reduce(function(acc, parent) {
    return acc.concat(toArray(parent.querySelectorAll(withGuards ? queryGuardTabbables : queryTabbables)), parent.parentNode ? toArray(parent.parentNode.querySelectorAll(queryTabbables)).filter(function(node2) {
      return node2 === parent;
    }) : []);
  }, []);
};
var getParentAutofocusables = function(parent) {
  var parentFocus = parent.querySelectorAll("[".concat(FOCUS_AUTO, "]"));
  return toArray(parentFocus).map(function(node2) {
    return getFocusables([node2]);
  }).reduce(function(acc, nodes) {
    return acc.concat(nodes);
  }, []);
};

// node_modules/focus-lock/dist/es2015/utils/DOMutils.js
var filterFocusable = function(nodes, visibilityCache) {
  return toArray(nodes).filter(function(node2) {
    return isVisibleCached(visibilityCache, node2);
  }).filter(function(node2) {
    return notHiddenInput(node2);
  });
};
var getTabbableNodes = function(topNodes, visibilityCache, withGuards) {
  return orderByTabIndex(filterFocusable(getFocusables(topNodes, withGuards), visibilityCache), true, withGuards);
};
var getAllTabbableNodes = function(topNodes, visibilityCache) {
  return orderByTabIndex(filterFocusable(getFocusables(topNodes), visibilityCache), false);
};
var parentAutofocusables = function(topNode, visibilityCache) {
  return filterFocusable(getParentAutofocusables(topNode), visibilityCache);
};

// node_modules/focus-lock/dist/es2015/utils/parenting.js
var getParents = function(node2, parents) {
  if (parents === void 0) {
    parents = [];
  }
  parents.push(node2);
  if (node2.parentNode) {
    getParents(node2.parentNode, parents);
  }
  return parents;
};
var getCommonParent = function(nodeA, nodeB) {
  var parentsA = getParents(nodeA);
  var parentsB = getParents(nodeB);
  for (var i = 0; i < parentsA.length; i += 1) {
    var currentParent = parentsA[i];
    if (parentsB.indexOf(currentParent) >= 0) {
      return currentParent;
    }
  }
  return false;
};
var getTopCommonParent = function(baseActiveElement, leftEntry, rightEntries) {
  var activeElements = asArray(baseActiveElement);
  var leftEntries = asArray(leftEntry);
  var activeElement = activeElements[0];
  var topCommon = false;
  leftEntries.filter(Boolean).forEach(function(entry) {
    topCommon = getCommonParent(topCommon || entry, entry) || topCommon;
    rightEntries.filter(Boolean).forEach(function(subEntry) {
      var common = getCommonParent(activeElement, subEntry);
      if (common) {
        if (!topCommon || common.contains(topCommon)) {
          topCommon = common;
        } else {
          topCommon = getCommonParent(common, topCommon);
        }
      }
    });
  });
  return topCommon;
};
var allParentAutofocusables = function(entries, visibilityCache) {
  return entries.reduce(function(acc, node2) {
    return acc.concat(parentAutofocusables(node2, visibilityCache));
  }, []);
};

// node_modules/focus-lock/dist/es2015/focusMerge.js
var findAutoFocused = function(autoFocusables) {
  return function(node2) {
    var _a;
    return node2.autofocus || !!((_a = getDataset(node2)) === null || _a === void 0 ? void 0 : _a.autofocus) || autoFocusables.indexOf(node2) >= 0;
  };
};
var reorderNodes = function(srcNodes, dstNodes) {
  var remap = /* @__PURE__ */ new Map();
  dstNodes.forEach(function(entity) {
    return remap.set(entity.node, entity);
  });
  return srcNodes.map(function(node2) {
    return remap.get(node2);
  }).filter(isDefined);
};
var getFocusMerge = function(topNode, lastNode) {
  var activeElement = document && getActiveElement();
  var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);
  var commonParent = getTopCommonParent(activeElement || topNode, topNode, entries);
  var visibilityCache = /* @__PURE__ */ new Map();
  var anyFocusable = getAllTabbableNodes(entries, visibilityCache);
  var innerElements = getTabbableNodes(entries, visibilityCache).filter(function(_a) {
    var node2 = _a.node;
    return isNotAGuard(node2);
  });
  if (!innerElements[0]) {
    innerElements = anyFocusable;
    if (!innerElements[0]) {
      return void 0;
    }
  }
  var outerNodes = getAllTabbableNodes([commonParent], visibilityCache).map(function(_a) {
    var node2 = _a.node;
    return node2;
  });
  var orderedInnerElements = reorderNodes(outerNodes, innerElements);
  var innerNodes = orderedInnerElements.map(function(_a) {
    var node2 = _a.node;
    return node2;
  });
  var newId = newFocus(innerNodes, outerNodes, activeElement, lastNode);
  if (newId === NEW_FOCUS) {
    var autoFocusable = anyFocusable.map(function(_a) {
      var node2 = _a.node;
      return node2;
    }).filter(findAutoFocused(allParentAutofocusables(entries, visibilityCache)));
    return {
      node: autoFocusable && autoFocusable.length ? pickFirstFocus(autoFocusable) : pickFirstFocus(innerNodes)
    };
  }
  if (newId === void 0) {
    return newId;
  }
  return orderedInnerElements[newId];
};

// node_modules/focus-lock/dist/es2015/focusables.js
var getFocusabledIn = function(topNode) {
  var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);
  var commonParent = getTopCommonParent(topNode, topNode, entries);
  var visibilityCache = /* @__PURE__ */ new Map();
  var outerNodes = getTabbableNodes([commonParent], visibilityCache, true);
  var innerElements = getTabbableNodes(entries, visibilityCache).filter(function(_a) {
    var node2 = _a.node;
    return isNotAGuard(node2);
  }).map(function(_a) {
    var node2 = _a.node;
    return node2;
  });
  return outerNodes.map(function(_a) {
    var node2 = _a.node, index = _a.index;
    return {
      node: node2,
      index,
      lockItem: innerElements.indexOf(node2) >= 0,
      guard: isGuard(node2)
    };
  });
};

// node_modules/focus-lock/dist/es2015/setFocus.js
var focusOn = function(target, focusOptions) {
  if ("focus" in target) {
    target.focus(focusOptions);
  }
  if ("contentWindow" in target && target.contentWindow) {
    target.contentWindow.focus();
  }
};
var guardCount = 0;
var lockDisabled = false;
var setFocus = function(topNode, lastNode, options) {
  if (options === void 0) {
    options = {};
  }
  var focusable = getFocusMerge(topNode, lastNode);
  if (lockDisabled) {
    return;
  }
  if (focusable) {
    if (guardCount > 2) {
      console.error("FocusLock: focus-fighting detected. Only one focus management system could be active. See https://github.com/theKashey/focus-lock/#focus-fighting");
      lockDisabled = true;
      setTimeout(function() {
        lockDisabled = false;
      }, 1);
      return;
    }
    guardCount++;
    focusOn(focusable.node, options.focusOptions);
    guardCount--;
  }
};

// node_modules/focus-lock/dist/es2015/index.js
var es2015_default = setFocus;

// node_modules/react-focus-lock/dist/es2015/util.js
function deferAction(action) {
  var _window = window, setImmediate = _window.setImmediate;
  if (typeof setImmediate !== "undefined") {
    setImmediate(action);
  } else {
    setTimeout(action, 1);
  }
}
var inlineProp = function inlineProp2(name, value) {
  var obj = {};
  obj[name] = value;
  return obj;
};

// node_modules/react-focus-lock/dist/es2015/Trap.js
var focusOnBody = function focusOnBody2() {
  return document && document.activeElement === document.body;
};
var isFreeFocus = function isFreeFocus2() {
  return focusOnBody() || focusIsHidden();
};
var lastActiveTrap = null;
var lastActiveFocus = null;
var lastPortaledElement = null;
var focusWasOutsideWindow = false;
var defaultWhitelist = function defaultWhitelist2() {
  return true;
};
var focusWhitelisted = function focusWhitelisted2(activeElement) {
  return (lastActiveTrap.whiteList || defaultWhitelist)(activeElement);
};
var recordPortal = function recordPortal2(observerNode, portaledElement) {
  lastPortaledElement = {
    observerNode,
    portaledElement
  };
};
var focusIsPortaledPair = function focusIsPortaledPair2(element) {
  return lastPortaledElement && lastPortaledElement.portaledElement === element;
};
function autoGuard(startIndex, end, step, allNodes) {
  var lastGuard = null;
  var i = startIndex;
  do {
    var item = allNodes[i];
    if (item.guard) {
      if (item.node.dataset.focusAutoGuard) {
        lastGuard = item;
      }
    } else if (item.lockItem) {
      if (i !== startIndex) {
        return;
      }
      lastGuard = null;
    } else {
      break;
    }
  } while ((i += step) !== end);
  if (lastGuard) {
    lastGuard.node.tabIndex = 0;
  }
}
var extractRef = function extractRef2(ref) {
  return ref && "current" in ref ? ref.current : ref;
};
var focusWasOutside = function focusWasOutside2(crossFrameOption) {
  if (crossFrameOption) {
    return Boolean(focusWasOutsideWindow);
  }
  return focusWasOutsideWindow === "meanwhile";
};
var checkInHost = function checkInHost2(check, el, boundary) {
  return el && (el.host === check && (!el.activeElement || boundary.contains(el.activeElement)) || el.parentNode && checkInHost2(check, el.parentNode, boundary));
};
var withinHost = function withinHost2(activeElement, workingArea) {
  return workingArea.some(function(area) {
    return checkInHost(activeElement, area, area);
  });
};
var activateTrap = function activateTrap2() {
  var result = false;
  if (lastActiveTrap) {
    var _lastActiveTrap = lastActiveTrap, observed = _lastActiveTrap.observed, persistentFocus = _lastActiveTrap.persistentFocus, autoFocus = _lastActiveTrap.autoFocus, shards = _lastActiveTrap.shards, crossFrame = _lastActiveTrap.crossFrame, focusOptions = _lastActiveTrap.focusOptions;
    var workingNode = observed || lastPortaledElement && lastPortaledElement.portaledElement;
    var activeElement = document && document.activeElement;
    if (workingNode) {
      var workingArea = [workingNode].concat(shards.map(extractRef).filter(Boolean));
      if (!activeElement || focusWhitelisted(activeElement)) {
        if (persistentFocus || focusWasOutside(crossFrame) || !isFreeFocus() || !lastActiveFocus && autoFocus) {
          if (workingNode && !(focusInside(workingArea) || activeElement && withinHost(activeElement, workingArea) || focusIsPortaledPair(activeElement, workingNode))) {
            if (document && !lastActiveFocus && activeElement && !autoFocus) {
              if (activeElement.blur) {
                activeElement.blur();
              }
              document.body.focus();
            } else {
              result = es2015_default(workingArea, lastActiveFocus, {
                focusOptions
              });
              lastPortaledElement = {};
            }
          }
          focusWasOutsideWindow = false;
          lastActiveFocus = document && document.activeElement;
        }
      }
      if (document) {
        var newActiveElement = document && document.activeElement;
        var allNodes = getFocusabledIn(workingArea);
        var focusedIndex = allNodes.map(function(_ref2) {
          var node2 = _ref2.node;
          return node2;
        }).indexOf(newActiveElement);
        if (focusedIndex > -1) {
          allNodes.filter(function(_ref2) {
            var guard = _ref2.guard, node2 = _ref2.node;
            return guard && node2.dataset.focusAutoGuard;
          }).forEach(function(_ref3) {
            var node2 = _ref3.node;
            return node2.removeAttribute("tabIndex");
          });
          autoGuard(focusedIndex, allNodes.length, 1, allNodes);
          autoGuard(focusedIndex, -1, -1, allNodes);
        }
      }
    }
  }
  return result;
};
var onTrap = function onTrap2(event) {
  if (activateTrap() && event) {
    event.stopPropagation();
    event.preventDefault();
  }
};
var onBlur = function onBlur2() {
  return deferAction(activateTrap);
};
var onFocus = function onFocus2(event) {
  var source = event.target;
  var currentNode = event.currentTarget;
  if (!currentNode.contains(source)) {
    recordPortal(currentNode, source);
  }
};
var FocusWatcher = function FocusWatcher2() {
  return null;
};
var FocusTrap = function FocusTrap2(_ref4) {
  var children = _ref4.children;
  return React11.createElement("div", {
    onBlur,
    onFocus
  }, children);
};
FocusTrap.propTypes = true ? {
  children: import_prop_types3.default.node.isRequired
} : {};
var onWindowBlur = function onWindowBlur2() {
  focusWasOutsideWindow = "just";
  setTimeout(function() {
    focusWasOutsideWindow = "meanwhile";
  }, 0);
};
var attachHandler = function attachHandler2() {
  document.addEventListener("focusin", onTrap);
  document.addEventListener("focusout", onBlur);
  window.addEventListener("blur", onWindowBlur);
};
var detachHandler = function detachHandler2() {
  document.removeEventListener("focusin", onTrap);
  document.removeEventListener("focusout", onBlur);
  window.removeEventListener("blur", onWindowBlur);
};
function reducePropsToState(propsList) {
  return propsList.filter(function(_ref5) {
    var disabled = _ref5.disabled;
    return !disabled;
  });
}
function handleStateChangeOnClient(traps) {
  var trap = traps.slice(-1)[0];
  if (trap && !lastActiveTrap) {
    attachHandler();
  }
  var lastTrap = lastActiveTrap;
  var sameTrap = lastTrap && trap && trap.id === lastTrap.id;
  lastActiveTrap = trap;
  if (lastTrap && !sameTrap) {
    lastTrap.onDeactivation();
    if (!traps.filter(function(_ref6) {
      var id = _ref6.id;
      return id === lastTrap.id;
    }).length) {
      lastTrap.returnFocus(!trap);
    }
  }
  if (trap) {
    lastActiveFocus = null;
    if (!sameTrap || lastTrap.observed !== trap.observed) {
      trap.onActivation();
    }
    activateTrap(true);
    deferAction(activateTrap);
  } else {
    detachHandler();
    lastActiveFocus = null;
  }
}
mediumFocus.assignSyncMedium(onFocus);
mediumBlur.assignMedium(onBlur);
mediumEffect.assignMedium(function(cb) {
  return cb({
    moveFocusInside: es2015_default,
    focusInside
  });
});
var Trap_default = index_es_default(reducePropsToState, handleStateChangeOnClient)(FocusWatcher);

// node_modules/react-focus-lock/dist/es2015/Combination.js
var FocusLockCombination = React12.forwardRef(function FocusLockUICombination(props, ref) {
  return React12.createElement(Lock_default, _extends({
    sideCar: Trap_default,
    ref
  }, props));
});
var _ref = Lock_default.propTypes || {};
var sideCar = _ref.sideCar;
var propTypes = _objectWithoutPropertiesLoose(_ref, ["sideCar"]);
FocusLockCombination.propTypes = true ? propTypes : {};
var Combination_default = FocusLockCombination;

// node_modules/react-focus-lock/dist/es2015/AutoFocusInside.js
var React13 = __toESM(require_react());
var import_prop_types4 = __toESM(require_prop_types());
var AutoFocusInside = function AutoFocusInside2(_ref2) {
  var disabled = _ref2.disabled, children = _ref2.children, className = _ref2.className;
  return React13.createElement("div", _extends({}, inlineProp(FOCUS_AUTO, !disabled), {
    className
  }), children);
};
AutoFocusInside.propTypes = true ? {
  children: import_prop_types4.default.node.isRequired,
  disabled: import_prop_types4.default.bool,
  className: import_prop_types4.default.string
} : {};
AutoFocusInside.defaultProps = {
  disabled: false,
  className: void 0
};

// node_modules/react-focus-lock/dist/es2015/MoveFocusInside.js
var React14 = __toESM(require_react());
var import_prop_types5 = __toESM(require_prop_types());
var useFocusInside = function useFocusInside2(observedRef) {
  React14.useEffect(function() {
    var enabled = true;
    mediumEffect.useMedium(function(car) {
      var observed = observedRef && observedRef.current;
      if (enabled && observed) {
        if (!car.focusInside(observed)) {
          car.moveFocusInside(observed, null);
        }
      }
    });
    return function() {
      enabled = false;
    };
  }, [observedRef]);
};
function MoveFocusInside(_ref2) {
  var isDisabled = _ref2.disabled, className = _ref2.className, children = _ref2.children;
  var ref = React14.useRef(null);
  useFocusInside(isDisabled ? void 0 : ref);
  return React14.createElement("div", _extends({}, inlineProp(FOCUS_AUTO, !isDisabled), {
    ref,
    className
  }), children);
}
MoveFocusInside.propTypes = true ? {
  children: import_prop_types5.default.node.isRequired,
  disabled: import_prop_types5.default.bool,
  className: import_prop_types5.default.string
} : {};
MoveFocusInside.defaultProps = {
  disabled: false,
  className: void 0
};

// node_modules/react-focus-lock/dist/es2015/FreeFocusInside.js
var React15 = __toESM(require_react());
var import_prop_types6 = __toESM(require_prop_types());
var FreeFocusInside = function FreeFocusInside2(_ref2) {
  var children = _ref2.children, className = _ref2.className;
  return React15.createElement("div", _extends({}, inlineProp(FOCUS_ALLOW, true), {
    className
  }), children);
};
FreeFocusInside.propTypes = true ? {
  children: import_prop_types6.default.node.isRequired,
  className: import_prop_types6.default.string
} : {};
FreeFocusInside.defaultProps = {
  className: void 0
};

// node_modules/react-focus-lock/dist/es2015/index.js
var es2015_default2 = Combination_default;

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/header.js
var import_react11 = __toESM(require_react());
var Header = function(_a) {
  var children = _a.children, secondaryText = _a.secondaryText, backIconAriaLabel = _a.backIconAriaLabel, dismissIconAriaLabel = _a.dismissIconAriaLabel, onBack = _a.onBack, onClose = _a.onClose;
  return import_react11.default.createElement(
    "div",
    { className: styles_css_default2["overflow-menu-header"] },
    onBack && import_react11.default.createElement(
      internal_default2,
      {
        className: styles_css_default2["overflow-menu-back-button"],
        ariaLabel: backIconAriaLabel,
        iconName: "angle-left",
        variant: "icon",
        onClick: function() {
          return onBack();
        }
      }
    ),
    import_react11.default.createElement(
      "h2",
      { className: styles_css_default2["overflow-menu-header-text"] },
      import_react11.default.createElement("div", { className: styles_css_default2["overflow-menu-header-text--title"] }, children),
      secondaryText && import_react11.default.createElement("div", { className: styles_css_default2["overflow-menu-header-text--secondary"] }, secondaryText)
    ),
    import_react11.default.createElement(
      internal_default2,
      {
        className: styles_css_default2["overflow-menu-dismiss-button"],
        ariaLabel: dismissIconAriaLabel,
        iconName: "close",
        variant: "icon",
        onClick: function() {
          return onClose && onClose();
        }
      }
    )
  );
};
var header_default = Header;

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/menu-item.js
var import_react12 = __toESM(require_react());
var ListItem = function(_a) {
  var children = _a.children, startIcon = _a.startIcon, endIcon = _a.endIcon;
  return import_react12.default.createElement(
    import_react12.default.Fragment,
    null,
    startIcon && import_react12.default.createElement("span", { className: styles_css_default2["overflow-menu-list-item-icon"] }, startIcon),
    import_react12.default.createElement("span", { className: styles_css_default2["overflow-menu-list-item-text"] }, children),
    endIcon && endIcon
  );
};
var LinkItem = (0, import_react12.forwardRef)(function(_a, ref) {
  var children = _a.children, external = _a.external, href = _a.href, startIcon = _a.startIcon, endIcon = _a.endIcon, onFollow = _a.onFollow, context = _a.context, testId = _a.testId;
  var focusVisible = useFocusVisible();
  var rel = external ? "noopener noreferrer" : void 0;
  var target = external ? "_blank" : void 0;
  var anchorProps = {
    rel,
    target,
    href,
    onClick: function(event) {
      if (isPlainLeftClick(event)) {
        onFollow === null || onFollow === void 0 ? void 0 : onFollow(event);
      }
    }
  };
  var buttonProps = {
    role: "button",
    tabIndex: 0,
    onKeyDown: function(event) {
      if (event.key === " ") {
        event.preventDefault();
      }
    },
    onKeyUp: function(event) {
      if (event.key === " " || event.key === "Enter") {
        onFollow === null || onFollow === void 0 ? void 0 : onFollow(event);
      }
    },
    onClick: onFollow
  };
  return import_react12.default.createElement(
    "a",
    __assign({ ref, className: clsx_m_default(styles_css_default2["overflow-menu-control"], styles_css_default2["overflow-menu-control-link"], context && styles_css_default2["overflow-menu-control-".concat(context)]) }, typeof href === "string" ? anchorProps : buttonProps, focusVisible, testId ? { "data-testid": testId } : {}),
    import_react12.default.createElement(ListItem, { startIcon, endIcon }, children)
  );
});
var ButtonItem = (0, import_react12.forwardRef)(function(_a, ref) {
  var children = _a.children, startIcon = _a.startIcon, endIcon = _a.endIcon, onClick = _a.onFollow, testId = _a.testId;
  var focusVisible = useFocusVisible();
  return import_react12.default.createElement(
    "button",
    __assign({ ref, className: styles_css_default2["overflow-menu-control"], onClick }, focusVisible, typeof testId === "string" ? { "data-testid": testId } : {}),
    import_react12.default.createElement(ListItem, { startIcon, endIcon }, children)
  );
});
var NavigationItem = (0, import_react12.forwardRef)(function(_a, ref) {
  var startIcon = _a.startIcon, children = _a.children, index = _a.index, testId = _a.testId, definition = __rest(_a, ["startIcon", "children", "index", "testId"]);
  var navigate = useNavigate();
  return import_react12.default.createElement(ButtonItem, { ref, startIcon, endIcon: import_react12.default.createElement(internal_default, { name: "angle-right" }), testId, onFollow: function() {
    return navigate("dropdown-menu", {
      definition,
      headerText: definition.text || definition.title,
      headerSecondaryText: definition.description,
      utilityIndex: index
    });
  } }, children);
});
var ExpandableItem = function(_a) {
  var children = _a.children, onItemClick = _a.onItemClick, definition = __rest(_a, ["children", "onItemClick"]);
  var focusVisible = useFocusVisible();
  var _b = (0, import_react12.useState)(false), expanded = _b[0], setExpanded = _b[1];
  var headerId = useUniqueId("overflow-menu-item");
  return import_react12.default.createElement(
    import_react12.default.Fragment,
    null,
    import_react12.default.createElement(
      "button",
      __assign({ className: clsx_m_default(styles_css_default2["overflow-menu-control"], styles_css_default2["overflow-menu-control-expandable-menu-trigger"]), onClick: function() {
        return setExpanded(function(value) {
          return !value;
        });
      }, "aria-expanded": expanded }, focusVisible),
      import_react12.default.createElement(
        ListItem,
        { endIcon: import_react12.default.createElement(
          "span",
          { className: clsx_m_default(styles_css_default2.icon, expanded && styles_css_default2.expanded) },
          import_react12.default.createElement(internal_default, { name: "caret-up-filled" })
        ) },
        import_react12.default.createElement("span", { id: headerId }, children)
      )
    ),
    expanded && import_react12.default.createElement("ul", { className: clsx_m_default(styles_css_default2["overflow-menu-list"], styles_css_default2["overflow-menu-list-submenu"]), "aria-labelledby": headerId }, definition.items.map(function(item, index) {
      var isGroup = typeof item.items !== "undefined";
      return import_react12.default.createElement("li", { key: index, className: clsx_m_default(styles_css_default2["overflow-menu-list-item"], styles_css_default2["overflow-menu-list-item-dropdown-menu"]) }, dropdownComponentFactory(item, isGroup, onItemClick));
    }))
  );
};
function utilityComponentFactory(utility, index, ref) {
  var label = utility.text || utility.title;
  var hasIcon = !!utility.iconName || !!utility.iconUrl || !!utility.iconAlt || !!utility.iconSvg;
  var startIcon = hasIcon && import_react12.default.createElement(internal_default, { name: utility.iconName, url: utility.iconUrl, alt: utility.iconAlt, svg: utility.iconSvg });
  switch (utility.type) {
    case "button": {
      var handleClick = function(event) {
        fireCancelableEvent(utility.onClick, {}, event);
      };
      if (utility.variant === "primary-button") {
        return import_react12.default.createElement(ButtonItem, { ref, startIcon, onFollow: handleClick, testId: "__".concat(index) }, label);
      }
      return import_react12.default.createElement(
        LinkItem,
        { ref, startIcon, href: utility.href, external: utility.external, testId: "__".concat(index), onFollow: handleClick },
        label,
        utility.external && import_react12.default.createElement(
          import_react12.default.Fragment,
          null,
          " ",
          import_react12.default.createElement(
            "span",
            { "aria-label": utility.externalIconAriaLabel, role: utility.externalIconAriaLabel ? "img" : void 0 },
            import_react12.default.createElement(internal_default, { name: "external", size: "normal" })
          )
        )
      );
    }
    case "menu-dropdown": {
      return import_react12.default.createElement(NavigationItem, __assign({ ref, startIcon, index }, utility, { testId: "__".concat(index) }), label);
    }
  }
}
function dropdownComponentFactory(item, expandable, onItemClick) {
  var label = item.text;
  var hasIcon = !!item.iconName || !!item.iconUrl || !!item.iconAlt || !!item.iconSvg;
  var startIcon = hasIcon && import_react12.default.createElement(internal_default, { name: item.iconName, url: item.iconUrl, alt: item.iconAlt, svg: item.iconSvg });
  if (expandable) {
    return import_react12.default.createElement(ExpandableItem, __assign({}, item, { onItemClick }), label);
  }
  return import_react12.default.createElement(
    LinkItem,
    { startIcon, href: item.href, external: item.external, context: "dropdown-menu", testId: item.id, onFollow: function() {
      return onItemClick(item);
    } },
    label,
    item.external && import_react12.default.createElement(
      import_react12.default.Fragment,
      null,
      " ",
      import_react12.default.createElement(
        "span",
        { "aria-label": item.externalIconAriaLabel, role: item.externalIconAriaLabel ? "img" : void 0 },
        import_react12.default.createElement(internal_default, { name: "external", size: "normal" })
      )
    )
  );
}
var UtilityMenuItem = (0, import_react12.forwardRef)(function(_a, ref) {
  var index = _a.index, props = __rest(_a, ["index"]);
  return import_react12.default.createElement("li", { className: clsx_m_default(styles_css_default2["overflow-menu-list-item"], styles_css_default2["overflow-menu-list-item-utility"]) }, utilityComponentFactory(props, index, ref));
});
var SubmenuItem = function(props) {
  var expandable = typeof props.items !== "undefined";
  return import_react12.default.createElement("li", { className: clsx_m_default(styles_css_default2["overflow-menu-list-item"], styles_css_default2["overflow-menu-list-item-submenu"], expandable && styles_css_default2["overflow-menu-list-item-expandable"]) }, dropdownComponentFactory(props, expandable, props.onItemClick));
};

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/views/utilities.js
var UtilitiesView = function(_a) {
  var headerText = _a.headerText, dismissIconAriaLabel = _a.dismissIconAriaLabel, onClose = _a.onClose, _b = _a.items, items = _b === void 0 ? [] : _b, focusIndex = _a.focusIndex;
  var headerId = useUniqueId("overflow-menu-header");
  var ref = (0, import_react13.useRef)(null);
  (0, import_react13.useEffect)(function() {
    var _a2;
    if (typeof focusIndex === "number") {
      (_a2 = ref.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
  }, [focusIndex]);
  return import_react13.default.createElement(
    es2015_default2,
    { returnFocus: true },
    import_react13.default.createElement(
      header_default,
      { dismissIconAriaLabel, onClose },
      import_react13.default.createElement("span", { id: headerId }, headerText)
    ),
    import_react13.default.createElement("ul", { className: styles_css_default2["overflow-menu-list"], "aria-labelledby": headerId }, items.map(function(utility, index) {
      return import_react13.default.createElement(UtilityMenuItem, __assign({ key: index, index, ref: index === focusIndex ? ref : void 0 }, utility));
    }))
  );
};
var utilities_default = UtilitiesView;

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/views/submenu.js
var import_react14 = __toESM(require_react());
var SubmenuView = function(_a) {
  var onClose = _a.onClose, utilityIndex = _a.utilityIndex, headerText = _a.headerText, headerSecondaryText = _a.headerSecondaryText, dismissIconAriaLabel = _a.dismissIconAriaLabel, backIconAriaLabel = _a.backIconAriaLabel, definition = _a.definition;
  var navigate = useNavigate();
  var headerId = useUniqueId("overflow-menu-header");
  return import_react14.default.createElement(
    es2015_default2,
    { returnFocus: true },
    import_react14.default.createElement(
      header_default,
      { secondaryText: headerSecondaryText, dismissIconAriaLabel, backIconAriaLabel, onClose, onBack: function() {
        return navigate("utilities", { utilityIndex });
      } },
      import_react14.default.createElement("span", { id: headerId }, headerText)
    ),
    import_react14.default.createElement("ul", { className: clsx_m_default(styles_css_default2["overflow-menu-list"], styles_css_default2["overflow-menu-list-submenu"]), "aria-labelledby": headerId }, definition.items.map(function(item, index) {
      return import_react14.default.createElement(SubmenuItem, __assign({ key: index }, item, { onItemClick: function(item2) {
        fireCancelableEvent(definition.onItemClick, { id: item2.id, href: item2.href, external: item2.external });
        onClose === null || onClose === void 0 ? void 0 : onClose();
      } }));
    }))
  );
};
var submenu_default = SubmenuView;

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/index.js
var OverflowMenu = function(_a) {
  var headerText = _a.headerText, dismissIconAriaLabel = _a.dismissIconAriaLabel, backIconAriaLabel = _a.backIconAriaLabel, _b = _a.items, items = _b === void 0 ? [] : _b, onClose = _a.onClose;
  return import_react15.default.createElement(
    "div",
    { className: styles_css_default2["overflow-menu"], onKeyUp: function(event) {
      if (event.key === "Escape") {
        onClose === null || onClose === void 0 ? void 0 : onClose();
      }
    } },
    import_react15.default.createElement(
      router_default,
      null,
      import_react15.default.createElement(Route, { view: "utilities", element: function(data) {
        return import_react15.default.createElement(utilities_default, { headerText, items, focusIndex: data === null || data === void 0 ? void 0 : data.utilityIndex, dismissIconAriaLabel, backIconAriaLabel, onClose });
      } }),
      import_react15.default.createElement(Route, { view: "dropdown-menu", element: function(data) {
        return import_react15.default.createElement(submenu_default, { headerText: data === null || data === void 0 ? void 0 : data.headerText, headerSecondaryText: data === null || data === void 0 ? void 0 : data.headerSecondaryText, dismissIconAriaLabel, backIconAriaLabel, definition: data === null || data === void 0 ? void 0 : data.definition, utilityIndex: data === null || data === void 0 ? void 0 : data.utilityIndex, onClose });
      } })
    )
  );
};
var overflow_menu_default = OverflowMenu;

// node_modules/@cloudscape-design/components/top-navigation/internal.js
function InternalTopNavigation(_a) {
  var __internalRootRef = _a.__internalRootRef, identity = _a.identity, i18nStrings = _a.i18nStrings, utilities = _a.utilities, search = _a.search, restProps = __rest(_a, ["__internalRootRef", "identity", "i18nStrings", "utilities", "search"]);
  checkSafeUrl("TopNavigation", identity.href);
  var baseProps = getBaseProps(restProps);
  var _b = useTopNavigation({ identity, search, utilities }), mainRef = _b.mainRef, virtualRef = _b.virtualRef, breakpoint = _b.breakpoint, responsiveState = _b.responsiveState, isSearchExpanded = _b.isSearchExpanded, onSearchUtilityClick = _b.onSearchUtilityClick;
  var _c = (0, import_react16.useState)(false), overflowMenuOpen = _c[0], setOverflowMenuOpen = _c[1];
  var overflowMenuTriggerRef = (0, import_react16.useRef)(null);
  var isNarrowViewport = breakpoint === "default";
  var isMediumViewport = breakpoint === "xxs";
  var isLargeViewport = breakpoint === "s";
  var onIdentityClick = function(event) {
    if (isPlainLeftClick(event)) {
      fireCancelableEvent(identity.onFollow, {}, event);
    }
  };
  var toggleOverflowMenu = function() {
    setOverflowMenuOpen(function(overflowMenuOpen2) {
      return !overflowMenuOpen2;
    });
  };
  var focusVisible = useFocusVisible();
  var menuTriggerVisible = !isSearchExpanded && responsiveState.hideUtilities;
  (0, import_react16.useEffect)(function() {
    setOverflowMenuOpen(false);
  }, [menuTriggerVisible]);
  useEffectOnUpdate(function() {
    var _a2;
    if (!overflowMenuOpen) {
      (_a2 = overflowMenuTriggerRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
  }, [overflowMenuOpen]);
  var content = function(isVirtual) {
    var _a2, _b2, _c2, _d;
    var _e, _f;
    var Wrapper = isVirtual ? "div" : "header";
    var showIdentity = isVirtual || !isSearchExpanded;
    var showTitle = isVirtual || !responsiveState.hideTitle;
    var showSearchSlot = search && (isVirtual || !responsiveState.hideSearch || isSearchExpanded);
    var showSearchUtility = isVirtual || search && responsiveState.hideSearch;
    var showUtilities = isVirtual || !isSearchExpanded;
    var showMenuTrigger = isVirtual || menuTriggerVisible;
    return import_react16.default.createElement(
      Wrapper,
      {
        ref: isVirtual ? virtualRef : mainRef,
        "aria-hidden": isVirtual ? true : void 0,
        className: clsx_m_default(styles_css_default2["top-navigation"], (_a2 = {}, _a2[styles_css_default2.virtual] = isVirtual, _a2[styles_css_default2.hidden] = isVirtual, _a2[styles_css_default2.narrow] = isNarrowViewport, _a2[styles_css_default2.medium] = isMediumViewport, _a2))
      },
      import_react16.default.createElement(
        "div",
        { className: styles_css_default2["padding-box"] },
        showIdentity && import_react16.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default2.identity, !identity.logo && styles_css_default2["no-logo"]) },
          import_react16.default.createElement(
            "a",
            __assign({}, focusVisible, { className: styles_css_default2["identity-link"], href: identity.href, onClick: onIdentityClick }),
            identity.logo && import_react16.default.createElement("img", { role: "img", src: (_e = identity.logo) === null || _e === void 0 ? void 0 : _e.src, alt: (_f = identity.logo) === null || _f === void 0 ? void 0 : _f.alt, className: clsx_m_default(styles_css_default2.logo, (_b2 = {}, _b2[styles_css_default2.narrow] = isNarrowViewport, _b2)) }),
            showTitle && import_react16.default.createElement("span", { className: styles_css_default2.title }, identity.title)
          )
        ),
        import_react16.default.createElement("div", { className: styles_css_default2.inputs }, showSearchSlot && import_react16.default.createElement("div", { className: clsx_m_default(styles_css_default2.search, !isVirtual && isSearchExpanded && styles_css_default2["search-expanded"]) }, search)),
        import_react16.default.createElement(
          "div",
          { className: styles_css_default2.utilities },
          showSearchUtility && import_react16.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default2["utility-wrapper"], styles_css_default2["utility-type-button"], styles_css_default2["utility-type-button-link"], (_c2 = {}, _c2[styles_css_default2.narrow] = isNarrowViewport, _c2[styles_css_default2.medium] = isMediumViewport, _c2)), "data-utility-special": "search" },
            import_react16.default.createElement(Utility, { hideText: true, definition: {
              type: "button",
              iconName: isSearchExpanded ? "close" : "search",
              ariaLabel: isSearchExpanded ? i18nStrings.searchDismissIconAriaLabel : i18nStrings.searchIconAriaLabel,
              onClick: onSearchUtilityClick
            } })
          ),
          showUtilities && utilities.filter(function(_utility, i) {
            return isVirtual || !responsiveState.hideUtilities || responsiveState.hideUtilities.indexOf(i) === -1;
          }).map(function(utility, i) {
            var _a3;
            var _b3;
            var hideText = !!responsiveState.hideUtilityText;
            var isLast = (isVirtual || !showMenuTrigger) && i === utilities.length - 1;
            var offsetRight = isLast && isLargeViewport ? "xxl" : isLast ? "l" : void 0;
            return import_react16.default.createElement(
              "div",
              { key: i, className: clsx_m_default(styles_css_default2["utility-wrapper"], styles_css_default2["utility-type-".concat(utility.type)], utility.type === "button" && styles_css_default2["utility-type-button-".concat((_b3 = utility.variant) !== null && _b3 !== void 0 ? _b3 : "link")], (_a3 = {}, _a3[styles_css_default2.narrow] = isNarrowViewport, _a3[styles_css_default2.medium] = isMediumViewport, _a3)), "data-utility-index": i, "data-utility-hide": "".concat(hideText) },
              import_react16.default.createElement(Utility, { hideText, definition: utility, offsetRight })
            );
          }),
          isVirtual && utilities.map(function(utility, i) {
            var _a3;
            var _b3;
            var hideText = !responsiveState.hideUtilityText;
            var isLast = !showMenuTrigger && i === utilities.length - 1;
            var offsetRight = isLast && isLargeViewport ? "xxl" : isLast ? "l" : void 0;
            return import_react16.default.createElement(
              "div",
              { key: i, className: clsx_m_default(styles_css_default2["utility-wrapper"], styles_css_default2["utility-type-".concat(utility.type)], utility.type === "button" && styles_css_default2["utility-type-button-".concat((_b3 = utility.variant) !== null && _b3 !== void 0 ? _b3 : "link")], (_a3 = {}, _a3[styles_css_default2.narrow] = isNarrowViewport, _a3[styles_css_default2.medium] = isMediumViewport, _a3)), "data-utility-index": i, "data-utility-hide": "".concat(hideText) },
              import_react16.default.createElement(Utility, { hideText, definition: utility, offsetRight })
            );
          }),
          showMenuTrigger && import_react16.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default2["utility-wrapper"], styles_css_default2["utility-type-menu-dropdown"], (_d = {}, _d[styles_css_default2.narrow] = isNarrowViewport, _d[styles_css_default2.medium] = isMediumViewport, _d)), "data-utility-special": "menu-trigger" },
            import_react16.default.createElement(ButtonTrigger, { expanded: overflowMenuOpen, onClick: toggleOverflowMenu, offsetRight: "l", ref: !isVirtual ? overflowMenuTriggerRef : void 0 }, i18nStrings.overflowMenuTriggerText)
          )
        )
      )
    );
  };
  return import_react16.default.createElement(
    "div",
    __assign({}, baseProps, { ref: __internalRootRef }),
    import_react16.default.createElement(
      VisualContext,
      { contextName: "top-navigation" },
      content(false),
      import_react16.default.createElement(Portal, null, content(true)),
      menuTriggerVisible && overflowMenuOpen && import_react16.default.createElement(
        "div",
        { className: styles_css_default2["overflow-menu-drawer"] },
        import_react16.default.createElement(overflow_menu_default, { headerText: i18nStrings.overflowMenuTitleText, dismissIconAriaLabel: i18nStrings.overflowMenuDismissIconAriaLabel, backIconAriaLabel: i18nStrings.overflowMenuBackIconAriaLabel, items: utilities.filter(function(utility, i) {
          return (!responsiveState.hideUtilities || responsiveState.hideUtilities.indexOf(i) !== -1) && !utility.disableUtilityCollapse;
        }), onClose: toggleOverflowMenu })
      )
    )
  );
}

// node_modules/@cloudscape-design/components/top-navigation/index.js
function TopNavigation(_a) {
  var _b = _a.utilities, utilities = _b === void 0 ? [] : _b, restProps = __rest(_a, ["utilities"]);
  var baseComponentProps = useBaseComponent("TopNavigation");
  return import_react17.default.createElement(InternalTopNavigation, __assign({}, baseComponentProps, { utilities }, restProps));
}
applyDisplayName(TopNavigation, "TopNavigation");
export {
  TopNavigation as default
};
//# sourceMappingURL=@cloudscape-design_components_top-navigation.js.map

import {
  StatusIndicator
} from "./chunk-RQGE2I2H.js";
import {
  InternalContainer,
  useDynamicOverlap
} from "./chunk-GCZQGP5C.js";
import {
  StickyHeaderContext
} from "./chunk-K32DNXAD.js";
import {
  useUniqueId
} from "./chunk-4SPBHLDO.js";
import {
  getOverflowParentDimensions,
  getOverflowParents
} from "./chunk-ORU3SSIL.js";
import {
  useForwardFocus
} from "./chunk-ZVZYH4QP.js";
import {
  live_region_default
} from "./chunk-AQX2ZZQ6.js";
import {
  AppLayoutContext
} from "./chunk-HKQ3KBXU.js";
import "./chunk-3B73VQSS.js";
import {
  useAppLayoutContext
} from "./chunk-LUGY6UQ7.js";
import {
  ResizeObserver,
  useContainerBreakpoints,
  useContainerQuery,
  useResizeObserver
} from "./chunk-SIDBM5Q2.js";
import {
  useMobile
} from "./chunk-XI4RR77K.js";
import {
  KeyCode,
  fireCancelableEvent,
  fireNonCancelableEvent,
  useFocusVisible
} from "./chunk-CVSDZ3HK.js";
import "./chunk-AN4UEH7R.js";
import {
  ScreenreaderOnly
} from "./chunk-SWK72FBN.js";
import {
  internal_default,
  isDevelopment,
  useMergeRefs,
  warnOnce
} from "./chunk-3AAOFNJY.js";
import {
  calculateOnce,
  createSingletonHandler,
  findUpUntil,
  getContainingBlock,
  supportsStickyPosition,
  useStableEventHandler,
  useVisualRefresh
} from "./chunk-455JEJF4.js";
import {
  __assign,
  __rest,
  __spreadArray,
  applyDisplayName,
  clsx_m_default,
  getBaseProps,
  useBaseComponent
} from "./chunk-XTANDRJM.js";
import "./chunk-WZDUAPVE.js";
import {
  require_react
} from "./chunk-JLBVE3FS.js";
import {
  __toESM
} from "./chunk-HUBM7RA2.js";

// node_modules/@cloudscape-design/components/table/index.js
var import_react21 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/internal.js
var import_react20 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/tools-header.js
var import_react = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/table/styles.scoped.css";
var styles_css_default = {
  "root": "awsui_root_wih1l_sal8y_97",
  "tools": "awsui_tools_wih1l_sal8y_106",
  "tools-filtering": "awsui_tools-filtering_wih1l_sal8y_112",
  "tools-align-right": "awsui_tools-align-right_wih1l_sal8y_117",
  "tools-pagination": "awsui_tools-pagination_wih1l_sal8y_121",
  "tools-preferences": "awsui_tools-preferences_wih1l_sal8y_121",
  "tools-small": "awsui_tools-small_wih1l_sal8y_127",
  "table": "awsui_table_wih1l_sal8y_133",
  "table-layout-fixed": "awsui_table-layout-fixed_wih1l_sal8y_139",
  "wrapper": "awsui_wrapper_wih1l_sal8y_143",
  "variant-stacked": "awsui_variant-stacked_wih1l_sal8y_153",
  "variant-container": "awsui_variant-container_wih1l_sal8y_153",
  "variant-embedded": "awsui_variant-embedded_wih1l_sal8y_157",
  "has-header": "awsui_has-header_wih1l_sal8y_160",
  "has-footer": "awsui_has-footer_wih1l_sal8y_163",
  "cell-merged": "awsui_cell-merged_wih1l_sal8y_173",
  "cell-merged-content": "awsui_cell-merged-content_wih1l_sal8y_177",
  "empty": "awsui_empty_wih1l_sal8y_192",
  "loading": "awsui_loading_wih1l_sal8y_196",
  "selection-control": "awsui_selection-control_wih1l_sal8y_200",
  "selection-control-header": "awsui_selection-control-header_wih1l_sal8y_207",
  "sticky-scrollbar": "awsui_sticky-scrollbar_wih1l_sal8y_212",
  "sticky-scrollbar-content": "awsui_sticky-scrollbar-content_wih1l_sal8y_222",
  "sticky-scrollbar-visible": "awsui_sticky-scrollbar-visible_wih1l_sal8y_225",
  "dark-header": "awsui_dark-header_wih1l_sal8y_233",
  "header-secondary": "awsui_header-secondary_wih1l_sal8y_237",
  "table-has-header": "awsui_table-has-header_wih1l_sal8y_253",
  "header-controls": "awsui_header-controls_wih1l_sal8y_257",
  "divider": "awsui_divider_wih1l_sal8y_271",
  "footer-wrapper": "awsui_footer-wrapper_wih1l_sal8y_278",
  "footer": "awsui_footer_wih1l_sal8y_278",
  "thead-active": "awsui_thead-active_wih1l_sal8y_287",
  "row": "awsui_row_wih1l_sal8y_288",
  "row-selected": "awsui_row-selected_wih1l_sal8y_289"
};

// node_modules/@cloudscape-design/components/table/tools-header.js
function ToolsHeader(_a2) {
  var header = _a2.header, filter = _a2.filter, pagination = _a2.pagination, preferences = _a2.preferences;
  var _b2 = useContainerBreakpoints(["xs"]), breakpoint = _b2[0], ref = _b2[1];
  var isSmall = breakpoint === "default";
  var hasTools = filter || pagination || preferences;
  return import_react.default.createElement(
    import_react.default.Fragment,
    null,
    header,
    hasTools && import_react.default.createElement(
      "div",
      { ref, className: clsx_m_default(styles_css_default.tools, isSmall && styles_css_default["tools-small"]) },
      filter && import_react.default.createElement("div", { className: styles_css_default["tools-filtering"] }, filter),
      import_react.default.createElement(
        "div",
        { className: styles_css_default["tools-align-right"] },
        pagination && import_react.default.createElement("div", { className: styles_css_default["tools-pagination"] }, pagination),
        preferences && import_react.default.createElement("div", { className: styles_css_default["tools-preferences"] }, preferences)
      )
    )
  );
}

// node_modules/@cloudscape-design/components/table/thead.js
var import_react12 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/selection-control/index.js
var import_react7 = __toESM(require_react());

// node_modules/@cloudscape-design/components/checkbox/internal.js
var import_react5 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/abstract-switch/index.js
var import_react2 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/abstract-switch/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/internal/components/abstract-switch/styles.scoped.css";
var styles_css_default2 = {
  "content": "awsui_content_1wepg_3hhd4_93",
  "description": "awsui_description_1wepg_3hhd4_94",
  "label": "awsui_label_1wepg_3hhd4_95",
  "outline": "awsui_outline_1wepg_3hhd4_99",
  "native-input": "awsui_native-input_1wepg_3hhd4_103",
  "wrapper": "awsui_wrapper_1wepg_3hhd4_110",
  "label-wrapper": "awsui_label-wrapper_1wepg_3hhd4_117",
  "empty-content": "awsui_empty-content_1wepg_3hhd4_129",
  "description-bottom-padding": "awsui_description-bottom-padding_1wepg_3hhd4_139",
  "label-disabled": "awsui_label-disabled_1wepg_3hhd4_147",
  "description-disabled": "awsui_description-disabled_1wepg_3hhd4_148",
  "control": "awsui_control_1wepg_3hhd4_153"
};

// node_modules/@cloudscape-design/components/internal/components/abstract-switch/index.js
function joinString(values) {
  return values.filter(function(value) {
    return !!value;
  }).join(" ");
}
function AbstractSwitch(_a2) {
  var _b2, _c2;
  var controlId = _a2.controlId, controlClassName = _a2.controlClassName, outlineClassName = _a2.outlineClassName, disabled = _a2.disabled, nativeControl = _a2.nativeControl, styledControl = _a2.styledControl, label = _a2.label, description = _a2.description, descriptionBottomPadding = _a2.descriptionBottomPadding, ariaLabel = _a2.ariaLabel, ariaLabelledby = _a2.ariaLabelledby, ariaDescribedby = _a2.ariaDescribedby, onClick = _a2.onClick, __internalRootRef = _a2.__internalRootRef, rest = __rest(_a2, ["controlId", "controlClassName", "outlineClassName", "disabled", "nativeControl", "styledControl", "label", "description", "descriptionBottomPadding", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "onClick", "__internalRootRef"]);
  var uniqueId = useUniqueId();
  var id = controlId || uniqueId;
  var focusVisible = useFocusVisible();
  var labelId = "".concat(id, "-label");
  var descriptionId = "".concat(id, "-description");
  var ariaLabelledByIds = [];
  if (label) {
    ariaLabelledByIds.push(labelId);
  }
  if (ariaLabelledby) {
    ariaLabelledByIds.push(ariaLabelledby);
  }
  var ariaDescriptons = [];
  if (ariaDescribedby) {
    ariaDescriptons.push(ariaDescribedby);
  }
  if (description) {
    ariaDescriptons.push(descriptionId);
  }
  return import_react2.default.createElement(
    "div",
    __assign({}, rest, { className: clsx_m_default(styles_css_default2.wrapper, rest.className), ref: __internalRootRef }),
    import_react2.default.createElement(
      "div",
      { className: styles_css_default2["label-wrapper"], "aria-disabled": disabled ? "true" : void 0, onClick: disabled ? void 0 : onClick },
      import_react2.default.createElement(
        "span",
        { className: clsx_m_default(styles_css_default2.control, controlClassName) },
        styledControl,
        nativeControl(__assign(__assign({}, focusVisible), { id, disabled, className: styles_css_default2["native-input"], "aria-describedby": ariaDescriptons.length ? joinString(ariaDescriptons) : void 0, "aria-labelledby": ariaLabelledByIds.length ? joinString(ariaLabelledByIds) : void 0, "aria-label": ariaLabel })),
        import_react2.default.createElement("span", { className: clsx_m_default(styles_css_default2.outline, outlineClassName) })
      ),
      import_react2.default.createElement(
        "span",
        { className: clsx_m_default(styles_css_default2.content, !label && !description && styles_css_default2["empty-content"]) },
        label && import_react2.default.createElement("span", { id: labelId, className: clsx_m_default(styles_css_default2.label, (_b2 = {}, _b2[styles_css_default2["label-disabled"]] = disabled, _b2)) }, label),
        description && import_react2.default.createElement("span", { id: descriptionId, className: clsx_m_default(styles_css_default2.description, (_c2 = {}, _c2[styles_css_default2["description-disabled"]] = disabled, _c2[styles_css_default2["description-bottom-padding"]] = descriptionBottomPadding, _c2)) }, description)
      )
    )
  );
}

// node_modules/@cloudscape-design/components/checkbox/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/checkbox/styles.scoped.css";
var styles_css_default3 = {
  "root": "awsui_root_k2y2q_5zih0_93",
  "checkbox-control": "awsui_checkbox-control_k2y2q_5zih0_105",
  "outline": "awsui_outline_k2y2q_5zih0_113"
};

// node_modules/@cloudscape-design/components/internal/components/checkbox-icon/index.js
var import_react3 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/checkbox-icon/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/internal/components/checkbox-icon/styles.scoped.css";
var styles_css_default4 = {
  "root": "awsui_root_1fn7j_18k9z_93",
  "styled-box": "awsui_styled-box_1fn7j_18k9z_100",
  "styled-box-checked": "awsui_styled-box-checked_1fn7j_18k9z_106",
  "styled-box-indeterminate": "awsui_styled-box-indeterminate_1fn7j_18k9z_106",
  "styled-box-disabled": "awsui_styled-box-disabled_1fn7j_18k9z_110",
  "styled-line": "awsui_styled-line_1fn7j_18k9z_124",
  "styled-line-disabled": "awsui_styled-line-disabled_1fn7j_18k9z_129"
};

// node_modules/@cloudscape-design/components/internal/components/checkbox-icon/index.js
var dimensionsByTheme = {
  "default": {
    viewBox: "0 0 14 14",
    indeterminate: "2.5,7 11.5,7",
    checked: "2.5,7 6,10 11,3",
    xy: 0.5,
    r: 1.5,
    size: 13
  },
  refresh: {
    viewBox: "0 0 16 16",
    indeterminate: "3.5,8 12.5,8",
    checked: "3.5,8 7,11 12,4",
    xy: 1,
    r: 2,
    size: 14
  }
};
var CheckboxIcon = function(_a2) {
  var _b2, _c2;
  var checked = _a2.checked, indeterminate = _a2.indeterminate, _d = _a2.disabled, disabled = _d === void 0 ? false : _d, restProps = __rest(_a2, ["checked", "indeterminate", "disabled"]);
  var baseProps = getBaseProps(restProps);
  var theme = useVisualRefresh() ? "refresh" : "default";
  var dimensions = dimensionsByTheme[theme];
  return import_react3.default.createElement(
    "svg",
    __assign({ className: styles_css_default4.root, viewBox: dimensions.viewBox, "aria-hidden": "true", focusable: "false" }, baseProps),
    import_react3.default.createElement("rect", { className: clsx_m_default(styles_css_default4["styled-box"], (_b2 = {}, _b2[styles_css_default4["styled-box-checked"]] = checked, _b2[styles_css_default4["styled-box-indeterminate"]] = indeterminate, _b2[styles_css_default4["styled-box-disabled"]] = disabled, _b2)), x: dimensions.xy, y: dimensions.xy, rx: dimensions.r, ry: dimensions.r, width: dimensions.size, height: dimensions.size }),
    checked || indeterminate ? import_react3.default.createElement("polyline", { className: clsx_m_default(styles_css_default4["styled-line"], (_c2 = {}, _c2[styles_css_default4["styled-line-disabled"]] = disabled, _c2)), points: indeterminate ? dimensions.indeterminate : dimensions.checked }) : null
  );
};
var checkbox_icon_default = CheckboxIcon;

// node_modules/@cloudscape-design/components/internal/context/form-field-context.js
var import_react4 = __toESM(require_react());
var FormFieldContext = (0, import_react4.createContext)({});
function applyDefault(fields, defaults, keys) {
  var result = {};
  keys.forEach(function(key) {
    result[key] = fields[key] === void 0 ? defaults[key] : fields[key];
  });
  return result;
}
function useFormFieldContext(props) {
  var context = (0, import_react4.useContext)(FormFieldContext);
  return applyDefault(props, context, ["invalid", "controlId", "ariaLabelledby", "ariaDescribedby"]);
}

// node_modules/@cloudscape-design/components/checkbox/internal.js
var InternalCheckbox = import_react5.default.forwardRef(function(_a2, ref) {
  var controlId = _a2.controlId, name = _a2.name, checked = _a2.checked, disabled = _a2.disabled, indeterminate = _a2.indeterminate, children = _a2.children, description = _a2.description, ariaLabel = _a2.ariaLabel, onFocus = _a2.onFocus, onBlur = _a2.onBlur, onChange = _a2.onChange, tabIndex = _a2.tabIndex, __internalRootRef = _a2.__internalRootRef, rest = __rest(_a2, ["controlId", "name", "checked", "disabled", "indeterminate", "children", "description", "ariaLabel", "onFocus", "onBlur", "onChange", "tabIndex", "__internalRootRef"]);
  var _b2 = useFormFieldContext(rest), ariaDescribedby = _b2.ariaDescribedby, ariaLabelledby = _b2.ariaLabelledby;
  var baseProps = getBaseProps(rest);
  var checkboxRef = (0, import_react5.useRef)(null);
  useForwardFocus(ref, checkboxRef);
  (0, import_react5.useEffect)(function() {
    if (checkboxRef.current) {
      checkboxRef.current.indeterminate = Boolean(indeterminate);
    }
  });
  return import_react5.default.createElement(AbstractSwitch, __assign({}, baseProps, { className: clsx_m_default(styles_css_default3.root, baseProps.className), controlClassName: styles_css_default3["checkbox-control"], outlineClassName: styles_css_default3.outline, controlId, disabled, label: children, description, descriptionBottomPadding: true, ariaLabel, ariaLabelledby, ariaDescribedby, nativeControl: function(nativeControlProps) {
    return import_react5.default.createElement("input", __assign({}, nativeControlProps, {
      ref: checkboxRef,
      type: "checkbox",
      checked,
      name,
      tabIndex,
      onFocus: function() {
        return fireNonCancelableEvent(onFocus);
      },
      onBlur: function() {
        return fireNonCancelableEvent(onBlur);
      },
      onChange: function() {
      }
    }));
  }, onClick: function() {
    var _a3;
    (_a3 = checkboxRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus();
    fireNonCancelableEvent(
      onChange,
      indeterminate ? { checked: true, indeterminate: false } : { checked: !checked, indeterminate: false }
    );
  }, styledControl: import_react5.default.createElement(checkbox_icon_default, { checked, indeterminate, disabled }), __internalRootRef }));
});
var internal_default2 = InternalCheckbox;

// node_modules/@cloudscape-design/components/radio-group/radio-button.js
var import_react6 = __toESM(require_react());

// node_modules/@cloudscape-design/components/radio-group/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/radio-group/styles.scoped.css";
var styles_css_default5 = {
  "root": "awsui_root_1mabk_1y9l8_93",
  "radio": "awsui_radio_1mabk_1y9l8_105",
  "radio--has-description": "awsui_radio--has-description_1mabk_1y9l8_113",
  "radio-control": "awsui_radio-control_1mabk_1y9l8_117",
  "outline": "awsui_outline_1mabk_1y9l8_125",
  "styled-circle-border": "awsui_styled-circle-border_1mabk_1y9l8_144",
  "styled-circle-disabled": "awsui_styled-circle-disabled_1mabk_1y9l8_148",
  "styled-circle-fill": "awsui_styled-circle-fill_1mabk_1y9l8_153",
  "styled-circle-checked": "awsui_styled-circle-checked_1mabk_1y9l8_159"
};

// node_modules/@cloudscape-design/components/radio-group/radio-button.js
var radio_button_default = import_react6.default.forwardRef(function RadioButton(_a2, ref) {
  var _b2, _c2;
  var name = _a2.name, label = _a2.label, value = _a2.value, checked = _a2.checked, description = _a2.description, disabled = _a2.disabled, controlId = _a2.controlId, onChange = _a2.onChange;
  var isVisualRefresh = useVisualRefresh();
  var radioButtonRef = (0, import_react6.useRef)(null);
  var mergedRefs = useMergeRefs(radioButtonRef, ref);
  return import_react6.default.createElement(AbstractSwitch, { className: clsx_m_default(styles_css_default5.radio, description && styles_css_default5["radio--has-description"]), controlClassName: styles_css_default5["radio-control"], outlineClassName: styles_css_default5.outline, label, description, disabled, controlId, nativeControl: function(nativeControlProps) {
    return import_react6.default.createElement("input", __assign({}, nativeControlProps, {
      type: "radio",
      ref: mergedRefs,
      name,
      value,
      checked,
      onChange: function() {
      }
    }));
  }, onClick: function() {
    var _a3;
    (_a3 = radioButtonRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus();
    if (checked) {
      return;
    }
    fireNonCancelableEvent(onChange, { value });
  }, styledControl: import_react6.default.createElement(
    "svg",
    { viewBox: "0 0 100 100", focusable: "false", "aria-hidden": "true" },
    import_react6.default.createElement("circle", { className: clsx_m_default(styles_css_default5["styled-circle-border"], (_b2 = {}, _b2[styles_css_default5["styled-circle-disabled"]] = disabled, _b2)), strokeWidth: isVisualRefresh ? 12 : 8, cx: 50, cy: 50, r: isVisualRefresh ? 44 : 46 }),
    import_react6.default.createElement("circle", { className: clsx_m_default(styles_css_default5["styled-circle-fill"], (_c2 = {}, _c2[styles_css_default5["styled-circle-disabled"]] = disabled, _c2[styles_css_default5["styled-circle-checked"]] = checked, _c2)), strokeWidth: 30, cx: 50, cy: 50, r: 35 })
  ) });
});

// node_modules/@cloudscape-design/components/table/selection-control/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/table/selection-control/styles.scoped.css";
var styles_css_default6 = {
  "root": "awsui_root_1ut8b_8i78g_93",
  "label": "awsui_label_1ut8b_8i78g_97",
  "stud": "awsui_stud_1ut8b_8i78g_113"
};

// node_modules/@cloudscape-design/components/table/selection-control/index.js
function SelectionControl(_a2) {
  var selectionType = _a2.selectionType, _b2 = _a2.indeterminate, indeterminate = _b2 === void 0 ? false : _b2, onShiftToggle = _a2.onShiftToggle, onFocusUp = _a2.onFocusUp, onFocusDown = _a2.onFocusDown, name = _a2.name, ariaLabel = _a2.ariaLabel, sharedProps = __rest(_a2, ["selectionType", "indeterminate", "onShiftToggle", "onFocusUp", "onFocusDown", "name", "ariaLabel"]);
  var controlId = useUniqueId();
  var isMultiSelection = selectionType === "multi";
  var setShiftState = function(event) {
    if (isMultiSelection) {
      onShiftToggle && onShiftToggle(event.shiftKey);
    }
  };
  var onMouseDownHandler = function(event) {
    setShiftState(event);
    if (isMultiSelection) {
      event.preventDefault();
    }
  };
  var handleKeyDown = function(event) {
    setShiftState(event);
    if (isMultiSelection) {
      if (event.keyCode === KeyCode.up) {
        event.preventDefault();
        onFocusUp && onFocusUp(event);
      }
      if (event.keyCode === KeyCode.down) {
        event.preventDefault();
        onFocusDown && onFocusDown(event);
      }
    }
  };
  var handleClick = function(event) {
    var target = event.currentTarget;
    var nativeInput = target.tagName === "INPUT" ? target : target.querySelector("input");
    nativeInput === null || nativeInput === void 0 ? void 0 : nativeInput.focus();
  };
  var selector = isMultiSelection ? import_react7.default.createElement(internal_default2, __assign({}, sharedProps, { controlId, indeterminate })) : import_react7.default.createElement(radio_button_default, __assign({}, sharedProps, { controlId, name, value: "", label: "" }));
  return import_react7.default.createElement(
    import_react7.default.Fragment,
    null,
    import_react7.default.createElement("label", { onKeyDown: handleKeyDown, onKeyUp: setShiftState, onMouseDown: onMouseDownHandler, onMouseUp: setShiftState, onClick: handleClick, htmlFor: controlId, className: clsx_m_default(styles_css_default6.label, styles_css_default6.root), "aria-label": ariaLabel }, selector),
    import_react7.default.createElement("span", { className: clsx_m_default(styles_css_default6.stud), "aria-hidden": true }, "\xA0")
  );
}

// node_modules/@cloudscape-design/components/table/use-selection.js
var import_react8 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/utils.js
var applyTrackBy = function(trackBy, item) {
  if (typeof trackBy === "function") {
    return trackBy(item);
  }
  return item[trackBy];
};
var getItemKey = function(trackBy, item, index) {
  if (!trackBy) {
    return index;
  }
  return applyTrackBy(trackBy, item);
};
var getTrackableValue = function(trackBy, item) {
  if (!trackBy) {
    return item;
  }
  return applyTrackBy(trackBy, item);
};
var getColumnKey = function(column, index) {
  return column.id || index;
};
var toContainerVariant = function(variant) {
  var isDefaultVariant = !variant || variant === "container";
  return isDefaultVariant ? "default" : variant;
};
function checkSortingState(columnDefinitions, sortingComparator) {
  var matchedColumn = columnDefinitions.filter(function(column) {
    return column.sortingComparator === sortingComparator;
  })[0];
  if (!matchedColumn) {
    warnOnce("Table", "Currently active sorting comparator was not found in any columns. Make sure to provide the same comparator function instance on each render.");
  }
}

// node_modules/@cloudscape-design/components/internal/utils/strings/join-strings.js
function joinStrings() {
  var strings = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    strings[_i] = arguments[_i];
  }
  return strings.filter(Boolean).join(" ") || void 0;
}

// node_modules/@cloudscape-design/components/table/use-selection.js
var _a;
var _b;
var _c;
var SELECTION_ITEM = "selection-item";
var SELECTION_ROOT = "selection-root";
function findSelectionControlByIndex(rootContainer, index) {
  if (index === -1) {
    return rootContainer.querySelector("[data-".concat(SELECTION_ITEM, '="all"] .').concat(styles_css_default6.root, " input"));
  }
  return rootContainer.querySelectorAll("[data-".concat(SELECTION_ITEM, '="item"] .').concat(styles_css_default6.root, " input"))[index];
}
function findRootContainer(element) {
  return findUpUntil(element, function(node) {
    return node.dataset.selectionRoot === "true";
  });
}
function useFocusMove(selectionType, totalItems) {
  if (selectionType !== "multi") {
    return {};
  }
  function moveFocus(sourceElement, fromIndex, direction) {
    var index = fromIndex;
    var rootContainer = findRootContainer(sourceElement);
    while (index >= -1 && index < totalItems) {
      index += direction;
      var control = findSelectionControlByIndex(rootContainer, index);
      if (control && !control.disabled) {
        control.focus();
        break;
      }
    }
  }
  var _a2 = [1, -1].map(function(direction) {
    return function(event) {
      var target = event.currentTarget;
      var itemNode = findUpUntil(target, function(node) {
        return node.dataset.selectionItem === "item";
      });
      var fromIndex = Array.prototype.indexOf.call(itemNode.parentElement.children, itemNode);
      moveFocus(target, fromIndex, direction);
    };
  }), moveFocusDown = _a2[0], moveFocusUp = _a2[1];
  return {
    moveFocusDown,
    moveFocusUp,
    moveFocus
  };
}
var ItemSet = function() {
  function ItemSet2(trackBy, items) {
    var _this = this;
    this.map = /* @__PURE__ */ new Map();
    this.put = function(item) {
      return _this.map.set.call(_this.map, getTrackableValue(_this.trackBy, item), item);
    };
    this.has = function(item) {
      return _this.map.has.call(_this.map, getTrackableValue(_this.trackBy, item));
    };
    this.forEach = this.map.forEach.bind(this.map);
    this.trackBy = trackBy;
    items.forEach(this.put);
  }
  return ItemSet2;
}();
var focusMarkers = {
  item: (_a = {}, _a["data-" + SELECTION_ITEM] = "item", _a),
  all: (_b = {}, _b["data-" + SELECTION_ITEM] = "all", _b),
  root: (_c = {}, _c["data-" + SELECTION_ROOT] = "true", _c)
};
function useSelection(_a2) {
  var _b2;
  var items = _a2.items, _c2 = _a2.selectedItems, selectedItems = _c2 === void 0 ? [] : _c2, selectionType = _a2.selectionType, _d = _a2.isItemDisabled, isItemDisabled = _d === void 0 ? function() {
    return false;
  } : _d, trackBy = _a2.trackBy, onSelectionChange = _a2.onSelectionChange, ariaLabels = _a2.ariaLabels;
  var _e = (0, import_react8.useState)(false), shiftPressed = _e[0], setShiftPressed = _e[1];
  var _f = (0, import_react8.useState)(null), lastClickedItem = _f[0], setLastClickedItem = _f[1];
  var selectionName = useUniqueId();
  var finalSelectedItems = selectionType === "single" ? selectedItems.slice(0, 1) : selectedItems;
  var selectedSet = new ItemSet(trackBy, finalSelectedItems);
  var itemIndexesMap = /* @__PURE__ */ new Map();
  items.forEach(function(item, i) {
    return itemIndexesMap.set(getTrackableValue(trackBy, item), i);
  });
  var isItemSelected = selectedSet.has.bind(selectedSet);
  var getItemState = function(item) {
    return {
      disabled: isItemDisabled(item),
      selected: isItemSelected(item)
    };
  };
  var _g = selectionType ? items.reduce(function(_a3, item) {
    var allDisabled2 = _a3[0], allEnabledSelected2 = _a3[1];
    var _b3 = getItemState(item), disabled = _b3.disabled, selected = _b3.selected;
    return [
      allDisabled2 && disabled,
      allEnabledSelected2 && (selected || disabled)
    ];
  }, [true, true]) : [true, true], allDisabled = _g[0], allEnabledSelected = _g[1];
  var hasSelected = finalSelectedItems.length > 0;
  var handleToggleAll = function() {
    var requestedItems = new ItemSet(trackBy, items);
    var newSelectedItems = allEnabledSelected ? deselectItems(requestedItems) : selectItems(requestedItems);
    fireNonCancelableEvent(onSelectionChange, { selectedItems: newSelectedItems });
  };
  var getRequestedItems = function(item) {
    var requestedItems = new ItemSet(trackBy, [item]);
    var lastClickedItemIndex = lastClickedItem ? itemIndexesMap.get(getTrackableValue(trackBy, lastClickedItem)) : -1;
    if (lastClickedItemIndex === void 0) {
      lastClickedItemIndex = -1;
    }
    if (shiftPressed && lastClickedItemIndex !== -1) {
      var currentItemIndex = itemIndexesMap.get(getTrackableValue(trackBy, item));
      var start = Math.min(currentItemIndex, lastClickedItemIndex);
      var end = Math.max(currentItemIndex, lastClickedItemIndex);
      items.slice(start, end + 1).forEach(function(item2) {
        return requestedItems.put(item2);
      });
    }
    return requestedItems;
  };
  var deselectItems = function(requestedItems) {
    var newSelectedItems = [];
    selectedItems.forEach(function(selectedItem) {
      var toUnselect = requestedItems.has(selectedItem);
      if (!toUnselect || isItemDisabled(selectedItem)) {
        newSelectedItems.push(selectedItem);
      }
    });
    return newSelectedItems;
  };
  var selectItems = function(requestedItems) {
    var newSelectedItems = __spreadArray([], selectedItems, true);
    requestedItems.forEach(function(newItem) {
      var _a3 = getItemState(newItem), selected = _a3.selected, disabled = _a3.disabled;
      if (!selected && !disabled) {
        newSelectedItems.push(newItem);
      }
    });
    return newSelectedItems;
  };
  var handleToggleItem = function(item) {
    return function() {
      var _a3 = getItemState(item), disabled = _a3.disabled, selected = _a3.selected;
      if (disabled || selectionType === "single" && selected) {
        return;
      }
      if (selectionType === "single") {
        fireNonCancelableEvent(onSelectionChange, { selectedItems: [item] });
      } else {
        var requestedItems = getRequestedItems(item);
        var selectedItems_1 = selected ? deselectItems(requestedItems) : selectItems(requestedItems);
        fireNonCancelableEvent(onSelectionChange, { selectedItems: selectedItems_1 });
        setLastClickedItem(item);
      }
    };
  };
  return {
    isItemSelected,
    selectAllProps: {
      name: selectionName,
      disabled: allDisabled,
      selectionType,
      indeterminate: hasSelected && !allEnabledSelected,
      checked: hasSelected && allEnabledSelected,
      onChange: handleToggleAll,
      ariaLabel: joinStrings(ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.selectionGroupLabel, (_b2 = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.allItemsSelectionLabel) === null || _b2 === void 0 ? void 0 : _b2.call(ariaLabels, { selectedItems }))
    },
    getItemSelectionProps: function(item) {
      var _a3;
      return {
        name: selectionName,
        selectionType,
        ariaLabel: joinStrings(ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.selectionGroupLabel, (_a3 = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.itemSelectionLabel) === null || _a3 === void 0 ? void 0 : _a3.call(ariaLabels, { selectedItems }, item)),
        onChange: handleToggleItem(item),
        checked: isItemSelected(item),
        disabled: isItemDisabled(item)
      };
    },
    updateShiftToggle: function(value) {
      setShiftPressed(value);
    }
  };
}

// node_modules/@cloudscape-design/components/table/header-cell/index.js
var import_react11 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/header-cell/utils.js
var stateToIcon = {
  sortable: "caret-down",
  ascending: "caret-up-filled",
  descending: "caret-down-filled"
};
var stateToAriaSort = {
  sortable: "none",
  ascending: "ascending",
  descending: "descending"
};
var getSortingStatus = function(sortable, sorted, descending, disabled) {
  if (sorted) {
    if (descending) {
      return "descending";
    }
    return "ascending";
  }
  if (sortable && !disabled) {
    return "sortable";
  }
  return void 0;
};
var getSortingIconName = function(sortingState) {
  return stateToIcon[sortingState];
};
var getAriaSort = function(sortingState) {
  return stateToAriaSort[sortingState];
};
var isSorted = function(column, sortingColumn) {
  return column === sortingColumn || column.sortingField !== void 0 && column.sortingField === sortingColumn.sortingField || column.sortingComparator !== void 0 && column.sortingComparator === sortingColumn.sortingComparator;
};

// node_modules/@cloudscape-design/components/table/header-cell/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/table/header-cell/styles.scoped.css";
var styles_css_default7 = {
  "header-cell": "awsui_header-cell_1spae_ov6lq_93",
  "header-cell-sticky": "awsui_header-cell-sticky_1spae_ov6lq_103",
  "header-cell-stuck": "awsui_header-cell-stuck_1spae_ov6lq_106",
  "header-cell-variant-full-page": "awsui_header-cell-variant-full-page_1spae_ov6lq_106",
  "header-cell-hidden": "awsui_header-cell-hidden_1spae_ov6lq_109",
  "header-cell-sortable": "awsui_header-cell-sortable_1spae_ov6lq_115",
  "header-cell-resizable": "awsui_header-cell-resizable_1spae_ov6lq_127",
  "sorting-icon": "awsui_sorting-icon_1spae_ov6lq_131",
  "header-cell-disabled": "awsui_header-cell-disabled_1spae_ov6lq_138",
  "header-cell-sorted": "awsui_header-cell-sorted_1spae_ov6lq_138",
  "header-cell-content": "awsui_header-cell-content_1spae_ov6lq_138",
  "header-cell-fake-focus": "awsui_header-cell-fake-focus_1spae_ov6lq_171",
  "header-cell-text": "awsui_header-cell-text_1spae_ov6lq_200",
  "header-cell-text-wrap": "awsui_header-cell-text-wrap_1spae_ov6lq_200",
  "header-cell-ascending": "awsui_header-cell-ascending_1spae_ov6lq_206",
  "header-cell-descending": "awsui_header-cell-descending_1spae_ov6lq_207"
};

// node_modules/@cloudscape-design/components/table/resizer/index.js
var import_react10 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/resizer/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/table/resizer/styles.scoped.css";
var styles_css_default8 = {
  "resize-active": "awsui_resize-active_x7peu_1tckh_93",
  "resize-active-with-focus": "awsui_resize-active-with-focus_x7peu_1tckh_93",
  "resizer": "awsui_resizer_x7peu_1tckh_98",
  "resizer-active": "awsui_resizer-active_x7peu_1tckh_114",
  "has-focus": "awsui_has-focus_x7peu_1tckh_123",
  "tracker": "awsui_tracker_x7peu_1tckh_146"
};

// node_modules/@cloudscape-design/components/table/use-column-widths.js
var import_react9 = __toESM(require_react());
var DEFAULT_WIDTH = 120;
var SELECTION_CELL_WIDTH = 54;
function checkProperty(column, name) {
  var value = column[name];
  if (typeof value !== "number" && typeof value !== "undefined") {
    warnOnce("Table", "resizableColumns feature requires ".concat(name, " property to be a number, got ").concat(value, ". The component may work incorrectly."));
  }
}
function checkColumnWidths(columnDefinitions) {
  for (var _i = 0, columnDefinitions_1 = columnDefinitions; _i < columnDefinitions_1.length; _i++) {
    var column = columnDefinitions_1[_i];
    checkProperty(column, "minWidth");
    checkProperty(column, "width");
  }
}
function readWidths(headerEl, columnDefinitions, hasSelection) {
  var result = {};
  for (var index = 0; index < columnDefinitions.length; index++) {
    var column = columnDefinitions[index];
    var id = getColumnKey(columnDefinitions[index], index);
    var width = column.width || 0;
    var minWidth = column.minWidth || width || DEFAULT_WIDTH;
    if (!width && index !== columnDefinitions.length - 1) {
      var colIndex = hasSelection ? index + 2 : index + 1;
      var colEl = headerEl.querySelector(".".concat(styles_css_default7["header-cell"], ":nth-child(").concat(colIndex, ")"));
      width = colEl.getBoundingClientRect().width;
    }
    result[id] = Math.max(width, minWidth);
  }
  return result;
}
function updateWidths(columnDefinitions, oldWidths, newWidth, colIndex) {
  var _a2;
  var definition = columnDefinitions[colIndex];
  var id = getColumnKey(definition, colIndex);
  var minWidth = typeof definition.minWidth === "number" ? definition.minWidth : DEFAULT_WIDTH;
  newWidth = Math.max(newWidth, minWidth);
  if (oldWidths[id] === newWidth) {
    return oldWidths;
  }
  return __assign(__assign({}, oldWidths), (_a2 = {}, _a2[id] = newWidth, _a2));
}
var WidthsContext = (0, import_react9.createContext)({
  totalWidth: 0,
  columnWidths: {},
  updateColumn: function() {
  }
});
function ColumnWidthsProvider(_a2) {
  var tableRef = _a2.tableRef, visibleColumnDefinitions = _a2.visibleColumnDefinitions, resizableColumns = _a2.resizableColumns, hasSelection = _a2.hasSelection, children = _a2.children;
  var visibleColumns = (0, import_react9.useRef)(null);
  var _b2 = (0, import_react9.useState)({}), columnWidths = _b2[0], setColumnWidths = _b2[1];
  (0, import_react9.useEffect)(function() {
    if (!resizableColumns) {
      return;
    }
    var lastVisible = visibleColumns.current;
    if (lastVisible) {
      var _loop_1 = function(index2) {
        var column = visibleColumnDefinitions[index2];
        var id = getColumnKey(column, index2);
        if (!columnWidths[id] && lastVisible.indexOf(column.id) === -1) {
          setColumnWidths(function(columnWidths2) {
            var _a3;
            return __assign(__assign({}, columnWidths2), (_a3 = {}, _a3[id] = column.width || DEFAULT_WIDTH, _a3));
          });
        }
      };
      for (var index = 0; index < visibleColumnDefinitions.length; index++) {
        _loop_1(index);
      }
    }
    visibleColumns.current = visibleColumnDefinitions.map(function(column) {
      return column.id;
    });
  }, [columnWidths, resizableColumns, visibleColumnDefinitions]);
  (0, import_react9.useEffect)(function() {
    if (!resizableColumns) {
      return;
    }
    setColumnWidths(function() {
      return readWidths(tableRef.current, visibleColumnDefinitions, hasSelection);
    });
  }, []);
  function updateColumn(colIndex, newWidth) {
    setColumnWidths(function(columnWidths2) {
      return updateWidths(visibleColumnDefinitions, columnWidths2, newWidth, colIndex);
    });
  }
  var totalWidth = visibleColumnDefinitions.reduce(function(total, column, index) {
    return total + (columnWidths[getColumnKey(column, index)] || DEFAULT_WIDTH);
  }, 0);
  if (hasSelection) {
    totalWidth += SELECTION_CELL_WIDTH;
  }
  return import_react9.default.createElement(WidthsContext.Provider, { value: { columnWidths, totalWidth, updateColumn } }, children);
}
function useColumnWidths() {
  return (0, import_react9.useContext)(WidthsContext);
}

// node_modules/@cloudscape-design/components/table/resizer/index.js
var AUTO_GROW_START_TIME = 10;
var AUTO_GROW_INTERVAL = 10;
var AUTO_GROW_INCREMENT = 5;
function Resizer(_a2) {
  var onDragMove = _a2.onDragMove, onFinish = _a2.onFinish, ariaLabelledby = _a2.ariaLabelledby, _b2 = _a2.minWidth, minWidth = _b2 === void 0 ? DEFAULT_WIDTH : _b2;
  var _c2 = (0, import_react10.useState)(false), isDragging = _c2[0], setIsDragging = _c2[1];
  var _d = (0, import_react10.useState)(), headerCell = _d[0], setHeaderCell = _d[1];
  var autoGrowTimeout = (0, import_react10.useRef)();
  var onFinishStable = useStableEventHandler(onFinish);
  var onDragStable = useStableEventHandler(onDragMove);
  var _e = (0, import_react10.useState)(false), resizerHasFocus = _e[0], setResizerHasFocus = _e[1];
  var _f = (0, import_react10.useState)(0), headerCellWidth = _f[0], setHeaderCellWidth = _f[1];
  (0, import_react10.useEffect)(function() {
    if (!isDragging && !resizerHasFocus || !headerCell) {
      return;
    }
    var rootElement = findUpUntil(headerCell, function(element) {
      return element.className.indexOf(styles_css_default.root) > -1;
    });
    var tableElement = rootElement.querySelector("table");
    var tracker = rootElement.querySelector(".".concat(styles_css_default8.tracker));
    var scrollParent = getOverflowParents(headerCell)[0];
    var _a3 = scrollParent.getBoundingClientRect(), leftEdge = _a3.left, rightEdge = _a3.right;
    var updateTrackerPosition = function(newOffset) {
      var scrollParentLeft = tableElement.getBoundingClientRect().left;
      tracker.style.top = headerCell.getBoundingClientRect().height + "px";
      tracker.style.left = newOffset - scrollParentLeft - 1 + "px";
    };
    var updateColumnWidth = function(newWidth) {
      var _a4 = headerCell.getBoundingClientRect(), right = _a4.right, width = _a4.width;
      var updatedWidth = newWidth < minWidth ? minWidth : newWidth;
      updateTrackerPosition(right + updatedWidth - width);
      setHeaderCellWidth(newWidth);
      onDragStable(newWidth);
    };
    var resizeColumn = function(offset) {
      if (offset > leftEdge) {
        var cellLeft = headerCell.getBoundingClientRect().left;
        var newWidth = offset - cellLeft;
        updateColumnWidth(newWidth);
      }
    };
    var onAutoGrow = function() {
      var width = headerCell.getBoundingClientRect().width;
      autoGrowTimeout.current = setTimeout(onAutoGrow, AUTO_GROW_INTERVAL);
      updateColumnWidth(width + AUTO_GROW_INCREMENT);
      scrollParent.scrollLeft += AUTO_GROW_INCREMENT;
    };
    var onMouseMove = function(event) {
      clearTimeout(autoGrowTimeout.current);
      var offset = event.pageX;
      if (offset > rightEdge) {
        autoGrowTimeout.current = setTimeout(onAutoGrow, AUTO_GROW_START_TIME);
      } else {
        resizeColumn(offset);
      }
    };
    var onMouseUp = function(event) {
      resizeColumn(event.pageX);
      setIsDragging(false);
      onFinishStable();
      clearTimeout(autoGrowTimeout.current);
    };
    var onKeyDown = function(event) {
      if (event.keyCode === KeyCode.left || event.keyCode === KeyCode.right) {
        event.preventDefault();
      }
      if (event.keyCode === KeyCode.left) {
        updateColumnWidth(headerCell.getBoundingClientRect().width - 10);
      }
      if (event.keyCode === KeyCode.right) {
        updateColumnWidth(headerCell.getBoundingClientRect().width + 10);
      }
    };
    updateTrackerPosition(headerCell.getBoundingClientRect().right);
    document.body.classList.add(styles_css_default8["resize-active"]);
    document.body.classList.remove(styles_css_default8["resize-active-with-focus"]);
    if (isDragging) {
      document.addEventListener("mousemove", onMouseMove);
      document.addEventListener("mouseup", onMouseUp);
    }
    if (resizerHasFocus) {
      document.body.classList.add(styles_css_default8["resize-active-with-focus"]);
      headerCell.addEventListener("keydown", onKeyDown);
    }
    return function() {
      clearTimeout(autoGrowTimeout.current);
      document.body.classList.remove(styles_css_default8["resize-active"]);
      document.removeEventListener("mousemove", onMouseMove);
      document.removeEventListener("mouseup", onMouseUp);
      headerCell.removeEventListener("keydown", onKeyDown);
    };
  }, [headerCell, isDragging, onDragStable, onFinishStable, resizerHasFocus, minWidth]);
  return import_react10.default.createElement("span", { className: clsx_m_default(styles_css_default8.resizer, isDragging && styles_css_default8["resizer-active"], resizerHasFocus && styles_css_default8["has-focus"]), onMouseDown: function(event) {
    if (event.button !== 0) {
      return;
    }
    event.preventDefault();
    var headerCell2 = findUpUntil(event.currentTarget, function(element) {
      return element.tagName.toLowerCase() === "th";
    });
    setIsDragging(true);
    setHeaderCell(headerCell2);
  }, onFocus: function(event) {
    var headerCell2 = findUpUntil(event.currentTarget, function(element) {
      return element.tagName.toLowerCase() === "th";
    });
    setHeaderCellWidth(headerCell2.getBoundingClientRect().width);
    setResizerHasFocus(true);
    setHeaderCell(headerCell2);
  }, onBlur: function() {
    setResizerHasFocus(false);
  }, role: "separator", "aria-orientation": "vertical", "aria-labelledby": ariaLabelledby, "aria-valuenow": headerCellWidth, "aria-valuetext": headerCellWidth.toString(), "aria-valuemin": minWidth, tabIndex: 0 });
}
function ResizeTracker() {
  return import_react10.default.createElement("span", { className: styles_css_default8.tracker });
}

// node_modules/@cloudscape-design/components/table/header-cell/index.js
function TableHeaderCell(_a2) {
  var _b2, _c2, _d;
  var className = _a2.className, style = _a2.style, tabIndex = _a2.tabIndex, column = _a2.column, activeSortingColumn = _a2.activeSortingColumn, sortingDescending = _a2.sortingDescending, sortingDisabled = _a2.sortingDisabled, wrapLines = _a2.wrapLines, showFocusRing = _a2.showFocusRing, hidden = _a2.hidden, onClick = _a2.onClick, colIndex = _a2.colIndex, onFocus = _a2.onFocus, onBlur = _a2.onBlur, updateColumn = _a2.updateColumn, resizableColumns = _a2.resizableColumns, onResizeFinish = _a2.onResizeFinish;
  var focusVisible = useFocusVisible();
  var sortable = !!column.sortingComparator || !!column.sortingField;
  var sorted = !!activeSortingColumn && isSorted(column, activeSortingColumn);
  var sortingStatus = getSortingStatus(sortable, sorted, !!sortingDescending, !!sortingDisabled);
  var handleClick = function() {
    return onClick({
      sortingColumn: column,
      isDescending: sorted ? !sortingDescending : false
    });
  };
  var handleKeyPress = function(_a3) {
    var e = _a3.nativeEvent;
    if (e.keyCode === KeyCode.enter || e.keyCode === KeyCode.space) {
      e.preventDefault();
      handleClick();
    }
  };
  var headerId = useUniqueId("table-header-");
  return import_react11.default.createElement(
    "th",
    { className: clsx_m_default(className, (_b2 = {}, _b2[styles_css_default7["header-cell-resizable"]] = !!resizableColumns, _b2[styles_css_default7["header-cell-sortable"]] = sortingStatus, _b2[styles_css_default7["header-cell-sorted"]] = sortingStatus === "ascending" || sortingStatus === "descending", _b2[styles_css_default7["header-cell-disabled"]] = sortingDisabled, _b2[styles_css_default7["header-cell-ascending"]] = sortingStatus === "ascending", _b2[styles_css_default7["header-cell-descending"]] = sortingStatus === "descending", _b2[styles_css_default7["header-cell-hidden"]] = hidden, _b2)), "aria-sort": sortingStatus && getAriaSort(sortingStatus), style, scope: "col" },
    import_react11.default.createElement(
      "div",
      __assign({ className: clsx_m_default(styles_css_default7["header-cell-content"], (_c2 = {}, _c2[styles_css_default7["header-cell-fake-focus"]] = showFocusRing && focusVisible["data-awsui-focus-visible"], _c2)), "aria-label": column.ariaLabel ? column.ariaLabel({
        sorted,
        descending: sorted && !!sortingDescending,
        disabled: !!sortingDisabled
      }) : void 0 }, sortingDisabled || !sortingStatus ? (_d = {}, _d["aria-disabled"] = "true", _d) : __assign(__assign({ onKeyPress: handleKeyPress, tabIndex, role: "button" }, focusVisible), { onClick: handleClick, onFocus, onBlur })),
      import_react11.default.createElement("div", { className: clsx_m_default(styles_css_default7["header-cell-text"], wrapLines && styles_css_default7["header-cell-text-wrap"]), id: headerId }, column.header),
      sortingStatus && import_react11.default.createElement(
        "span",
        { className: styles_css_default7["sorting-icon"] },
        import_react11.default.createElement(internal_default, { name: getSortingIconName(sortingStatus) })
      )
    ),
    resizableColumns && import_react11.default.createElement(
      import_react11.default.Fragment,
      null,
      import_react11.default.createElement(Resizer, { onDragMove: function(newWidth) {
        return updateColumn(colIndex, newWidth);
      }, onFinish: onResizeFinish, ariaLabelledby: headerId, minWidth: typeof column.minWidth === "string" ? parseInt(column.minWidth) : column.minWidth })
    )
  );
}

// node_modules/@cloudscape-design/components/table/thead.js
var Thead = import_react12.default.forwardRef(function(_a2, outerRef) {
  var containerWidth = _a2.containerWidth, selectionType = _a2.selectionType, selectAllProps = _a2.selectAllProps, columnDefinitions = _a2.columnDefinitions, sortingColumn = _a2.sortingColumn, sortingDisabled = _a2.sortingDisabled, sortingDescending = _a2.sortingDescending, resizableColumns = _a2.resizableColumns, variant = _a2.variant, wrapLines = _a2.wrapLines, onFocusMove = _a2.onFocusMove, onCellFocus = _a2.onCellFocus, onCellBlur = _a2.onCellBlur, onSortingChange = _a2.onSortingChange, onResizeFinish = _a2.onResizeFinish, singleSelectionHeaderAriaLabel = _a2.singleSelectionHeaderAriaLabel, _b2 = _a2.showFocusRing, showFocusRing = _b2 === void 0 ? null : _b2, _c2 = _a2.sticky, sticky = _c2 === void 0 ? false : _c2, _d = _a2.hidden, hidden = _d === void 0 ? false : _d, _e = _a2.stuck, stuck = _e === void 0 ? false : _e;
  var headerCellClass = clsx_m_default(styles_css_default7["header-cell"], styles_css_default7["header-cell-variant-".concat(variant)], sticky && styles_css_default7["header-cell-sticky"], stuck && styles_css_default7["header-cell-stuck"]);
  var selectionCellClass = clsx_m_default(styles_css_default["selection-control"], styles_css_default["selection-control-header"]);
  var _f = useColumnWidths(), columnWidths = _f.columnWidths, totalWidth = _f.totalWidth, updateColumn = _f.updateColumn;
  return import_react12.default.createElement(
    "thead",
    { className: clsx_m_default(!hidden && styles_css_default["thead-active"]) },
    import_react12.default.createElement(
      "tr",
      __assign({}, focusMarkers.all, { ref: outerRef }),
      selectionType === "multi" && import_react12.default.createElement(
        "th",
        { className: clsx_m_default(headerCellClass, selectionCellClass, hidden && styles_css_default7["header-cell-hidden"]), scope: "col" },
        import_react12.default.createElement(SelectionControl, __assign({ onFocusDown: function(event) {
          return onFocusMove(event.target, -1, 1);
        } }, selectAllProps, hidden ? { tabIndex: -1 } : {}))
      ),
      selectionType === "single" && import_react12.default.createElement(
        "th",
        { className: clsx_m_default(headerCellClass, selectionCellClass, hidden && styles_css_default7["header-cell-hidden"]), scope: "col" },
        import_react12.default.createElement(ScreenreaderOnly, null, singleSelectionHeaderAriaLabel)
      ),
      columnDefinitions.map(function(column, colIndex) {
        var widthOverride;
        if (resizableColumns) {
          if (columnWidths) {
            widthOverride = columnWidths[getColumnKey(column, colIndex)];
          }
          if (colIndex === columnDefinitions.length - 1 && containerWidth && containerWidth > totalWidth) {
            widthOverride = "auto";
          }
        }
        return import_react12.default.createElement(TableHeaderCell, { key: getColumnKey(column, colIndex), className: headerCellClass, style: {
          width: widthOverride || column.width,
          minWidth: sticky ? void 0 : column.minWidth,
          maxWidth: resizableColumns || sticky ? void 0 : column.maxWidth
        }, tabIndex: sticky ? -1 : 0, showFocusRing: colIndex === showFocusRing, column, activeSortingColumn: sortingColumn, sortingDescending, sortingDisabled, wrapLines, hidden, colIndex, updateColumn, onResizeFinish: function() {
          return onResizeFinish(columnWidths);
        }, resizableColumns, onClick: function(detail) {
          return fireNonCancelableEvent(onSortingChange, detail);
        }, onFocus: function() {
          return onCellFocus === null || onCellFocus === void 0 ? void 0 : onCellFocus(colIndex);
        }, onBlur: onCellBlur });
      })
    )
  );
});
var thead_default = Thead;

// node_modules/@cloudscape-design/components/table/body-cell/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/table/body-cell/styles.scoped.css";
var styles_css_default9 = {
  "body-cell": "awsui_body-cell_c6tup_c7aag_9",
  "body-cell-wrap": "awsui_body-cell-wrap_c6tup_c7aag_18",
  "body-cell-first-row": "awsui_body-cell-first-row_c6tup_c7aag_31",
  "body-cell-last-row": "awsui_body-cell-last-row_c6tup_c7aag_34",
  "body-cell-selected": "awsui_body-cell-selected_c6tup_c7aag_37",
  "body-cell-next-selected": "awsui_body-cell-next-selected_c6tup_c7aag_56",
  "body-cell-prev-selected": "awsui_body-cell-prev-selected_c6tup_c7aag_60"
};

// node_modules/@cloudscape-design/components/table/body-cell/index.js
var import_react13 = __toESM(require_react());
function TableBodyCell(_a2) {
  var className = _a2.className, style = _a2.style, children = _a2.children, wrapLines = _a2.wrapLines, isFirstRow = _a2.isFirstRow, isLastRow = _a2.isLastRow, isSelected = _a2.isSelected, isNextSelected = _a2.isNextSelected, isPrevSelected = _a2.isPrevSelected;
  return import_react13.default.createElement("td", { style, className: clsx_m_default(className, styles_css_default9["body-cell"], wrapLines && styles_css_default9["body-cell-wrap"], isFirstRow && styles_css_default9["body-cell-first-row"], isLastRow && styles_css_default9["body-cell-last-row"], isSelected && styles_css_default9["body-cell-selected"], isNextSelected && styles_css_default9["body-cell-next-selected"], isPrevSelected && styles_css_default9["body-cell-prev-selected"]) }, children);
}
function TableBodyCellContent(_a2) {
  var item = _a2.item, column = _a2.column, rest = __rest(_a2, ["item", "column"]);
  return import_react13.default.createElement(TableBodyCell, __assign({}, rest), column.cell(item));
}

// node_modules/@cloudscape-design/components/table/use-row-events.js
function useRowEvents(_a2) {
  var onRowClick = _a2.onRowClick, onRowContextMenu = _a2.onRowContextMenu;
  var onRowClickHandler = function(rowIndex, item, event) {
    var tableCell = findUpUntil(event.target, function(element) {
      return element.tagName.toLowerCase() === "td";
    });
    if (!tableCell || !tableCell.classList.contains(styles_css_default["selection-control"])) {
      var details = { rowIndex, item };
      fireNonCancelableEvent(onRowClick, details);
    }
  };
  var onRowContextMenuHandler = function(rowIndex, item, event) {
    var details = {
      rowIndex,
      item,
      clientX: event.clientX,
      clientY: event.clientY
    };
    fireCancelableEvent(onRowContextMenu, details, event);
  };
  return {
    onRowClickHandler: onRowClick && onRowClickHandler,
    onRowContextMenuHandler: onRowContextMenu && onRowContextMenuHandler
  };
}

// node_modules/@cloudscape-design/components/internal/hooks/use-scroll-sync/index.js
var import_react14 = __toESM(require_react());
function useScrollSync(refs, disabled) {
  if (disabled === void 0) {
    disabled = false;
  }
  var activeElement = (0, import_react14.useRef)(null);
  var onScroll = function(event) {
    var targetElement = event.target;
    if (targetElement && (activeElement.current === null || activeElement.current === targetElement)) {
      requestAnimationFrame(function() {
        activeElement.current = targetElement;
        refs.forEach(function(ref) {
          var element = ref.current;
          if (element && element !== targetElement) {
            element.scrollLeft = targetElement.scrollLeft;
          }
        });
        requestAnimationFrame(function() {
          activeElement.current = null;
        });
      });
    }
  };
  return !disabled ? onScroll : void 0;
}

// node_modules/@cloudscape-design/components/table/sticky-header.js
var import_react16 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/use-sticky-header.js
var import_react15 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/sticky-scrolling.js
function stickyScrolling(containerRef, stickyRef) {
  var scrollToTop = function() {
    if (!containerRef.current || !stickyRef.current) {
      return;
    }
    var scrollingOffset = calculateScrollingOffset(containerRef.current, stickyRef.current);
    if (scrollingOffset > 0) {
      scrollUpBy(scrollingOffset, containerRef.current);
    }
  };
  var scrollToItem = function(item) {
    if (!item || !containerRef.current || !stickyRef.current) {
      return;
    }
    var stickyBottom = stickyRef.current.getBoundingClientRect().bottom;
    var scrollingOffset = stickyBottom - item.getBoundingClientRect().top;
    if (scrollingOffset > 0) {
      scrollUpBy(scrollingOffset, containerRef.current);
    }
  };
  return {
    scrollToTop,
    scrollToItem
  };
}
function calculateScrollingOffset(container, sticky) {
  var stickyRect = sticky.getBoundingClientRect();
  var containerRect = container.getBoundingClientRect();
  return stickyRect.top - containerRect.top;
}
function scrollUpBy(amount, container) {
  var parent = getOverflowParents(container);
  if (parent.length) {
    parent[0].scrollTop -= amount;
  } else {
    window.scrollTo({ top: window.pageYOffset - amount });
  }
}

// node_modules/@cloudscape-design/components/table/use-sticky-header.js
function syncSizes(from, to) {
  var fromCells = Array.prototype.slice.apply(from.children);
  var toCells = Array.prototype.slice.apply(to.children);
  for (var i = 0; i < fromCells.length; i++) {
    var width = fromCells[i].style.width;
    if (width !== "auto") {
      width = "".concat(fromCells[i].offsetWidth, "px");
    }
    toCells[i].style.width = width;
  }
}
var useStickyHeader = function(tableRef, theadRef, secondaryTheadRef, secondaryTableRef, tableWrapperRef) {
  var isMobile = useMobile();
  var syncColumnHeaderWidths = (0, import_react15.useCallback)(function() {
    if (tableRef.current && theadRef.current && secondaryTheadRef.current && secondaryTableRef.current && tableWrapperRef.current) {
      syncSizes(theadRef.current, secondaryTheadRef.current);
      secondaryTableRef.current.style.width = "".concat(tableRef.current.offsetWidth, "px");
      tableWrapperRef.current.style.marginTop = "-".concat(theadRef.current.offsetHeight, "px");
    }
  }, [theadRef, secondaryTheadRef, secondaryTableRef, tableWrapperRef, tableRef]);
  (0, import_react15.useLayoutEffect)(function() {
    syncColumnHeaderWidths();
    setTimeout(function() {
      return syncColumnHeaderWidths();
    }, 0);
    var secondaryTable = secondaryTableRef.current;
    var primaryTable = tableWrapperRef.current;
    return function() {
      if (secondaryTable) {
        secondaryTable.style.width = "";
      }
      if (primaryTable) {
        primaryTable.style.marginTop = "";
      }
    };
  });
  useResizeObserver(theadRef, syncColumnHeaderWidths);
  var scrollToTop = function() {
    if (!isMobile && theadRef.current && secondaryTheadRef.current && tableWrapperRef.current) {
      var scrollDist = calculateScrollingOffset(theadRef.current, secondaryTheadRef.current);
      if (scrollDist > 0) {
        scrollUpBy(scrollDist, tableWrapperRef.current);
      }
    }
  };
  var scrollToItem = stickyScrolling(tableWrapperRef, secondaryTheadRef).scrollToItem;
  var scrollToRow = function(itemNode) {
    if (!isMobile) {
      scrollToItem(itemNode);
    }
  };
  return { scrollToRow, scrollToTop };
};

// node_modules/@cloudscape-design/components/table/sticky-header.js
var sticky_header_default = (0, import_react16.forwardRef)(StickyHeader);
function StickyHeader(_a2, ref) {
  var _b2;
  var variant = _a2.variant, theadProps = _a2.theadProps, wrapperRef = _a2.wrapperRef, theadRef = _a2.theadRef, secondaryWrapperRef = _a2.secondaryWrapperRef, onScroll = _a2.onScroll, tableRef = _a2.tableRef, tableHasHeader = _a2.tableHasHeader;
  var secondaryTheadRef = (0, import_react16.useRef)(null);
  var secondaryTableRef = (0, import_react16.useRef)(null);
  var isStuck = (0, import_react16.useContext)(StickyHeaderContext).isStuck;
  var _c2 = (0, import_react16.useState)(null), focusedColumn = _c2[0], setFocusedColumn = _c2[1];
  var _d = useStickyHeader(tableRef, theadRef, secondaryTheadRef, secondaryTableRef, wrapperRef), scrollToRow = _d.scrollToRow, scrollToTop = _d.scrollToTop;
  (0, import_react16.useImperativeHandle)(ref, function() {
    return { scrollToTop, scrollToRow, setFocusedColumn };
  });
  return import_react16.default.createElement(
    "div",
    {
      className: clsx_m_default(styles_css_default["header-secondary"], styles_css_default["variant-".concat(variant)], (_b2 = {}, _b2[styles_css_default.stuck] = isStuck, _b2[styles_css_default["table-has-header"]] = tableHasHeader, _b2)),
      "aria-hidden": true,
      tabIndex: -1,
      ref: secondaryWrapperRef,
      onScroll
    },
    import_react16.default.createElement(
      "table",
      { className: clsx_m_default(styles_css_default.table, styles_css_default["table-layout-fixed"]), role: "table", ref: secondaryTableRef },
      import_react16.default.createElement(thead_default, __assign({ ref: secondaryTheadRef, sticky: true, stuck: isStuck, showFocusRing: focusedColumn }, theadProps))
    )
  );
}

// node_modules/@cloudscape-design/components/table/sticky-scrollbar.js
var import_react18 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/use-sticky-scrollbar.js
var import_react17 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/utils/browser-scrollbar-size.js
var browserScrollbarSize = calculateOnce(function() {
  if (typeof document === "undefined") {
    return { width: 0, height: 0 };
  }
  var scrollDiv = document.createElement("div");
  scrollDiv.style.overflow = "scroll";
  scrollDiv.style.height = "100px";
  scrollDiv.style.width = "100px";
  scrollDiv.style.position = "absolute";
  scrollDiv.style.top = "-9999px";
  scrollDiv.style.left = "-9999px";
  document.body.appendChild(scrollDiv);
  var width = scrollDiv.offsetWidth - scrollDiv.clientWidth;
  var height = scrollDiv.offsetHeight - scrollDiv.clientHeight;
  document.body.removeChild(scrollDiv);
  return { width, height };
});

// node_modules/@cloudscape-design/components/table/use-sticky-scrollbar.js
var updatePosition = function(tableEl, wrapperEl, scrollbarEl, scrollbarContentEl, hasContainingBlock, consideredFooterHeight) {
  if (!tableEl || !scrollbarEl || !wrapperEl) {
    return;
  }
  var parent = getOverflowParentDimensions(wrapperEl)[0];
  var parentBottom = parent.top + parent.height;
  var _a2 = tableEl.getBoundingClientRect(), tableTop = _a2.top, tableBottom = _a2.bottom, tableWidth = _a2.width;
  var wrapperWidth = wrapperEl.getBoundingClientRect().width;
  var scrollbarHeight = browserScrollbarSize().height;
  var scrollBarCorrection = scrollbarHeight > 0 ? scrollbarHeight : -15 / 2;
  var tableBottomIsVisible = parentBottom - consideredFooterHeight >= tableBottom + scrollBarCorrection;
  var tableTopIsHidden = tableTop >= parentBottom - consideredFooterHeight - scrollBarCorrection;
  var areaIsScrollable = tableWidth > wrapperWidth;
  if (tableBottomIsVisible || tableTopIsHidden || !areaIsScrollable) {
    scrollbarEl.classList.remove(styles_css_default["sticky-scrollbar-visible"]);
  } else {
    if (!scrollbarEl.classList.contains(styles_css_default["sticky-scrollbar-visible"])) {
      requestAnimationFrame(function() {
        scrollbarEl.scrollLeft = wrapperEl.scrollLeft;
      });
    }
    scrollbarEl.classList.add(styles_css_default["sticky-scrollbar-visible"]);
  }
  if (scrollbarHeight && scrollbarEl && scrollbarContentEl) {
    scrollbarEl.style.height = "".concat(scrollbarHeight, "px");
    scrollbarContentEl.style.height = "".concat(scrollbarHeight, "px");
  }
  if (tableEl && wrapperEl && scrollbarContentEl && scrollbarEl) {
    var parent_1 = getOverflowParentDimensions(wrapperEl)[0];
    var wrapperElRect = wrapperEl.getBoundingClientRect();
    var tableElRect = tableEl.getBoundingClientRect();
    scrollbarEl.style.width = "".concat(wrapperElRect.width, "px");
    scrollbarContentEl.style.width = "".concat(tableElRect.width, "px");
    scrollbarEl.style.left = hasContainingBlock ? "0px" : "".concat(wrapperElRect.left, "px");
    scrollbarEl.style.top = hasContainingBlock ? "0px" : "".concat(Math.min(parent_1.top + parent_1.height, window.innerHeight - consideredFooterHeight), "px");
  }
};
function useStickyScrollbar(scrollbarRef, scrollbarContentRef, tableRef, wrapperRef, footerHeight) {
  var _a2 = (0, import_react17.useState)(false), hasContainingBlock = _a2[0], setHasContainingBlock = _a2[1];
  var _b2 = (0, import_react17.useState)(false), hasOverflowParent = _b2[0], setHasOverflowParent = _b2[1];
  var consideredFooterHeight = hasContainingBlock || hasOverflowParent ? 0 : footerHeight;
  (0, import_react17.useEffect)(function() {
    if (supportsStickyPosition()) {
      var scrollHandler_1 = function() {
        updatePosition(tableRef.current, wrapperRef.current, scrollbarRef.current, scrollbarContentRef.current, hasContainingBlock, consideredFooterHeight);
      };
      scrollHandler_1();
      window.addEventListener("scroll", scrollHandler_1, true);
      return function() {
        window.removeEventListener("scroll", scrollHandler_1, true);
      };
    }
  }, [scrollbarRef, tableRef, wrapperRef, consideredFooterHeight, scrollbarContentRef, hasContainingBlock]);
  var wrapperEl = wrapperRef.current;
  (0, import_react17.useEffect)(function() {
    if (wrapperEl && supportsStickyPosition()) {
      setHasContainingBlock(!!getContainingBlock(wrapperEl));
      setHasOverflowParent(!!getOverflowParents(wrapperEl)[0]);
    }
  }, [wrapperEl]);
  (0, import_react17.useEffect)(function() {
    if (supportsStickyPosition() && tableRef.current) {
      var observer_1 = new ResizeObserver(function(entries) {
        if (scrollbarContentRef.current) {
          scrollbarContentRef.current.style.width = "".concat(entries[0].borderBoxSize[0].inlineSize, "px");
          updatePosition(tableRef.current, wrapperRef.current, scrollbarRef.current, scrollbarContentRef.current, hasContainingBlock, consideredFooterHeight);
        }
      });
      observer_1.observe(tableRef.current);
      return function() {
        observer_1.disconnect();
      };
    }
  }, [scrollbarContentRef, scrollbarRef, tableRef, wrapperRef, consideredFooterHeight, hasContainingBlock]);
  (0, import_react17.useEffect)(function() {
    if (supportsStickyPosition()) {
      var resizeHandler_1 = function() {
        updatePosition(tableRef.current, wrapperRef.current, scrollbarRef.current, scrollbarContentRef.current, hasContainingBlock, consideredFooterHeight);
      };
      window.addEventListener("resize", resizeHandler_1);
      return function() {
        window.removeEventListener("resize", resizeHandler_1);
      };
    }
  }, [tableRef, wrapperRef, scrollbarRef, scrollbarContentRef, hasContainingBlock, consideredFooterHeight]);
}

// node_modules/@cloudscape-design/components/table/sticky-scrollbar.js
var sticky_scrollbar_default = (0, import_react18.forwardRef)(StickyScrollbar);
function StickyScrollbar(_a2, ref) {
  var wrapperRef = _a2.wrapperRef, tableRef = _a2.tableRef, onScroll = _a2.onScroll;
  var scrollbarRef = import_react18.default.useRef(null);
  var scrollbarContentRef = import_react18.default.useRef(null);
  var isRefresh = useVisualRefresh();
  var mergedRef = useMergeRefs(ref, scrollbarRef);
  var offsetBottomClassic = useAppLayoutContext().stickyOffsetBottom;
  var offsetBottomVisualRefresh = (0, import_react18.useContext)(AppLayoutContext).offsetBottom;
  var offsetBottom = isRefresh ? offsetBottomVisualRefresh : offsetBottomClassic;
  useStickyScrollbar(scrollbarRef, scrollbarContentRef, tableRef, wrapperRef, offsetBottom);
  return import_react18.default.createElement(
    "div",
    { ref: mergedRef, className: styles_css_default["sticky-scrollbar"], onScroll },
    import_react18.default.createElement("div", { ref: scrollbarContentRef, className: styles_css_default["sticky-scrollbar-content"] })
  );
}

// node_modules/@cloudscape-design/components/table/use-mouse-down-target.js
var import_react19 = __toESM(require_react());
var useEventListenersSingleton = createSingletonHandler(function(setTarget) {
  function handleMouseDown(event) {
    setTarget(event.target);
  }
  function handleKeyDown() {
    setTarget(null);
  }
  window.addEventListener("mousedown", handleMouseDown);
  window.addEventListener("keydown", handleKeyDown);
  return function() {
    window.removeEventListener("mousedown", handleMouseDown);
    window.removeEventListener("keydown", handleKeyDown);
  };
});
function useMouseDownTarget() {
  var mouseDownTargetRef = (0, import_react19.useRef)(null);
  useEventListenersSingleton(function(target) {
    mouseDownTargetRef.current = target;
  });
  return function() {
    return mouseDownTargetRef.current;
  };
}

// node_modules/@cloudscape-design/components/table/internal.js
var InternalTable = import_react20.default.forwardRef(function(_a2, ref) {
  var _b2;
  var header = _a2.header, footer = _a2.footer, empty = _a2.empty, filter = _a2.filter, pagination = _a2.pagination, preferences = _a2.preferences, items = _a2.items, columnDefinitions = _a2.columnDefinitions, trackBy = _a2.trackBy, loading = _a2.loading, loadingText = _a2.loadingText, selectionType = _a2.selectionType, selectedItems = _a2.selectedItems, isItemDisabled = _a2.isItemDisabled, ariaLabels = _a2.ariaLabels, onSelectionChange = _a2.onSelectionChange, onSortingChange = _a2.onSortingChange, sortingColumn = _a2.sortingColumn, sortingDescending = _a2.sortingDescending, sortingDisabled = _a2.sortingDisabled, visibleColumns = _a2.visibleColumns, stickyHeader = _a2.stickyHeader, stickyHeaderVerticalOffset = _a2.stickyHeaderVerticalOffset, onRowClick = _a2.onRowClick, onRowContextMenu = _a2.onRowContextMenu, wrapLines = _a2.wrapLines, resizableColumns = _a2.resizableColumns, onColumnWidthsChange = _a2.onColumnWidthsChange, variant = _a2.variant, __internalRootRef = _a2.__internalRootRef, rest = __rest(_a2, ["header", "footer", "empty", "filter", "pagination", "preferences", "items", "columnDefinitions", "trackBy", "loading", "loadingText", "selectionType", "selectedItems", "isItemDisabled", "ariaLabels", "onSelectionChange", "onSortingChange", "sortingColumn", "sortingDescending", "sortingDisabled", "visibleColumns", "stickyHeader", "stickyHeaderVerticalOffset", "onRowClick", "onRowContextMenu", "wrapLines", "resizableColumns", "onColumnWidthsChange", "variant", "__internalRootRef"]);
  var baseProps = getBaseProps(rest);
  stickyHeader = stickyHeader && supportsStickyPosition();
  var _c2 = useContainerQuery(function(_a3) {
    var width = _a3.width;
    return width;
  }), containerWidth = _c2[0], wrapperMeasureRef = _c2[1];
  var wrapperRefObject = (0, import_react20.useRef)(null);
  var wrapperRef = useMergeRefs(wrapperMeasureRef, wrapperRefObject);
  var _d = useContainerQuery(function(_a3) {
    var width = _a3.width;
    return width;
  }), tableWidth = _d[0], tableMeasureRef = _d[1];
  var tableRefObject = (0, import_react20.useRef)(null);
  var tableRef = useMergeRefs(tableMeasureRef, tableRefObject);
  var secondaryWrapperRef = import_react20.default.useRef(null);
  var theadRef = (0, import_react20.useRef)(null);
  var stickyHeaderRef = import_react20.default.useRef(null);
  var scrollbarRef = import_react20.default.useRef(null);
  (0, import_react20.useImperativeHandle)(ref, function() {
    var _a3;
    return { scrollToTop: ((_a3 = stickyHeaderRef.current) === null || _a3 === void 0 ? void 0 : _a3.scrollToTop) || function() {
      return void 0;
    } };
  });
  var handleScroll = useScrollSync([wrapperRefObject, scrollbarRef, secondaryWrapperRef], !supportsStickyPosition());
  var _e = useFocusMove(selectionType, items.length), moveFocusDown = _e.moveFocusDown, moveFocusUp = _e.moveFocusUp, moveFocus = _e.moveFocus;
  var _f = useRowEvents({ onRowClick, onRowContextMenu }), onRowClickHandler = _f.onRowClickHandler, onRowContextMenuHandler = _f.onRowContextMenuHandler;
  var visibleColumnDefinitions = visibleColumns ? columnDefinitions.filter(function(column) {
    return column.id && visibleColumns.indexOf(column.id) !== -1;
  }) : columnDefinitions;
  var _g = useSelection({
    items,
    trackBy,
    selectedItems,
    selectionType,
    isItemDisabled,
    onSelectionChange,
    ariaLabels
  }), isItemSelected = _g.isItemSelected, selectAllProps = _g.selectAllProps, getItemSelectionProps = _g.getItemSelectionProps, updateShiftToggle = _g.updateShiftToggle;
  if (loading) {
    selectAllProps.disabled = true;
  }
  if (isDevelopment) {
    if (resizableColumns) {
      checkColumnWidths(columnDefinitions);
    }
    if (sortingColumn === null || sortingColumn === void 0 ? void 0 : sortingColumn.sortingComparator) {
      checkSortingState(columnDefinitions, sortingColumn.sortingComparator);
    }
  }
  var isRefresh = useVisualRefresh();
  var computedVariant = isRefresh ? variant : ["embedded", "full-page"].indexOf(variant) > -1 ? "container" : variant;
  var hasHeader = !!(header || filter || pagination || preferences);
  var theadProps = {
    containerWidth,
    selectionType,
    selectAllProps,
    columnDefinitions: visibleColumnDefinitions,
    variant: computedVariant,
    wrapLines,
    resizableColumns,
    sortingColumn,
    sortingDisabled,
    sortingDescending,
    onSortingChange,
    onFocusMove: moveFocus,
    onResizeFinish: function(newWidth) {
      var widthsDetail = columnDefinitions.map(function(column, index) {
        return newWidth[getColumnKey(column, index)] || column.width || DEFAULT_WIDTH;
      });
      var widthsChanged = widthsDetail.some(function(width, index) {
        return columnDefinitions[index].width !== width;
      });
      if (widthsChanged) {
        fireNonCancelableEvent(onColumnWidthsChange, { widths: widthsDetail });
      }
    },
    singleSelectionHeaderAriaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.selectionGroupLabel
  };
  var isWrapperScrollable = tableWidth && containerWidth && tableWidth > containerWidth;
  var wrapperProps = isWrapperScrollable ? { role: "region", tabIndex: 0, "aria-label": ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tableLabel } : {};
  var focusVisibleProps = useFocusVisible();
  var getMouseDownTarget = useMouseDownTarget();
  var hasDynamicHeight = computedVariant === "full-page";
  var overlapElement = useDynamicOverlap({ disabled: !hasDynamicHeight });
  return import_react20.default.createElement(
    ColumnWidthsProvider,
    { tableRef: tableRefObject, visibleColumnDefinitions, resizableColumns, hasSelection: !!selectionType },
    import_react20.default.createElement(
      InternalContainer,
      __assign({}, baseProps, { __internalRootRef, className: clsx_m_default(baseProps.className, styles_css_default.root), header: import_react20.default.createElement(
        import_react20.default.Fragment,
        null,
        hasHeader && import_react20.default.createElement(
          "div",
          { ref: overlapElement, className: clsx_m_default(hasDynamicHeight && [styles_css_default["dark-header"], "awsui-context-content-header"]) },
          import_react20.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default["header-controls"], styles_css_default["variant-".concat(computedVariant)]) },
            import_react20.default.createElement(ToolsHeader, { header, filter, pagination, preferences })
          )
        ),
        stickyHeader && import_react20.default.createElement(sticky_header_default, { ref: stickyHeaderRef, variant: computedVariant, theadProps, wrapperRef: wrapperRefObject, theadRef, secondaryWrapperRef, tableRef: tableRefObject, onScroll: handleScroll, tableHasHeader: hasHeader })
      ), disableHeaderPaddings: true, disableContentPaddings: true, variant: toContainerVariant(computedVariant), __disableFooterPaddings: true, __disableFooterDivider: true, footer: footer && import_react20.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default["footer-wrapper"], styles_css_default["variant-".concat(computedVariant)]) },
        import_react20.default.createElement("hr", { className: styles_css_default.divider }),
        import_react20.default.createElement("div", { className: styles_css_default.footer }, footer)
      ), __stickyHeader: stickyHeader, __stickyOffset: stickyHeaderVerticalOffset }, focusMarkers.root),
      import_react20.default.createElement(
        "div",
        __assign({ ref: wrapperRef, className: clsx_m_default(styles_css_default.wrapper, styles_css_default["variant-".concat(computedVariant)], (_b2 = {}, _b2[styles_css_default["has-footer"]] = !!footer, _b2[styles_css_default["has-header"]] = hasHeader, _b2)), onScroll: handleScroll }, wrapperProps, focusVisibleProps),
        import_react20.default.createElement(
          "table",
          {
            ref: tableRef,
            className: clsx_m_default(styles_css_default.table, resizableColumns && styles_css_default["table-layout-fixed"]),
            role: "table",
            "aria-label": ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tableLabel
          },
          import_react20.default.createElement(thead_default, __assign({ ref: theadRef, hidden: stickyHeader, onCellFocus: function(colIndex) {
            var _a3;
            return (_a3 = stickyHeaderRef.current) === null || _a3 === void 0 ? void 0 : _a3.setFocusedColumn(colIndex);
          }, onCellBlur: function() {
            var _a3;
            return (_a3 = stickyHeaderRef.current) === null || _a3 === void 0 ? void 0 : _a3.setFocusedColumn(null);
          } }, theadProps)),
          import_react20.default.createElement("tbody", null, loading || items.length === 0 ? import_react20.default.createElement(
            "tr",
            null,
            import_react20.default.createElement(
              "td",
              { colSpan: selectionType ? visibleColumnDefinitions.length + 1 : visibleColumnDefinitions.length, className: styles_css_default["cell-merged"] },
              import_react20.default.createElement("div", { className: styles_css_default["cell-merged-content"], style: {
                width: supportsStickyPosition() && containerWidth && Math.floor(containerWidth) || void 0
              } }, loading ? import_react20.default.createElement(
                StatusIndicator,
                { type: "loading", className: styles_css_default.loading, wrapText: true },
                import_react20.default.createElement(live_region_default, { visible: true }, loadingText)
              ) : import_react20.default.createElement("div", { className: styles_css_default.empty }, empty))
            )
          ) : items.map(function(item, rowIndex) {
            var firstVisible = rowIndex === 0;
            var lastVisible = rowIndex === items.length - 1;
            var isSelected = !!selectionType && isItemSelected(item);
            var isPrevSelected = !!selectionType && !firstVisible && isItemSelected(items[rowIndex - 1]);
            var isNextSelected = !!selectionType && !lastVisible && isItemSelected(items[rowIndex + 1]);
            return import_react20.default.createElement(
              "tr",
              __assign({ key: getItemKey(trackBy, item, rowIndex), className: clsx_m_default(styles_css_default.row, isSelected && styles_css_default["row-selected"]), onFocus: function(_a3) {
                var _b3;
                var currentTarget = _a3.currentTarget;
                if (!currentTarget.contains(getMouseDownTarget())) {
                  (_b3 = stickyHeaderRef.current) === null || _b3 === void 0 ? void 0 : _b3.scrollToRow(currentTarget);
                }
              } }, focusMarkers.item, { onClick: onRowClickHandler && onRowClickHandler.bind(null, rowIndex, item), onContextMenu: onRowContextMenuHandler && onRowContextMenuHandler.bind(null, rowIndex, item) }),
              selectionType !== void 0 && import_react20.default.createElement(
                TableBodyCell,
                { className: styles_css_default["selection-control"], isFirstRow: firstVisible, isLastRow: lastVisible, isSelected, isNextSelected, isPrevSelected, wrapLines: false },
                import_react20.default.createElement(SelectionControl, __assign({ onFocusDown: moveFocusDown, onFocusUp: moveFocusUp, onShiftToggle: updateShiftToggle }, getItemSelectionProps(item)))
              ),
              visibleColumnDefinitions.map(function(column, colIndex) {
                return import_react20.default.createElement(TableBodyCellContent, { key: getColumnKey(column, colIndex), style: resizableColumns ? {} : {
                  width: column.width,
                  minWidth: column.minWidth,
                  maxWidth: column.maxWidth
                }, column, item, wrapLines, isFirstRow: firstVisible, isLastRow: lastVisible, isSelected, isNextSelected, isPrevSelected });
              })
            );
          }))
        ),
        resizableColumns && import_react20.default.createElement(ResizeTracker, null)
      ),
      import_react20.default.createElement(sticky_scrollbar_default, { ref: scrollbarRef, wrapperRef: wrapperRefObject, tableRef: tableRefObject, onScroll: handleScroll })
    )
  );
});
var internal_default3 = InternalTable;

// node_modules/@cloudscape-design/components/table/index.js
var Table = import_react21.default.forwardRef(function(_a2, ref) {
  var _b2 = _a2.items, items = _b2 === void 0 ? [] : _b2, _c2 = _a2.selectedItems, selectedItems = _c2 === void 0 ? [] : _c2, _d = _a2.variant, variant = _d === void 0 ? "container" : _d, props = __rest(_a2, ["items", "selectedItems", "variant"]);
  var baseComponentProps = useBaseComponent("Table");
  return import_react21.default.createElement(internal_default3, __assign({ items, selectedItems, variant }, props, baseComponentProps, { ref }));
});
applyDisplayName(Table, "Table");
var table_default = Table;
export {
  table_default as default
};
//# sourceMappingURL=@cloudscape-design_components_table.js.map

import {
  __toESM,
  require_react
} from "./chunk-C3URVCCN.js";

// node_modules/@cloudscape-design/components/internal/hooks/use-unique-id/index.js
var import_react = __toESM(require_react());
var _a;
var counter = 0;
var useIdFallback = () => {
  const idRef = (0, import_react.useRef)(null);
  if (!idRef.current) {
    idRef.current = `${counter++}-${Date.now()}-${Math.round(Math.random() * 1e4)}`;
  }
  return idRef.current;
};
var useId = (_a = import_react.default.useId) !== null && _a !== void 0 ? _a : useIdFallback;
function useUniqueId(prefix) {
  return `${prefix ? prefix : ""}` + useId();
}

// node_modules/@cloudscape-design/components/internal/utils/scrollable-containers.js
var getOverflowParents = (element) => {
  const parents = [];
  let node = element;
  while ((node = node.parentElement) && node !== document.body) {
    getComputedStyle(node).overflow !== "visible" && parents.push(node);
  }
  return parents;
};
var getOverflowParentDimensions = (element, excludeClosestParent = false, expandToViewport = false, canExpandOutsideViewport = false) => {
  const parents = expandToViewport ? [] : getOverflowParents(element).map((el) => {
    const { height, width, top, left } = el.getBoundingClientRect();
    return {
      height: canExpandOutsideViewport ? el.scrollHeight : height,
      width,
      top,
      left
    };
  });
  if (canExpandOutsideViewport && !expandToViewport) {
    const documentDimensions = document.documentElement.getBoundingClientRect();
    parents.push({
      width: Math.max(documentDimensions.width, document.documentElement.clientWidth),
      height: Math.max(documentDimensions.height, document.documentElement.clientHeight),
      top: documentDimensions.top,
      left: documentDimensions.left
    });
  } else {
    parents.push({
      height: window.innerHeight,
      width: window.innerWidth,
      top: 0,
      left: 0
    });
  }
  if (excludeClosestParent && !expandToViewport) {
    parents.shift();
  }
  return parents;
};
function scrollElementIntoView(element, options = { block: "nearest", inline: "nearest" }) {
  var _a2;
  (_a2 = element === null || element === void 0 ? void 0 : element.scrollIntoView) === null || _a2 === void 0 ? void 0 : _a2.call(element, options);
}

export {
  useUniqueId,
  getOverflowParents,
  getOverflowParentDimensions,
  scrollElementIntoView
};
//# sourceMappingURL=chunk-5PTPSAWI.js.map

import {
  isDevelopment,
  warnOnce
} from "./chunk-BATVD76T.js";
import {
  __toESM,
  require_react
} from "./chunk-C3URVCCN.js";

// node_modules/@cloudscape-design/components/internal/hooks/use-controllable/index.js
var React = __toESM(require_react());
function useControllable(controlledValue, handler, defaultValue, { componentName, changeHandler, controlledProp }) {
  const isControlled = React.useState(controlledValue !== void 0)[0];
  if (isDevelopment) {
    React.useEffect(() => {
      if (isControlled && handler === void 0) {
        warnOnce(componentName, `You provided a \`${controlledProp}\` prop without an \`${changeHandler}\` handler. This will render a non-interactive component.`);
      }
    }, [handler, isControlled, componentName, changeHandler, controlledProp]);
    React.useEffect(() => {
      const isControlledNow = controlledValue !== void 0;
      if (isControlled !== isControlledNow) {
        const initialMode = isControlled ? "controlled" : "uncontrolled";
        const modeNow = isControlledNow ? "controlled" : "uncontrolled";
        warnOnce(componentName, `A component tried to change ${initialMode} '${controlledProp}' property to be ${modeNow}. This is not supported. Properties should not switch from ${initialMode} to ${modeNow} (or vice versa). Decide between using a controlled or uncontrolled mode for the lifetime of the component. More info: https://fb.me/react-controlled-components`);
      }
    }, [isControlled, controlledProp, componentName, controlledValue]);
  }
  const [valueState, setValue] = React.useState(defaultValue);
  const [valueHasBeenSet, setValueHasBeenSet] = React.useState(false);
  const currentUncontrolledValue = valueHasBeenSet ? valueState : defaultValue;
  const setUncontrolledValue = React.useCallback((newValue) => {
    setValue(newValue);
    setValueHasBeenSet(true);
  }, [setValue, setValueHasBeenSet]);
  if (isControlled) {
    return [controlledValue, defaultCallback];
  } else {
    return [currentUncontrolledValue, setUncontrolledValue];
  }
}
function defaultCallback() {
  return void 0;
}

export {
  useControllable
};
//# sourceMappingURL=chunk-FA4MCMIV.js.map

import {
  internal_default as internal_default3,
  useDebounceCallback
} from "./chunk-2PVV3YSN.js";
import {
  checkControlled
} from "./chunk-KTQENZG5.js";
import {
  usePrevious
} from "./chunk-W6L4JLBP.js";
import {
  checkbox_icon_default
} from "./chunk-7BP67YB3.js";
import {
  FormFieldError
} from "./chunk-7PHO4AKW.js";
import {
  useFormFieldContext
} from "./chunk-SLVYPT42.js";
import {
  StatusIndicator
} from "./chunk-Q3RNZ4T5.js";
import {
  joinStrings
} from "./chunk-IXOWUQJP.js";
import {
  internal_default as internal_default2
} from "./chunk-MIT655T7.js";
import {
  dropdown_default,
  options_list_default,
  useOpenState
} from "./chunk-BVKXF4YZ.js";
import {
  getFirstFocusable
} from "./chunk-IPWP6PJO.js";
import {
  ScreenreaderOnly,
  live_region_default
} from "./chunk-H6LQFJLG.js";
import {
  useForwardFocus
} from "./chunk-VX6M7C7V.js";
import {
  useInternalI18n
} from "./chunk-VOJM65QS.js";
import {
  scrollElementIntoView
} from "./chunk-LJTUXJUP.js";
import {
  useUniqueId
} from "./chunk-ZOQJCCJI.js";
import {
  fireCancelableEvent,
  fireKeyboardEvent,
  fireNonCancelableEvent
} from "./chunk-CTALK4OT.js";
import {
  internal_default
} from "./chunk-CRWXG7GH.js";
import {
  useContainerQuery
} from "./chunk-6QG3XHFW.js";
import {
  useMergeRefs
} from "./chunk-INN7TUPO.js";
import {
  KeyCode,
  __rest,
  clsx_m_default,
  getBaseProps,
  isDevelopment,
  warnOnce
} from "./chunk-BATVD76T.js";
import {
  __toESM,
  require_react
} from "./chunk-C3URVCCN.js";

// node_modules/@cloudscape-design/components/multiselect/internal.js
var import_react29 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/option/utils/filter-options.js
var searchableFields = ["value", "label", "description", "labelTag"];
var matchesString = (value, searchText, strictMatching) => {
  if (!value) {
    return false;
  }
  const index = value.toLowerCase().indexOf(searchText);
  return strictMatching ? index === 0 : index > -1;
};
var matchesSingleOption = (dropdownOption, text, strictMatching) => {
  const searchText = text.toLowerCase();
  const option = dropdownOption.option;
  const searchStrFields = (attr) => matchesString(option[attr], searchText, strictMatching);
  const searchTagsFields = (attr) => {
    var _a;
    return (_a = option[attr]) === null || _a === void 0 ? void 0 : _a.some((value) => matchesString(value, searchText, strictMatching));
  };
  const searchableTagFields = ["tags"];
  if (!strictMatching) {
    searchableTagFields.push("filteringTags");
  }
  return searchableFields.some(searchStrFields) || searchableTagFields.some(searchTagsFields);
};
var filterOptions = (options, searchText, strictMatching = false) => {
  if (searchText === "") {
    return options;
  }
  let currentGroup = null;
  let parentMatched = false;
  return options.reduce((acc, option) => {
    if (option.type === "parent") {
      parentMatched = false;
      currentGroup = option;
      if (matchesSingleOption(option, searchText, strictMatching)) {
        parentMatched = true;
        acc.push(currentGroup);
      }
      return acc;
    }
    if (option.type !== "child") {
      currentGroup = null;
      parentMatched = false;
    }
    if (parentMatched) {
      acc.push(option);
    } else if (matchesSingleOption(option, searchText, strictMatching)) {
      if (currentGroup) {
        acc.push(currentGroup);
        currentGroup = null;
      }
      acc.push(option);
    }
    return acc;
  }, []);
};
var isInteractive = (option) => !!option && !option.disabled && option.type !== "parent";
var isGroupInteractive = (option) => !!option && !option.disabled;
var isGroup = (option) => !!option && "options" in option;

// node_modules/@cloudscape-design/components/internal/components/dropdown-footer/index.js
var import_react2 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/dropdown-footer/styles.css.js
import "/local/home/samilafo/final_epa_project/cloudscape_wrkshp/cloudscape-design-system-workshop/node_modules/@cloudscape-design/components/internal/components/dropdown-footer/styles.scoped.css";
var styles_css_default = {
  "root": "awsui_root_1afi9_4tl31_93",
  "hidden": "awsui_hidden_1afi9_4tl31_105",
  "no-items": "awsui_no-items_1afi9_4tl31_108"
};

// node_modules/@cloudscape-design/components/internal/components/dropdown-status/index.js
var import_react = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/dropdown-status/styles.css.js
import "/local/home/samilafo/final_epa_project/cloudscape_wrkshp/cloudscape-design-system-workshop/node_modules/@cloudscape-design/components/internal/components/dropdown-status/styles.scoped.css";
var styles_css_default2 = {
  "root": "awsui_root_vrgzu_1rmre_93",
  "recovery": "awsui_recovery_vrgzu_1rmre_107"
};

// node_modules/@cloudscape-design/components/internal/components/dropdown-status/index.js
function DropdownStatus({ children }) {
  return import_react.default.createElement("div", { className: styles_css_default2.root }, children);
}
var useDropdownStatus = ({ statusType, empty, loadingText, finishedText, filteringResultsText, errorText, recoveryText, isEmpty, isNoMatch, isFiltered, noMatch, onRecoveryClick, errorIconAriaLabel }) => {
  const previousStatusType = usePrevious(statusType);
  const statusResult = { isSticky: true, content: null };
  if (statusType === "loading") {
    statusResult.content = import_react.default.createElement(StatusIndicator, { type: "loading" }, loadingText);
  } else if (statusType === "error") {
    statusResult.content = import_react.default.createElement(
      "span",
      null,
      import_react.default.createElement(StatusIndicator, { type: "error", __animate: previousStatusType !== "error", iconAriaLabel: errorIconAriaLabel }, errorText),
      " ",
      recoveryText && import_react.default.createElement(internal_default2, { onFollow: () => fireNonCancelableEvent(onRecoveryClick), variant: "recovery", className: styles_css_default2.recovery }, recoveryText)
    );
  } else if (isEmpty && empty) {
    statusResult.content = empty;
  } else if (isNoMatch && noMatch) {
    statusResult.content = noMatch;
  } else if (isFiltered && filteringResultsText) {
    statusResult.content = filteringResultsText;
  } else if (statusType === "finished" && finishedText) {
    statusResult.content = finishedText;
    statusResult.isSticky = false;
  }
  return statusResult;
};
var dropdown_status_default = DropdownStatus;

// node_modules/@cloudscape-design/components/internal/components/dropdown-footer/index.js
var DropdownFooter = ({ content, id, hasItems = true }) => import_react2.default.createElement(
  "div",
  { className: clsx_m_default(styles_css_default.root, { [styles_css_default.hidden]: content === null, [styles_css_default["no-items"]]: !hasItems }) },
  import_react2.default.createElement(live_region_default, { visible: true, tagName: "div", id }, content && import_react2.default.createElement(dropdown_status_default, null, content))
);
var dropdown_footer_default = DropdownFooter;

// node_modules/@cloudscape-design/components/internal/components/option/utils/flatten-options.js
var flattenOptions = (options) => {
  const parentMap = /* @__PURE__ */ new Map();
  const flatOptions = options.reduce((acc, option) => {
    if ("options" in option) {
      const { options: options2 } = option, rest = __rest(option, ["options"]);
      const parentDropdownOption = { type: "parent", option };
      const allOptionsDisabled = options2.every((option2) => option2.disabled);
      if (option.disabled || allOptionsDisabled) {
        parentDropdownOption.disabled = true;
      }
      acc.push(parentDropdownOption);
      options2.forEach((child) => {
        const childDropdownOption = { type: "child", option: child };
        if (rest.disabled || child.disabled) {
          childDropdownOption.disabled = true;
        }
        acc.push(childDropdownOption);
        parentMap.set(childDropdownOption, parentDropdownOption);
      });
    } else {
      const dropdownOption = { option };
      if (option.disabled) {
        dropdownOption.disabled = true;
      }
      acc.push(dropdownOption);
    }
    return acc;
  }, []);
  return {
    flatOptions,
    parentMap
  };
};

// node_modules/@cloudscape-design/components/internal/components/options-list/utils/test-indexes.js
var testIndexMap = /* @__PURE__ */ new WeakMap();
var getTestOptionIndexes = (item) => testIndexMap.get(item);
var generateTestIndexes = (filteredItems, getParentGroup) => {
  let throughIndex = 1;
  let groupIndex = 0;
  let inGroupIndex = 1;
  let currentGroup = null;
  filteredItems.forEach((item) => {
    if (!("type" in item)) {
      testIndexMap.set(item, { throughIndex: throughIndex++ });
    } else if (item.type === "child") {
      const parentGroup = getParentGroup(item);
      if (parentGroup && parentGroup !== currentGroup) {
        currentGroup = parentGroup;
        inGroupIndex = 1;
        testIndexMap.set(item, {
          throughIndex: throughIndex++,
          groupIndex: ++groupIndex,
          inGroupIndex: inGroupIndex++
        });
      } else {
        testIndexMap.set(item, { throughIndex: throughIndex++, groupIndex, inGroupIndex: inGroupIndex++ });
      }
    }
  });
};

// node_modules/@cloudscape-design/components/internal/components/option/utils/prepare-options.js
function prepareOptions(options, filteringType, filteringText) {
  const { flatOptions, parentMap } = flattenOptions(options);
  const filteredOptions = filteringType !== "auto" ? flatOptions : filterOptions(flatOptions, filteringText);
  generateTestIndexes(filteredOptions, parentMap.get.bind(parentMap));
  return {
    filteredOptions,
    parentMap,
    totalCount: flatOptions.length,
    matchesCount: filteredOptions.length
  };
}

// node_modules/@cloudscape-design/components/select/utils/use-select.js
var import_react5 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/options-list/utils/use-highlight-option.js
var import_react3 = __toESM(require_react());
function useHighlightedOption({ options, isHighlightable }) {
  const [highlightedIndex, setHighlightedIndexState] = (0, import_react3.useState)(-1);
  const [highlightType, setHighlightType] = (0, import_react3.useState)("keyboard");
  const setHighlightedIndex = (0, import_react3.useCallback)((index, highlightType2) => {
    setHighlightedIndexState(index);
    setHighlightType(highlightType2);
  }, []);
  const highlightedOption = options[highlightedIndex] && isHighlightable(options[highlightedIndex]) ? options[highlightedIndex] : void 0;
  const moveHighlightFrom = (direction, startIndex = highlightedIndex, highlightType2) => {
    let newIndex = startIndex;
    do {
      newIndex += direction;
    } while (options[newIndex] && !isHighlightable(options[newIndex]));
    if (options[newIndex]) {
      setHighlightedIndex(newIndex, highlightType2);
    }
  };
  const moveHighlight = (direction, highlightType2) => moveHighlightFrom(direction, highlightedIndex, highlightType2);
  const highlightOption = (0, import_react3.useCallback)((option, highlightType2) => {
    const index = options.indexOf(option);
    setHighlightedIndex(index, highlightType2);
  }, [options, setHighlightedIndex]);
  return [
    { highlightType, highlightedIndex, highlightedOption },
    {
      setHighlightedIndexWithMouse: (index) => setHighlightedIndex(index, "mouse"),
      moveHighlightWithKeyboard: (direction) => moveHighlight(direction, "keyboard"),
      highlightOptionWithKeyboard: (option) => highlightOption(option, "keyboard"),
      resetHighlightWithKeyboard: () => setHighlightedIndex(-1, "keyboard"),
      goHomeWithKeyboard: () => moveHighlightFrom(1, -1, "keyboard"),
      goEndWithKeyboard: () => moveHighlightFrom(-1, options.length, "keyboard")
    }
  ];
}

// node_modules/@cloudscape-design/components/internal/components/options-list/utils/use-keyboard.js
var import_react4 = __toESM(require_react());
var HOME = 36;
var END = 35;
var useMenuKeyboard = ({ moveHighlight, selectOption, goHome, goEnd, closeDropdown, preventNativeSpace = false }) => {
  return (0, import_react4.useCallback)((e) => {
    switch (e.detail.keyCode) {
      case KeyCode.up:
        e.preventDefault();
        moveHighlight(-1);
        break;
      case KeyCode.down:
        e.preventDefault();
        moveHighlight(1);
        break;
      case HOME:
        goHome();
        break;
      case END:
        goEnd();
        break;
      case KeyCode.escape:
        closeDropdown();
        break;
      case KeyCode.enter:
        e.preventDefault();
        selectOption();
        break;
      case KeyCode.space:
        if (preventNativeSpace) {
          e.preventDefault();
          selectOption();
        }
    }
  }, [moveHighlight, selectOption, goHome, goEnd, closeDropdown, preventNativeSpace]);
};
var useTriggerKeyboard = ({ openDropdown, goHome }) => {
  return (0, import_react4.useCallback)((e) => {
    switch (e.detail.keyCode) {
      case KeyCode.up:
      case KeyCode.down:
        e.preventDefault();
        goHome();
        openDropdown();
        break;
      case KeyCode.space:
      case KeyCode.enter:
        e.preventDefault();
        openDropdown();
        break;
    }
  }, [openDropdown, goHome]);
};

// node_modules/@cloudscape-design/components/internal/components/options-list/utils/use-ids.js
var getOptionId = (menuId, index) => {
  if (index < 0) {
    return void 0;
  }
  return `${menuId}-option-${index}`;
};

// node_modules/@cloudscape-design/components/select/utils/connect-options.js
var connectOptionsByValue = (options, selectedOptions) => {
  return (selectedOptions || []).map((selectedOption) => {
    for (const dropdownOption of options) {
      if (dropdownOption.type !== "parent" && dropdownOption.option.value === selectedOption.value) {
        return dropdownOption;
      }
    }
    return { option: selectedOption };
  });
};
var findOptionIndex = (options, option) => {
  for (let index = 0; index < options.length; index++) {
    const __option = options[index];
    if (__option === option || __option.value === option.value) {
      return index;
    }
  }
  return -1;
};

// node_modules/@cloudscape-design/components/select/utils/use-select.js
function useSelect({ selectedOptions, updateSelectedOption, options, filteringType, onBlur, onFocus, externalRef, keepOpen, fireLoadItems, setFilteringValue, useInteractiveGroups = false, statusType }) {
  const interactivityCheck = useInteractiveGroups ? isGroupInteractive : isInteractive;
  const isHighlightable = (option) => !!option && (useInteractiveGroups || option.type !== "parent");
  const filterRef = (0, import_react5.useRef)(null);
  const triggerRef = (0, import_react5.useRef)(null);
  const menuRef = (0, import_react5.useRef)(null);
  const hasFilter = filteringType !== "none";
  const activeRef = hasFilter ? filterRef : menuRef;
  const __selectedOptions = connectOptionsByValue(options, selectedOptions);
  const __selectedValuesSet = selectedOptions.reduce((selectedValuesSet, item) => {
    if (item.value) {
      selectedValuesSet.add(item.value);
    }
    return selectedValuesSet;
  }, /* @__PURE__ */ new Set());
  const [{ highlightType, highlightedOption, highlightedIndex }, { moveHighlightWithKeyboard, resetHighlightWithKeyboard, setHighlightedIndexWithMouse, highlightOptionWithKeyboard, goHomeWithKeyboard, goEndWithKeyboard }] = useHighlightedOption({ options, isHighlightable });
  const { isOpen, openDropdown, closeDropdown, toggleDropdown } = useOpenState({
    onOpen: () => fireLoadItems(""),
    onClose: () => {
      resetHighlightWithKeyboard();
      setFilteringValue("");
    }
  });
  const handleFocus = () => {
    fireNonCancelableEvent(onFocus, {});
  };
  const handleBlur = () => {
    fireNonCancelableEvent(onBlur, {});
    closeDropdown();
  };
  const hasSelectedOption = __selectedOptions.length > 0;
  const menuId = useUniqueId("option-list");
  const highlightedOptionId = getOptionId(menuId, highlightedIndex);
  const selectOption = (option) => {
    var _a;
    const optionToSelect = option || highlightedOption;
    if (!optionToSelect || !interactivityCheck(optionToSelect)) {
      return;
    }
    updateSelectedOption(optionToSelect.option);
    if (!keepOpen) {
      (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
      closeDropdown();
    }
  };
  const activeKeyDownHandler = useMenuKeyboard({
    moveHighlight: moveHighlightWithKeyboard,
    selectOption,
    goHome: goHomeWithKeyboard,
    goEnd: goEndWithKeyboard,
    closeDropdown: () => {
      var _a;
      (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
      closeDropdown();
    },
    preventNativeSpace: !hasFilter
  });
  const triggerKeyDownHandler = useTriggerKeyboard({ openDropdown, goHome: goHomeWithKeyboard });
  const getDropdownProps = () => ({
    onFocus: handleFocus,
    onBlur: handleBlur
  });
  const getTriggerProps = (disabled = false, autoFocus = false) => {
    const triggerProps = {
      ref: triggerRef,
      onFocus: () => closeDropdown(),
      autoFocus
    };
    if (!disabled) {
      triggerProps.onMouseDown = (event) => {
        var _a;
        event.preventDefault();
        if (isOpen) {
          (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        }
        toggleDropdown();
      };
      triggerProps.onKeyDown = triggerKeyDownHandler;
    }
    return triggerProps;
  };
  const getFilterProps = () => {
    if (!hasFilter) {
      return {};
    }
    return {
      ref: filterRef,
      onKeyDown: activeKeyDownHandler,
      onChange: (event) => {
        setFilteringValue(event.detail.value);
        resetHighlightWithKeyboard();
      },
      __onDelayedInput: (event) => {
        fireLoadItems(event.detail.value);
      },
      __nativeAttributes: {
        "aria-activedescendant": highlightedOptionId,
        ["aria-owns"]: menuId,
        ["aria-controls"]: menuId
      }
    };
  };
  const getMenuProps = () => {
    const menuProps = {
      id: menuId,
      ref: menuRef,
      open: isOpen,
      onMouseUp: (itemIndex) => {
        if (itemIndex > -1) {
          selectOption(options[itemIndex]);
        }
      },
      onMouseMove: (itemIndex) => {
        if (itemIndex > -1) {
          setHighlightedIndexWithMouse(itemIndex);
        }
      },
      statusType
    };
    if (!hasFilter) {
      menuProps.onKeyDown = activeKeyDownHandler;
      menuProps.nativeAttributes = {
        "aria-activedescendant": highlightedOptionId
      };
    }
    return menuProps;
  };
  const getGroupState = (option) => {
    const totalSelected = option.options.filter((item) => !!item.value && __selectedValuesSet.has(item.value)).length;
    const hasSelected = totalSelected > 0;
    const allSelected = totalSelected === option.options.length;
    return {
      selected: hasSelected && allSelected,
      indeterminate: hasSelected && !allSelected
    };
  };
  const getOptionProps = (option, index) => {
    var _a;
    const highlighted = option === highlightedOption;
    const groupState = isGroup(option.option) ? getGroupState(option.option) : void 0;
    const selected = __selectedOptions.indexOf(option) > -1 || !!(groupState === null || groupState === void 0 ? void 0 : groupState.selected);
    const nextOption = (_a = options[index + 1]) === null || _a === void 0 ? void 0 : _a.option;
    const isNextSelected = !!nextOption && isGroup(nextOption) ? getGroupState(nextOption).selected : __selectedOptions.indexOf(options[index + 1]) > -1;
    const optionProps = {
      key: index,
      option,
      highlighted,
      selected,
      isNextSelected,
      indeterminate: !!(groupState === null || groupState === void 0 ? void 0 : groupState.indeterminate),
      ["data-mouse-target"]: isHighlightable(option) ? index : -1,
      id: getOptionId(menuId, index)
    };
    return optionProps;
  };
  const prevOpen = usePrevious(isOpen);
  (0, import_react5.useEffect)(() => {
    if (isOpen && !prevOpen && hasSelectedOption && !hasFilter) {
      setHighlightedIndexWithMouse(options.indexOf(__selectedOptions[0]));
    }
  }, [isOpen, __selectedOptions, hasSelectedOption, setHighlightedIndexWithMouse, options, prevOpen, hasFilter]);
  (0, import_react5.useEffect)(() => {
    var _a;
    if (isOpen) {
      (_a = activeRef.current) === null || _a === void 0 ? void 0 : _a.focus({ preventScroll: true });
    }
  }, [isOpen, activeRef]);
  useForwardFocus(externalRef, triggerRef);
  const highlightedGroupSelected = !!highlightedOption && isGroup(highlightedOption.option) && getGroupState(highlightedOption.option).selected;
  const announceSelected = !!highlightedOption && (__selectedOptions.indexOf(highlightedOption) > -1 || highlightedGroupSelected);
  return {
    isOpen,
    highlightedOption,
    highlightedIndex,
    highlightType,
    getTriggerProps,
    getDropdownProps,
    getMenuProps,
    getFilterProps,
    getOptionProps,
    highlightOption: highlightOptionWithKeyboard,
    selectOption,
    announceSelected
  };
}

// node_modules/@cloudscape-design/components/select/utils/use-native-search.js
var import_react6 = __toESM(require_react());
var isChar = (keyCode) => {
  return [0, KeyCode.enter, KeyCode.space, KeyCode.tab].indexOf(keyCode) === -1;
};
var isRepeatedChar = (str) => str.split("").every((c) => c === str[0]);
function findMatchingOption(options, searchText, currentHighlight, useInteractiveGroups) {
  const interactivityCheck = useInteractiveGroups ? isGroupInteractive : isInteractive;
  const filter = (searchText2) => filterOptions(options, searchText2, true).filter((option) => interactivityCheck(option));
  const matchingOptions = filter(searchText);
  if (matchingOptions.length === 1) {
    return matchingOptions[0];
  }
  if (currentHighlight && searchText.length > 1 && isRepeatedChar(searchText)) {
    const matchingOptions2 = filter(searchText[0]);
    if (matchingOptions2.length > 0) {
      let active = isGroup(currentHighlight) ? matchingOptions2.map(({ option }) => option).indexOf(currentHighlight) : matchingOptions2.map(({ option }) => option.value).indexOf(currentHighlight.value);
      active += 1;
      active = active % matchingOptions2.length;
      return matchingOptions2[active];
    }
  }
  if (matchingOptions.length > 0) {
    return matchingOptions[0];
  }
  return null;
}
function useNativeSearch({ isEnabled, options, highlightOption, highlightedOption, useInteractiveGroups }) {
  const value = (0, import_react6.useRef)("");
  const delayedResetValue = useDebounceCallback(() => value.current = "", 500);
  return (event) => {
    if (!isEnabled) {
      return;
    }
    const { charCode } = event;
    if (!isChar(charCode)) {
      return;
    }
    delayedResetValue();
    const newValue = value.current + String.fromCharCode(charCode);
    value.current = newValue;
    const nextHighlight = findMatchingOption(options, newValue, highlightedOption, useInteractiveGroups);
    if (nextHighlight) {
      highlightOption(nextHighlight);
    }
  };
}

// node_modules/@cloudscape-design/components/select/utils/use-load-items.js
var import_react7 = __toESM(require_react());
var useLoadItems = ({ onLoadItems, options, statusType }) => {
  const prevFilteringText = (0, import_react7.useRef)(void 0);
  const fireLoadItems = (filteringText) => {
    if (prevFilteringText.current === filteringText) {
      return;
    }
    prevFilteringText.current = filteringText;
    fireNonCancelableEvent(onLoadItems, { filteringText, firstPage: true, samePage: false });
  };
  const handleLoadMore = () => {
    const firstPage = options.length === 0;
    statusType === "pending" && fireNonCancelableEvent(onLoadItems, {
      firstPage,
      samePage: false,
      filteringText: prevFilteringText.current || ""
    });
  };
  const handleRecoveryClick = () => fireNonCancelableEvent(onLoadItems, {
    firstPage: false,
    samePage: true,
    filteringText: prevFilteringText.current || ""
  });
  return {
    fireLoadItems,
    handleLoadMore,
    handleRecoveryClick
  };
};

// node_modules/@cloudscape-design/components/select/utils/use-announcement.js
var import_react8 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/option/option-announcer.js
function defaultOptionDescription(option, parentGroup) {
  return [
    parentGroup && parentGroup.label,
    option.__labelPrefix,
    option.label || option.value,
    option.description,
    option.labelTag
  ].concat(option.tags).filter((el) => !!el).join(" ");
}
var option_announcer_default = defaultOptionDescription;

// node_modules/@cloudscape-design/components/select/utils/use-announcement.js
function useAnnouncement({ announceSelected, highlightedOption, getParent, selectedAriaLabel, renderHighlightedAriaLive }) {
  const prevAnnouncedGroup = (0, import_react8.useRef)(void 0);
  (0, import_react8.useEffect)(() => {
    if (highlightedOption) {
      const frameId = requestAnimationFrame(() => {
        prevAnnouncedGroup.current = getParent(highlightedOption);
      });
      return () => cancelAnimationFrame(frameId);
    }
  });
  if (!highlightedOption) {
    return "";
  }
  const option = highlightedOption.option;
  const parent = getParent(highlightedOption);
  const group = parent && parent !== prevAnnouncedGroup.current ? parent : void 0;
  if (renderHighlightedAriaLive) {
    return renderHighlightedAriaLive(option, group);
  }
  const selectedAnnouncement = announceSelected && selectedAriaLabel ? selectedAriaLabel : "";
  const defaultDescription = option_announcer_default(option, group);
  return [selectedAnnouncement, defaultDescription].filter(Boolean).join(" ");
}

// node_modules/@cloudscape-design/components/select/parts/plain-list.js
var import_react16 = __toESM(require_react());

// node_modules/@cloudscape-design/components/select/utils/render-options.js
var import_react15 = __toESM(require_react());

// node_modules/@cloudscape-design/components/select/parts/item.js
var import_react13 = __toESM(require_react());

// node_modules/@cloudscape-design/components/select/parts/styles.css.js
import "/local/home/samilafo/final_epa_project/cloudscape_wrkshp/cloudscape-design-system-workshop/node_modules/@cloudscape-design/components/select/parts/styles.scoped.css";
var styles_css_default3 = {
  "placeholder": "awsui_placeholder_dwuol_1fefq_93",
  "item": "awsui_item_dwuol_1fefq_98",
  "checkbox": "awsui_checkbox_dwuol_1fefq_102",
  "filter": "awsui_filter_dwuol_1fefq_111",
  "trigger": "awsui_trigger_dwuol_1fefq_116",
  "layout-strut": "awsui_layout-strut_dwuol_1fefq_122",
  "list-bottom": "awsui_list-bottom_dwuol_1fefq_128",
  "selected-icon": "awsui_selected-icon_dwuol_1fefq_132",
  "show-label-tag": "awsui_show-label-tag_dwuol_1fefq_136"
};

// node_modules/@cloudscape-design/components/internal/components/option/index.js
var import_react11 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/option/styles.css.js
import "/local/home/samilafo/final_epa_project/cloudscape_wrkshp/cloudscape-design-system-workshop/node_modules/@cloudscape-design/components/internal/components/option/styles.scoped.css";
var styles_css_default4 = {
  "option": "awsui_option_1p2cx_6shcc_97",
  "disabled": "awsui_disabled_1p2cx_6shcc_115",
  "parent": "awsui_parent_1p2cx_6shcc_118",
  "highlighted": "awsui_highlighted_1p2cx_6shcc_121",
  "content": "awsui_content_1p2cx_6shcc_125",
  "label-content": "awsui_label-content_1p2cx_6shcc_132",
  "label": "awsui_label_1p2cx_6shcc_132",
  "tag": "awsui_tag_1p2cx_6shcc_139",
  "label-tag": "awsui_label-tag_1p2cx_6shcc_140",
  "label-prefix": "awsui_label-prefix_1p2cx_6shcc_151",
  "tags": "awsui_tags_1p2cx_6shcc_164",
  "description": "awsui_description_1p2cx_6shcc_165",
  "selected": "awsui_selected_1p2cx_6shcc_176",
  "icon": "awsui_icon_1p2cx_6shcc_190",
  "icon-size-big": "awsui_icon-size-big_1p2cx_6shcc_197",
  "filtering-match-highlight": "awsui_filtering-match-highlight_1p2cx_6shcc_201",
  "trigger-variant": "awsui_trigger-variant_1p2cx_6shcc_216"
};

// node_modules/@cloudscape-design/components/internal/components/option/option-parts.js
var import_react10 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/option/highlight-match.js
var import_react9 = __toESM(require_react());
var splitOnFiltering = (str, highlightText) => {
  const filteringPattern = highlightText.replace(/[-[\]/{}()*+?.\\^$|]/g, "\\$&");
  const regexp = new RegExp(filteringPattern, "gi");
  const noMatches = str.split(regexp);
  const matches = str.match(regexp);
  return { noMatches, matches };
};
var Highlight = ({ str }) => str ? import_react9.default.createElement("span", { className: clsx_m_default(styles_css_default4["filtering-match-highlight"]) }, str) : null;
function HighlightMatch({ str, highlightText }) {
  if (!str || !highlightText) {
    return import_react9.default.createElement("span", null, str);
  }
  if (str === highlightText) {
    return import_react9.default.createElement(Highlight, { str });
  }
  const { noMatches, matches } = splitOnFiltering(str, highlightText);
  const highlighted = [];
  noMatches.forEach((noMatch, idx) => {
    highlighted.push(import_react9.default.createElement("span", { key: `noMatch-${idx}` }, noMatch));
    if (matches && idx < matches.length) {
      highlighted.push(import_react9.default.createElement(Highlight, { key: `match-${idx}`, str: matches[idx] }));
    }
  });
  return import_react9.default.createElement("span", null, highlighted);
}

// node_modules/@cloudscape-design/components/internal/components/option/option-parts.js
var Label = ({ label, prefix, highlightText, triggerVariant }) => import_react10.default.createElement(
  "span",
  { className: clsx_m_default(styles_css_default4.label, triggerVariant && styles_css_default4["trigger-variant"]) },
  prefix && import_react10.default.createElement(
    "span",
    { className: clsx_m_default(styles_css_default4["label-prefix"], triggerVariant && styles_css_default4["trigger-variant"]) },
    prefix,
    " "
  ),
  import_react10.default.createElement(HighlightMatch, { str: label, highlightText })
);
var LabelTag = ({ labelTag, highlightText, triggerVariant }) => labelTag ? import_react10.default.createElement(
  "span",
  { className: clsx_m_default(styles_css_default4["label-tag"], triggerVariant && styles_css_default4["trigger-variant"]) },
  import_react10.default.createElement(HighlightMatch, { str: labelTag, highlightText })
) : null;
var Description = ({ description, highlightedOption, highlightText, selectedOption, triggerVariant }) => description ? import_react10.default.createElement(
  "span",
  { className: clsx_m_default(styles_css_default4.description, {
    [styles_css_default4["trigger-variant"]]: triggerVariant,
    [styles_css_default4.highlighted]: highlightedOption,
    [styles_css_default4.selected]: selectedOption
  }) },
  import_react10.default.createElement(HighlightMatch, { str: description, highlightText })
) : null;
var Tags = ({ tags, highlightedOption, highlightText, selectedOption, triggerVariant }) => tags ? import_react10.default.createElement("span", { className: clsx_m_default(styles_css_default4.tags, {
  [styles_css_default4.highlighted]: highlightedOption,
  [styles_css_default4.selected]: selectedOption
}) }, tags.map((tag, idx) => import_react10.default.createElement(
  "span",
  { key: idx, className: clsx_m_default(styles_css_default4.tag, triggerVariant && styles_css_default4["trigger-variant"]) },
  import_react10.default.createElement(HighlightMatch, { str: tag, highlightText })
))) : null;
var FilteringTags = ({ filteringTags, highlightedOption, highlightText, selectedOption, triggerVariant }) => {
  if (!highlightText || !filteringTags) {
    return null;
  }
  const searchElement = highlightText.toLowerCase();
  return import_react10.default.createElement("span", { className: clsx_m_default(styles_css_default4.tags, {
    [styles_css_default4.highlighted]: highlightedOption,
    [styles_css_default4.selected]: selectedOption
  }) }, filteringTags.map((filteringTag, key) => {
    const match = filteringTag.toLowerCase().indexOf(searchElement) !== -1;
    if (match) {
      return import_react10.default.createElement(
        "span",
        { className: clsx_m_default(styles_css_default4.tag, triggerVariant && styles_css_default4["trigger-variant"]), key, "aria-disabled": true },
        import_react10.default.createElement(HighlightMatch, { str: filteringTag, highlightText })
      );
    }
    return null;
  }));
};
var OptionIcon = (props2) => {
  if (!props2.name && !props2.url && !props2.svg) {
    return null;
  }
  return import_react10.default.createElement(
    "span",
    { className: clsx_m_default(styles_css_default4.icon, props2.size === "big" && [styles_css_default4[`icon-size-big`]]) },
    import_react10.default.createElement(internal_default, Object.assign({}, props2))
  );
};

// node_modules/@cloudscape-design/components/internal/components/option/index.js
function validateStringValue(value, propertyName) {
  if (typeof value !== "undefined" && typeof value !== "string") {
    warnOnce("DropdownOption", `This component only supports string values, but "option.${propertyName}" has ${typeof value} type. The component may work incorrectly.`);
  }
}
var Option = (_a) => {
  var _b, _c, _d, _e;
  var { option, highlightText, triggerVariant = false, isGroupOption = false, isGenericGroup = true, highlightedOption = false, selectedOption = false } = _a, restProps = __rest(_a, ["option", "highlightText", "triggerVariant", "isGroupOption", "isGenericGroup", "highlightedOption", "selectedOption"]);
  if (!option) {
    return null;
  }
  const { disabled } = option;
  const baseProps = getBaseProps(restProps);
  if (isDevelopment) {
    validateStringValue(option.label, "label");
    validateStringValue(option.description, "description");
    validateStringValue(option.labelTag, "labelTag");
    (_b = option.tags) === null || _b === void 0 ? void 0 : _b.forEach((tag, index) => {
      validateStringValue(tag, `tags[${index}]`);
    });
    (_c = option.filteringTags) === null || _c === void 0 ? void 0 : _c.forEach((tag, index) => {
      validateStringValue(tag, `filteringTags[${index}]`);
    });
  }
  const className = clsx_m_default(styles_css_default4.option, disabled && styles_css_default4.disabled, isGroupOption && styles_css_default4.parent, highlightedOption && styles_css_default4.highlighted);
  const icon = option.__customIcon || import_react11.default.createElement(OptionIcon, { name: option.iconName, url: option.iconUrl, svg: option.iconSvg, alt: option.iconAlt, size: option.description || option.tags ? "big" : "normal" });
  const genericGroupProps = isGenericGroup ? {
    title: (_d = option.label) !== null && _d !== void 0 ? _d : option.value,
    "aria-disabled": disabled
  } : void 0;
  return import_react11.default.createElement(
    "span",
    Object.assign({ "data-value": option.value, className, lang: option.lang }, genericGroupProps, baseProps),
    icon,
    import_react11.default.createElement(
      "span",
      { className: clsx_m_default(styles_css_default4.content) },
      import_react11.default.createElement(
        "span",
        { className: clsx_m_default(styles_css_default4["label-content"]) },
        import_react11.default.createElement(Label, { label: (_e = option.label) !== null && _e !== void 0 ? _e : option.value, prefix: option.__labelPrefix, highlightText, triggerVariant }),
        import_react11.default.createElement(LabelTag, { labelTag: option.labelTag, highlightText, triggerVariant })
      ),
      import_react11.default.createElement(Description, { description: option.description, highlightedOption, selectedOption, highlightText, triggerVariant }),
      import_react11.default.createElement(Tags, { tags: option.tags, highlightedOption, selectedOption, highlightText, triggerVariant }),
      import_react11.default.createElement(FilteringTags, { filteringTags: option.filteringTags, highlightedOption, selectedOption, highlightText, triggerVariant })
    )
  );
};
var option_default = Option;

// node_modules/@cloudscape-design/components/internal/components/selectable-item/index.js
var import_react12 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/selectable-item/styles.css.js
import "/local/home/samilafo/final_epa_project/cloudscape_wrkshp/cloudscape-design-system-workshop/node_modules/@cloudscape-design/components/internal/components/selectable-item/styles.scoped.css";
var styles_css_default5 = {
  "selectable-item": "awsui_selectable-item_15o6u_1chqv_93",
  "pad-bottom": "awsui_pad-bottom_15o6u_1chqv_115",
  "has-background": "awsui_has-background_15o6u_1chqv_124",
  "highlighted": "awsui_highlighted_15o6u_1chqv_127",
  "selected": "awsui_selected_15o6u_1chqv_127",
  "disabled": "awsui_disabled_15o6u_1chqv_141",
  "next-item-selected": "awsui_next-item-selected_15o6u_1chqv_149",
  "is-keyboard": "awsui_is-keyboard_15o6u_1chqv_157",
  "parent": "awsui_parent_15o6u_1chqv_161",
  "interactiveGroups": "awsui_interactiveGroups_15o6u_1chqv_165",
  "child": "awsui_child_15o6u_1chqv_180",
  "virtual": "awsui_virtual_15o6u_1chqv_195",
  "measure-strut": "awsui_measure-strut_15o6u_1chqv_206",
  "measure-strut-first": "awsui_measure-strut-first_15o6u_1chqv_215",
  "screenreader-content": "awsui_screenreader-content_15o6u_1chqv_219",
  "option-content": "awsui_option-content_15o6u_1chqv_225"
};

// node_modules/@cloudscape-design/components/internal/components/selectable-item/index.js
var SelectableItem = (_a, ref) => {
  var { children: content, ariaSelected, ariaChecked, selected, highlighted, disabled, hasBackground, isParent, isChild, virtualPosition, padBottom, isNextSelected, useInteractiveGroups, screenReaderContent, ariaPosinset, ariaSetsize, highlightType } = _a, restProps = __rest(_a, ["children", "ariaSelected", "ariaChecked", "selected", "highlighted", "disabled", "hasBackground", "isParent", "isChild", "virtualPosition", "padBottom", "isNextSelected", "useInteractiveGroups", "screenReaderContent", "ariaPosinset", "ariaSetsize", "highlightType"]);
  const _b = getBaseProps(restProps), { className } = _b, rest = __rest(_b, ["className"]);
  const classNames = clsx_m_default(className, styles_css_default5["selectable-item"], {
    [styles_css_default5.selected]: selected,
    [styles_css_default5.highlighted]: highlighted,
    [styles_css_default5["has-background"]]: hasBackground,
    [styles_css_default5.parent]: isParent,
    [styles_css_default5.child]: isChild,
    [styles_css_default5["is-keyboard"]]: highlightType === "keyboard",
    [styles_css_default5.disabled]: disabled,
    [styles_css_default5.virtual]: virtualPosition !== void 0,
    [styles_css_default5["pad-bottom"]]: padBottom,
    [styles_css_default5["next-item-selected"]]: isNextSelected,
    [styles_css_default5.interactiveGroups]: useInteractiveGroups
  });
  const contentRef = (0, import_react12.useRef)(null);
  const screenReaderContentRef = (0, import_react12.useRef)(null);
  (0, import_react12.useLayoutEffect)(() => {
    if (highlighted && screenReaderContent) {
      if (contentRef.current) {
        contentRef.current.setAttribute("aria-hidden", "true");
      }
      if (screenReaderContentRef.current) {
        screenReaderContentRef.current.textContent = screenReaderContent;
      }
    }
  }, [highlighted, screenReaderContent, contentRef, screenReaderContentRef]);
  const style = virtualPosition !== void 0 ? {
    transform: `translateY(${virtualPosition}px)`
  } : void 0;
  const a11yProperties = {
    "aria-disabled": disabled
  };
  if (isParent && !useInteractiveGroups) {
    a11yProperties["aria-hidden"] = true;
  }
  if (ariaSelected !== void 0) {
    a11yProperties["aria-selected"] = ariaSelected;
  }
  if (ariaChecked !== void 0) {
    a11yProperties["aria-checked"] = ariaChecked;
  }
  if (ariaPosinset && ariaSetsize) {
    a11yProperties["aria-posinset"] = ariaPosinset;
    a11yProperties["aria-setsize"] = ariaSetsize;
  }
  return import_react12.default.createElement(
    "li",
    Object.assign({ role: "option", className: classNames, style }, a11yProperties, rest),
    import_react12.default.createElement("div", { className: styles_css_default5["option-content"], ref: contentRef }, content),
    import_react12.default.createElement("div", { className: styles_css_default5["measure-strut"], ref }),
    import_react12.default.createElement("div", { className: styles_css_default5["screenreader-content"], ref: screenReaderContentRef })
  );
};
var selectable_item_default = import_react12.default.forwardRef(SelectableItem);

// node_modules/@cloudscape-design/components/select/parts/item.js
var Item = (_a, ref) => {
  var { option, highlighted, selected, filteringValue, hasCheckbox, virtualPosition, padBottom, isNextSelected, screenReaderContent, ariaPosinset, ariaSetsize, highlightType } = _a, restProps = __rest(_a, ["option", "highlighted", "selected", "filteringValue", "hasCheckbox", "virtualPosition", "padBottom", "isNextSelected", "screenReaderContent", "ariaPosinset", "ariaSetsize", "highlightType"]);
  const baseProps = getBaseProps(restProps);
  const isParent = option.type === "parent";
  const isChild = option.type === "child";
  const wrappedOption = option.option;
  const disabled = option.disabled || wrappedOption.disabled;
  return import_react13.default.createElement(
    selectable_item_default,
    Object.assign({ ariaSelected: Boolean(selected), selected, isNextSelected, highlighted, disabled: option.disabled, isParent, isChild, ref, virtualPosition, padBottom, screenReaderContent, ariaPosinset, ariaSetsize, highlightType }, baseProps),
    import_react13.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default3.item, !isParent && wrappedOption.labelTag && styles_css_default3["show-label-tag"]) },
      hasCheckbox && !isParent && import_react13.default.createElement(
        "div",
        { className: styles_css_default3.checkbox },
        import_react13.default.createElement(checkbox_icon_default, { checked: selected || false, disabled: option.disabled })
      ),
      isParent ? import_react13.default.createElement("span", null, wrappedOption.label || wrappedOption.value) : import_react13.default.createElement(option_default, { option: Object.assign(Object.assign({}, wrappedOption), { disabled }), highlightedOption: highlighted, selectedOption: selected, highlightText: filteringValue }),
      !hasCheckbox && !isParent && selected && import_react13.default.createElement(
        "div",
        { className: styles_css_default3["selected-icon"] },
        import_react13.default.createElement(internal_default, { name: "check" })
      )
    )
  );
};
var item_default = import_react13.default.memo(import_react13.default.forwardRef(Item));

// node_modules/@cloudscape-design/components/select/parts/multiselect-item.js
var import_react14 = __toESM(require_react());
var MultiSelectItem = (_a, ref) => {
  var { option, highlighted, selected, filteringValue, hasCheckbox, virtualPosition, padBottom, isNextSelected, indeterminate, screenReaderContent, ariaPosinset, ariaSetsize, highlightType } = _a, restProps = __rest(_a, ["option", "highlighted", "selected", "filteringValue", "hasCheckbox", "virtualPosition", "padBottom", "isNextSelected", "indeterminate", "screenReaderContent", "ariaPosinset", "ariaSetsize", "highlightType"]);
  const baseProps = getBaseProps(restProps);
  const isParent = option.type === "parent";
  const isChild = option.type === "child";
  const wrappedOption = option.option;
  const disabled = option.disabled || wrappedOption.disabled;
  const className = clsx_m_default(styles_css_default3.item, {
    [styles_css_default3.disabled]: disabled
  });
  return import_react14.default.createElement(
    selectable_item_default,
    Object.assign({ ariaChecked: isParent && indeterminate ? "mixed" : Boolean(selected), selected, isNextSelected, highlighted, disabled, isParent, isChild, highlightType, ref, virtualPosition, padBottom, useInteractiveGroups: true, screenReaderContent, ariaPosinset, ariaSetsize }, baseProps),
    import_react14.default.createElement(
      "div",
      { className },
      hasCheckbox && import_react14.default.createElement(
        "div",
        { className: styles_css_default3.checkbox },
        import_react14.default.createElement(checkbox_icon_default, { checked: selected, indeterminate: isParent && indeterminate, disabled: option.disabled })
      ),
      import_react14.default.createElement(option_default, { option: Object.assign(Object.assign({}, wrappedOption), { disabled }), highlightedOption: highlighted, selectedOption: selected, highlightText: filteringValue, isGroupOption: isParent })
    )
  );
};
var multiselect_item_default = import_react14.default.memo(import_react14.default.forwardRef(MultiSelectItem));

// node_modules/@cloudscape-design/components/select/utils/get-item-props.js
var getItemProps = ({ option, index, getOptionProps, filteringValue, checkboxes = false }) => {
  const optionProps = getOptionProps(option, index);
  optionProps.filteringValue = filteringValue;
  const { inGroupIndex, groupIndex, throughIndex } = getTestOptionIndexes(option) || {};
  return Object.assign(Object.assign({}, optionProps), { hasCheckbox: checkboxes, ["data-group-index"]: groupIndex, ["data-child-index"]: inGroupIndex, ["data-test-index"]: throughIndex });
};

// node_modules/@cloudscape-design/components/select/utils/render-options.js
var renderOptions = ({ options, getOptionProps, filteringValue, highlightType, checkboxes = false, hasDropdownStatus, virtualItems, useInteractiveGroups, screenReaderContent, ariaSetsize }) => {
  return options.map((option, index) => {
    const virtualItem = virtualItems && virtualItems[index];
    const globalIndex = virtualItem ? virtualItem.index : index;
    const props2 = getItemProps({
      option,
      index: globalIndex,
      getOptionProps,
      filteringValue,
      checkboxes
    });
    const isLastItem = index === options.length - 1;
    const padBottom = !hasDropdownStatus && isLastItem;
    const ListItem = useInteractiveGroups ? multiselect_item_default : item_default;
    return import_react15.default.createElement(ListItem, Object.assign({ key: globalIndex }, props2, { virtualPosition: virtualItem && virtualItem.start, ref: virtualItem && virtualItem.measureRef, padBottom, screenReaderContent, ariaPosinset: globalIndex + 1, ariaSetsize, highlightType }));
  });
};

// node_modules/@cloudscape-design/components/select/parts/plain-list.js
var PlainList = ({ menuProps, getOptionProps, filteredOptions, filteringValue, highlightType, checkboxes, hasDropdownStatus, listBottom, useInteractiveGroups, screenReaderContent }, ref) => {
  const menuRef = menuProps.ref;
  (0, import_react16.useImperativeHandle)(ref, () => (index) => {
    var _a;
    const item = (_a = menuRef.current) === null || _a === void 0 ? void 0 : _a.querySelector(`[data-mouse-target="${index}"]`);
    if (highlightType === "keyboard" && item) {
      scrollElementIntoView(item);
    }
  }, [highlightType, menuRef]);
  return import_react16.default.createElement(
    options_list_default,
    Object.assign({}, menuProps),
    renderOptions({
      options: filteredOptions,
      getOptionProps,
      filteringValue,
      highlightType,
      checkboxes,
      hasDropdownStatus,
      useInteractiveGroups,
      screenReaderContent
    }),
    listBottom ? import_react16.default.createElement("li", { role: "option", className: styles_css_default3["list-bottom"] }, listBottom) : null
  );
};
var plain_list_default = (0, import_react16.forwardRef)(PlainList);

// node_modules/@cloudscape-design/components/select/parts/virtual-list.js
var import_react19 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/use-virtual/index.js
var import_react18 = __toESM(require_react());

// node_modules/@cloudscape-design/components/node_modules/react-virtual/dist/react-virtual.mjs
var import_react17 = __toESM(require_react(), 1);
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var props = ["bottom", "height", "left", "right", "top", "width"];
var rectChanged = function rectChanged2(a, b) {
  if (a === void 0) {
    a = {};
  }
  if (b === void 0) {
    b = {};
  }
  return props.some(function(prop) {
    return a[prop] !== b[prop];
  });
};
var observedNodes = /* @__PURE__ */ new Map();
var rafId;
var run = function run2() {
  var changedStates = [];
  observedNodes.forEach(function(state, node) {
    var newRect = node.getBoundingClientRect();
    if (rectChanged(newRect, state.rect)) {
      state.rect = newRect;
      changedStates.push(state);
    }
  });
  changedStates.forEach(function(state) {
    state.callbacks.forEach(function(cb) {
      return cb(state.rect);
    });
  });
  rafId = window.requestAnimationFrame(run2);
};
function observeRect(node, cb) {
  return {
    observe: function observe() {
      var wasEmpty = observedNodes.size === 0;
      if (observedNodes.has(node)) {
        observedNodes.get(node).callbacks.push(cb);
      } else {
        observedNodes.set(node, {
          rect: void 0,
          hasRectChanged: false,
          callbacks: [cb]
        });
      }
      if (wasEmpty)
        run();
    },
    unobserve: function unobserve() {
      var state = observedNodes.get(node);
      if (state) {
        var index = state.callbacks.indexOf(cb);
        if (index >= 0)
          state.callbacks.splice(index, 1);
        if (!state.callbacks.length)
          observedNodes["delete"](node);
        if (!observedNodes.size)
          cancelAnimationFrame(rafId);
      }
    }
  };
}
var useIsomorphicLayoutEffect = typeof window !== "undefined" ? import_react17.default.useLayoutEffect : import_react17.default.useEffect;
function useRect(nodeRef, initialRect) {
  if (initialRect === void 0) {
    initialRect = {
      width: 0,
      height: 0
    };
  }
  var _React$useState = import_react17.default.useState(nodeRef.current), element = _React$useState[0], setElement = _React$useState[1];
  var _React$useReducer = import_react17.default.useReducer(rectReducer, initialRect), rect = _React$useReducer[0], dispatch = _React$useReducer[1];
  var initialRectSet = import_react17.default.useRef(false);
  useIsomorphicLayoutEffect(function() {
    if (nodeRef.current !== element) {
      setElement(nodeRef.current);
    }
  });
  useIsomorphicLayoutEffect(function() {
    if (element && !initialRectSet.current) {
      initialRectSet.current = true;
      var _rect = element.getBoundingClientRect();
      dispatch({
        rect: _rect
      });
    }
  }, [element]);
  import_react17.default.useEffect(function() {
    if (!element) {
      return;
    }
    var observer = observeRect(element, function(rect2) {
      dispatch({
        rect: rect2
      });
    });
    observer.observe();
    return function() {
      observer.unobserve();
    };
  }, [element]);
  return rect;
}
function rectReducer(state, action) {
  var rect = action.rect;
  if (state.height !== rect.height || state.width !== rect.width) {
    return rect;
  }
  return state;
}
var defaultEstimateSize = function defaultEstimateSize2() {
  return 50;
};
var defaultKeyExtractor = function defaultKeyExtractor2(index) {
  return index;
};
var defaultMeasureSize = function defaultMeasureSize2(el, horizontal) {
  var key = horizontal ? "offsetWidth" : "offsetHeight";
  return el[key];
};
var defaultRangeExtractor = function defaultRangeExtractor2(range) {
  var start = Math.max(range.start - range.overscan, 0);
  var end = Math.min(range.end + range.overscan, range.size - 1);
  var arr = [];
  for (var i = start; i <= end; i++) {
    arr.push(i);
  }
  return arr;
};
function useVirtual(_ref) {
  var _measurements;
  var _ref$size = _ref.size, size = _ref$size === void 0 ? 0 : _ref$size, _ref$estimateSize = _ref.estimateSize, estimateSize = _ref$estimateSize === void 0 ? defaultEstimateSize : _ref$estimateSize, _ref$overscan = _ref.overscan, overscan = _ref$overscan === void 0 ? 1 : _ref$overscan, _ref$paddingStart = _ref.paddingStart, paddingStart = _ref$paddingStart === void 0 ? 0 : _ref$paddingStart, _ref$paddingEnd = _ref.paddingEnd, paddingEnd = _ref$paddingEnd === void 0 ? 0 : _ref$paddingEnd, parentRef = _ref.parentRef, horizontal = _ref.horizontal, scrollToFn = _ref.scrollToFn, useObserver = _ref.useObserver, initialRect = _ref.initialRect, onScrollElement = _ref.onScrollElement, scrollOffsetFn = _ref.scrollOffsetFn, _ref$keyExtractor = _ref.keyExtractor, keyExtractor = _ref$keyExtractor === void 0 ? defaultKeyExtractor : _ref$keyExtractor, _ref$measureSize = _ref.measureSize, measureSize = _ref$measureSize === void 0 ? defaultMeasureSize : _ref$measureSize, _ref$rangeExtractor = _ref.rangeExtractor, rangeExtractor = _ref$rangeExtractor === void 0 ? defaultRangeExtractor : _ref$rangeExtractor;
  var sizeKey = horizontal ? "width" : "height";
  var scrollKey = horizontal ? "scrollLeft" : "scrollTop";
  var latestRef = import_react17.default.useRef({
    scrollOffset: 0,
    measurements: []
  });
  var _React$useState = import_react17.default.useState(0), scrollOffset = _React$useState[0], setScrollOffset = _React$useState[1];
  latestRef.current.scrollOffset = scrollOffset;
  var useMeasureParent = useObserver || useRect;
  var _useMeasureParent = useMeasureParent(parentRef, initialRect), outerSize = _useMeasureParent[sizeKey];
  latestRef.current.outerSize = outerSize;
  var defaultScrollToFn = import_react17.default.useCallback(function(offset) {
    if (parentRef.current) {
      parentRef.current[scrollKey] = offset;
    }
  }, [parentRef, scrollKey]);
  var resolvedScrollToFn = scrollToFn || defaultScrollToFn;
  scrollToFn = import_react17.default.useCallback(function(offset) {
    resolvedScrollToFn(offset, defaultScrollToFn);
  }, [defaultScrollToFn, resolvedScrollToFn]);
  var _React$useState2 = import_react17.default.useState({}), measuredCache = _React$useState2[0], setMeasuredCache = _React$useState2[1];
  var measure = import_react17.default.useCallback(function() {
    return setMeasuredCache({});
  }, []);
  var pendingMeasuredCacheIndexesRef = import_react17.default.useRef([]);
  var measurements = import_react17.default.useMemo(function() {
    var min = pendingMeasuredCacheIndexesRef.current.length > 0 ? Math.min.apply(Math, pendingMeasuredCacheIndexesRef.current) : 0;
    pendingMeasuredCacheIndexesRef.current = [];
    var measurements2 = latestRef.current.measurements.slice(0, min);
    for (var i = min; i < size; i++) {
      var key = keyExtractor(i);
      var measuredSize = measuredCache[key];
      var _start = measurements2[i - 1] ? measurements2[i - 1].end : paddingStart;
      var _size = typeof measuredSize === "number" ? measuredSize : estimateSize(i);
      var _end = _start + _size;
      measurements2[i] = {
        index: i,
        start: _start,
        size: _size,
        end: _end,
        key
      };
    }
    return measurements2;
  }, [estimateSize, measuredCache, paddingStart, size, keyExtractor]);
  var totalSize = (((_measurements = measurements[size - 1]) == null ? void 0 : _measurements.end) || paddingStart) + paddingEnd;
  latestRef.current.measurements = measurements;
  latestRef.current.totalSize = totalSize;
  var element = onScrollElement ? onScrollElement.current : parentRef.current;
  var scrollOffsetFnRef = import_react17.default.useRef(scrollOffsetFn);
  scrollOffsetFnRef.current = scrollOffsetFn;
  useIsomorphicLayoutEffect(function() {
    if (!element) {
      setScrollOffset(0);
      return;
    }
    var onScroll = function onScroll2(event) {
      var offset = scrollOffsetFnRef.current ? scrollOffsetFnRef.current(event) : element[scrollKey];
      setScrollOffset(offset);
    };
    onScroll();
    element.addEventListener("scroll", onScroll, {
      capture: false,
      passive: true
    });
    return function() {
      element.removeEventListener("scroll", onScroll);
    };
  }, [element, scrollKey]);
  var _calculateRange = calculateRange(latestRef.current), start = _calculateRange.start, end = _calculateRange.end;
  var indexes = import_react17.default.useMemo(function() {
    return rangeExtractor({
      start,
      end,
      overscan,
      size: measurements.length
    });
  }, [start, end, overscan, measurements.length, rangeExtractor]);
  var measureSizeRef = import_react17.default.useRef(measureSize);
  measureSizeRef.current = measureSize;
  var virtualItems = import_react17.default.useMemo(function() {
    var virtualItems2 = [];
    var _loop = function _loop2(k2, len2) {
      var i = indexes[k2];
      var measurement = measurements[i];
      var item = _extends(_extends({}, measurement), {}, {
        measureRef: function measureRef(el) {
          if (el) {
            var measuredSize = measureSizeRef.current(el, horizontal);
            if (measuredSize !== item.size) {
              var _scrollOffset = latestRef.current.scrollOffset;
              if (item.start < _scrollOffset) {
                defaultScrollToFn(_scrollOffset + (measuredSize - item.size));
              }
              pendingMeasuredCacheIndexesRef.current.push(i);
              setMeasuredCache(function(old) {
                var _extends2;
                return _extends(_extends({}, old), {}, (_extends2 = {}, _extends2[item.key] = measuredSize, _extends2));
              });
            }
          }
        }
      });
      virtualItems2.push(item);
    };
    for (var k = 0, len = indexes.length; k < len; k++) {
      _loop(k);
    }
    return virtualItems2;
  }, [indexes, defaultScrollToFn, horizontal, measurements]);
  var mountedRef = import_react17.default.useRef(false);
  useIsomorphicLayoutEffect(function() {
    if (mountedRef.current) {
      setMeasuredCache({});
    }
    mountedRef.current = true;
  }, [estimateSize]);
  var scrollToOffset = import_react17.default.useCallback(function(toOffset, _temp) {
    var _ref2 = _temp === void 0 ? {} : _temp, _ref2$align = _ref2.align, align = _ref2$align === void 0 ? "start" : _ref2$align;
    var _latestRef$current = latestRef.current, scrollOffset2 = _latestRef$current.scrollOffset, outerSize2 = _latestRef$current.outerSize;
    if (align === "auto") {
      if (toOffset <= scrollOffset2) {
        align = "start";
      } else if (toOffset >= scrollOffset2 + outerSize2) {
        align = "end";
      } else {
        align = "start";
      }
    }
    if (align === "start") {
      scrollToFn(toOffset);
    } else if (align === "end") {
      scrollToFn(toOffset - outerSize2);
    } else if (align === "center") {
      scrollToFn(toOffset - outerSize2 / 2);
    }
  }, [scrollToFn]);
  var tryScrollToIndex = import_react17.default.useCallback(function(index, _temp2) {
    var _ref3 = _temp2 === void 0 ? {} : _temp2, _ref3$align = _ref3.align, align = _ref3$align === void 0 ? "auto" : _ref3$align, rest = _objectWithoutPropertiesLoose(_ref3, ["align"]);
    var _latestRef$current2 = latestRef.current, measurements2 = _latestRef$current2.measurements, scrollOffset2 = _latestRef$current2.scrollOffset, outerSize2 = _latestRef$current2.outerSize;
    var measurement = measurements2[Math.max(0, Math.min(index, size - 1))];
    if (!measurement) {
      return;
    }
    if (align === "auto") {
      if (measurement.end >= scrollOffset2 + outerSize2) {
        align = "end";
      } else if (measurement.start <= scrollOffset2) {
        align = "start";
      } else {
        return;
      }
    }
    var toOffset = align === "center" ? measurement.start + measurement.size / 2 : align === "end" ? measurement.end : measurement.start;
    scrollToOffset(toOffset, _extends({
      align
    }, rest));
  }, [scrollToOffset, size]);
  var scrollToIndex = import_react17.default.useCallback(function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    tryScrollToIndex.apply(void 0, args);
    requestAnimationFrame(function() {
      tryScrollToIndex.apply(void 0, args);
    });
  }, [tryScrollToIndex]);
  return {
    virtualItems,
    totalSize,
    scrollToOffset,
    scrollToIndex,
    measure
  };
}
var findNearestBinarySearch = function findNearestBinarySearch2(low, high, getCurrentValue, value) {
  while (low <= high) {
    var middle = (low + high) / 2 | 0;
    var currentValue = getCurrentValue(middle);
    if (currentValue < value) {
      low = middle + 1;
    } else if (currentValue > value) {
      high = middle - 1;
    } else {
      return middle;
    }
  }
  if (low > 0) {
    return low - 1;
  } else {
    return 0;
  }
};
function calculateRange(_ref4) {
  var measurements = _ref4.measurements, outerSize = _ref4.outerSize, scrollOffset = _ref4.scrollOffset;
  var size = measurements.length - 1;
  var getOffset = function getOffset2(index) {
    return measurements[index].start;
  };
  var start = findNearestBinarySearch(0, size, getOffset, scrollOffset);
  var end = start;
  while (end < size && measurements[end].end < scrollOffset + outerSize) {
    end++;
  }
  return {
    start,
    end
  };
}

// node_modules/@cloudscape-design/components/internal/hooks/use-virtual/index.js
var MAX_ITEM_MOUNTS = 100;
function useVirtual2({ items, parentRef, estimateSize }) {
  const rowVirtualizer = useVirtual({ size: items.length, parentRef, estimateSize, overscan: 5 });
  const measuresCache = (0, import_react18.useRef)(/* @__PURE__ */ new WeakMap());
  const indicesKey = rowVirtualizer.virtualItems.map((item) => `${item.index}`).join(":");
  (0, import_react18.useEffect)(() => {
    measuresCache.current = /* @__PURE__ */ new WeakMap();
  }, [indicesKey, items, estimateSize]);
  const virtualItems = (0, import_react18.useMemo)(() => rowVirtualizer.virtualItems.map((virtualItem) => Object.assign(Object.assign({}, virtualItem), { measureRef: (node) => {
    var _a;
    const mountedCount = (_a = measuresCache.current.get(items[virtualItem.index])) !== null && _a !== void 0 ? _a : 0;
    if (mountedCount < MAX_ITEM_MOUNTS) {
      virtualItem.measureRef(node);
      measuresCache.current.set(items[virtualItem.index], mountedCount + 1);
    }
  } })), [items, rowVirtualizer.virtualItems]);
  return {
    virtualItems,
    totalSize: rowVirtualizer.totalSize,
    scrollToIndex: rowVirtualizer.scrollToIndex
  };
}

// node_modules/@cloudscape-design/components/select/parts/virtual-list.js
var VirtualList = (props2, ref) => {
  return props2.menuProps.open ? import_react19.default.createElement(VirtualListOpen, Object.assign({}, props2, { ref })) : import_react19.default.createElement(VirtualListClosed, Object.assign({}, props2, { ref }));
};
var VirtualListOpen = (0, import_react19.forwardRef)(({ menuProps, getOptionProps, filteredOptions, filteringValue, highlightType, checkboxes, hasDropdownStatus, listBottom, useInteractiveGroups, screenReaderContent }, ref) => {
  const [width, menuMeasureRef] = useContainerQuery((rect) => rect.width, []);
  const menuRefObject = (0, import_react19.useRef)(null);
  const menuRef = useMergeRefs(menuMeasureRef, menuRefObject, menuProps.ref);
  const { virtualItems, totalSize, scrollToIndex } = useVirtual2({
    items: filteredOptions,
    parentRef: menuRefObject,
    estimateSize: (0, import_react19.useCallback)(() => 31, [width, filteringValue])
  });
  (0, import_react19.useImperativeHandle)(ref, () => (index) => {
    if (highlightType === "keyboard") {
      scrollToIndex(index);
    }
  }, [highlightType, scrollToIndex]);
  const finalOptions = renderOptions({
    options: virtualItems.map(({ index }) => filteredOptions[index]),
    getOptionProps,
    filteringValue,
    highlightType,
    checkboxes,
    hasDropdownStatus,
    virtualItems,
    useInteractiveGroups,
    screenReaderContent,
    ariaSetsize: filteredOptions.length
  });
  return import_react19.default.createElement(
    options_list_default,
    Object.assign({}, menuProps, { ref: menuRef }),
    import_react19.default.createElement("div", { "aria-hidden": "true", key: "total-size", className: styles_css_default3["layout-strut"], style: { height: totalSize } }),
    finalOptions,
    listBottom ? import_react19.default.createElement("li", { role: "option", className: styles_css_default3["list-bottom"] }, listBottom) : null
  );
});
var VirtualListClosed = (0, import_react19.forwardRef)(({ menuProps, listBottom }, ref) => {
  (0, import_react19.useImperativeHandle)(ref, () => () => {
  }, []);
  return import_react19.default.createElement(options_list_default, Object.assign({}, menuProps, { ref: menuProps.ref }), listBottom ? import_react19.default.createElement("li", { role: "option", className: styles_css_default3["list-bottom"] }, listBottom) : null);
});
var virtual_list_default = (0, import_react19.forwardRef)(VirtualList);

// node_modules/@cloudscape-design/components/select/utils/check-option-value-field.js
function checkOptionValueField(componentName, propertyName, propertyValue) {
  if (isDevelopment) {
    if (!propertyValue) {
      return;
    }
    const valuePropertyMissing = !propertyValue.every((element) => {
      return "options" in element || "value" in element;
    });
    if (valuePropertyMissing) {
      warnOnce(componentName, `You provided an \`${propertyName}\` prop where at least one non-group array element is missing the \`value\` field. This field is required for all options without sub-items.`);
    }
  }
}

// node_modules/@cloudscape-design/components/select/parts/filter.js
var import_react20 = __toESM(require_react());
var Filter = import_react20.default.forwardRef((_a, ref) => {
  var { filteringType } = _a, filterProps = __rest(_a, ["filteringType"]);
  if (filteringType === "none") {
    return null;
  }
  return import_react20.default.createElement(internal_default3, Object.assign({ ref, type: "visualSearch", className: styles_css_default3.filter, autoComplete: false, disableBrowserAutocorrect: true, invalid: false, __noBorderRadius: true }, filterProps, { __nativeAttributes: Object.assign({ "aria-expanded": true, "aria-haspopup": true, role: "combobox", autoCorrect: "off", autoCapitalize: "off" }, filterProps.__nativeAttributes) }));
});
var filter_default = Filter;

// node_modules/@cloudscape-design/components/select/parts/trigger.js
var import_react22 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/button-trigger/index.js
var import_react21 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/button-trigger/styles.css.js
import "/local/home/samilafo/final_epa_project/cloudscape_wrkshp/cloudscape-design-system-workshop/node_modules/@cloudscape-design/components/internal/components/button-trigger/styles.scoped.css";
var styles_css_default6 = {
  "button-trigger": "awsui_button-trigger_18eso_jeche_97",
  "arrow": "awsui_arrow_18eso_jeche_97",
  "has-caret": "awsui_has-caret_18eso_jeche_137",
  "placeholder": "awsui_placeholder_18eso_jeche_140",
  "pressed": "awsui_pressed_18eso_jeche_153",
  "disabled": "awsui_disabled_18eso_jeche_156",
  "in-filtering-token": "awsui_in-filtering-token_18eso_jeche_165",
  "read-only": "awsui_read-only_18eso_jeche_171",
  "invalid": "awsui_invalid_18eso_jeche_188"
};

// node_modules/@cloudscape-design/components/internal/components/button-trigger/index.js
var ButtonTrigger = (_a, ref) => {
  var { children, pressed = false, hideCaret = false, disabled = false, readOnly = false, invalid = false, inFilteringToken, ariaHasPopup, ariaLabel, ariaLabelledby, ariaDescribedby, onKeyDown, onKeyUp, onMouseDown, onClick, onFocus, onBlur, autoFocus } = _a, restProps = __rest(_a, ["children", "pressed", "hideCaret", "disabled", "readOnly", "invalid", "inFilteringToken", "ariaHasPopup", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "onKeyDown", "onKeyUp", "onMouseDown", "onClick", "onFocus", "onBlur", "autoFocus"]);
  const baseProps = getBaseProps(restProps);
  const attributes = Object.assign(Object.assign({}, baseProps), { type: "button", className: clsx_m_default(styles_css_default6["button-trigger"], baseProps.className, pressed && styles_css_default6.pressed, disabled && styles_css_default6.disabled, invalid && styles_css_default6.invalid, !hideCaret && styles_css_default6["has-caret"], readOnly && styles_css_default6["read-only"], inFilteringToken && styles_css_default6["in-filtering-token"]), disabled: disabled || readOnly, "aria-expanded": pressed, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby, "aria-haspopup": ariaHasPopup !== null && ariaHasPopup !== void 0 ? ariaHasPopup : "listbox", onKeyDown: onKeyDown && ((event) => fireKeyboardEvent(onKeyDown, event)), onKeyUp: onKeyUp && ((event) => fireKeyboardEvent(onKeyUp, event)), onMouseDown: onMouseDown && ((event) => fireCancelableEvent(onMouseDown, {}, event)), onClick: onClick && ((event) => fireCancelableEvent(onClick, {}, event)), onFocus: onFocus && ((event) => fireCancelableEvent(onFocus, {}, event)), onBlur: onBlur && ((event) => fireCancelableEvent(onBlur, { relatedTarget: event.relatedTarget }, event)), autoFocus });
  if (invalid) {
    attributes["aria-invalid"] = invalid;
  }
  return import_react21.default.createElement(
    "button",
    Object.assign({ ref }, attributes),
    children,
    !hideCaret && import_react21.default.createElement(
      "span",
      { className: styles_css_default6.arrow },
      import_react21.default.createElement(internal_default, { name: "caret-down-filled", variant: disabled ? "disabled" : "normal" })
    )
  );
};
var button_trigger_default = import_react21.default.forwardRef(ButtonTrigger);

// node_modules/@cloudscape-design/components/select/parts/trigger.js
var Trigger = import_react22.default.forwardRef(({ ariaLabelledby, ariaDescribedby, controlId, invalid, triggerProps, selectedOption, triggerVariant, inFilteringToken, isOpen, placeholder, disabled }, ref) => {
  const generatedId = useUniqueId();
  const id = controlId !== null && controlId !== void 0 ? controlId : generatedId;
  const triggerContentId = useUniqueId("trigger-content-");
  let triggerContent = null;
  if (!selectedOption) {
    triggerContent = import_react22.default.createElement("span", { "aria-disabled": "true", className: clsx_m_default(styles_css_default3.placeholder, styles_css_default3.trigger), id: triggerContentId }, placeholder);
  } else if (triggerVariant === "option") {
    triggerContent = import_react22.default.createElement(option_default, { id: triggerContentId, option: Object.assign(Object.assign({}, selectedOption), { disabled }), triggerVariant: true });
  } else {
    triggerContent = import_react22.default.createElement("span", { id: triggerContentId, className: styles_css_default3.trigger }, selectedOption.label || selectedOption.value);
  }
  const mergedRef = useMergeRefs(triggerProps.ref, ref);
  return import_react22.default.createElement(button_trigger_default, Object.assign({}, triggerProps, { id, ref: mergedRef, pressed: isOpen, disabled, invalid, inFilteringToken, ariaDescribedby, ariaLabelledby: joinStrings(ariaLabelledby, triggerContentId) }), triggerContent);
});
var trigger_default = Trigger;

// node_modules/@cloudscape-design/components/token-group/internal.js
var import_react28 = __toESM(require_react());

// node_modules/@cloudscape-design/components/token-group/styles.css.js
import "/local/home/samilafo/final_epa_project/cloudscape_wrkshp/cloudscape-design-system-workshop/node_modules/@cloudscape-design/components/token-group/styles.scoped.css";
var styles_css_default7 = {
  "root": "awsui_root_dm8gx_nm1t1_97",
  "has-items": "awsui_has-items_dm8gx_nm1t1_109",
  "dismiss-button": "awsui_dismiss-button_dm8gx_nm1t1_113",
  "token": "awsui_token_dm8gx_nm1t1_147",
  "token-box": "awsui_token-box_dm8gx_nm1t1_154",
  "token-box-error": "awsui_token-box-error_dm8gx_nm1t1_166",
  "token-box-disabled": "awsui_token-box-disabled_dm8gx_nm1t1_177"
};

// node_modules/@cloudscape-design/components/internal/components/token-list/index.js
var import_react25 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/token-list/token-limit-toggle.js
var import_react23 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/token-list/styles.css.js
import "/local/home/samilafo/final_epa_project/cloudscape_wrkshp/cloudscape-design-system-workshop/node_modules/@cloudscape-design/components/internal/components/token-list/styles.scoped.css";
var styles_css_default8 = {
  "root": "awsui_root_gfwv3_x9ohd_93",
  "horizontal": "awsui_horizontal_gfwv3_x9ohd_98",
  "vertical": "awsui_vertical_gfwv3_x9ohd_102",
  "list": "awsui_list_gfwv3_x9ohd_106",
  "list-item": "awsui_list-item_gfwv3_x9ohd_124",
  "toggle-container-inline": "awsui_toggle-container-inline_gfwv3_x9ohd_129",
  "toggle": "awsui_toggle_gfwv3_x9ohd_129",
  "description": "awsui_description_gfwv3_x9ohd_197",
  "separator": "awsui_separator_gfwv3_x9ohd_201"
};

// node_modules/@cloudscape-design/components/internal/components/token-list/token-limit-toggle.js
function TokenLimitToggle({ controlId, allHidden, expanded, numberOfHiddenOptions, onClick, i18nStrings = {} }) {
  const i18n = useInternalI18n("token-group");
  const numberOfHiddenOptionLabel = allHidden ? numberOfHiddenOptions : `+${numberOfHiddenOptions}`;
  const description = expanded ? i18n("i18nStrings.limitShowFewer", i18nStrings.limitShowFewer) : `${i18n("i18nStrings.limitShowMore", i18nStrings.limitShowMore) || ""} (${numberOfHiddenOptionLabel})`;
  const handleClick = (0, import_react23.useCallback)(() => {
    fireNonCancelableEvent(onClick, null);
  }, [onClick]);
  return import_react23.default.createElement(
    "button",
    { type: "button", className: styles_css_default8.toggle, onClick: handleClick, "aria-controls": controlId, "aria-expanded": expanded },
    import_react23.default.createElement(internal_default, { name: expanded ? "treeview-collapse" : "treeview-expand" }),
    import_react23.default.createElement("span", { className: styles_css_default8.description }, description)
  );
}

// node_modules/@cloudscape-design/components/internal/components/token-list/token-focus-controller.js
var import_react24 = __toESM(require_react());
var tokenSelector = `.${styles_css_default8["list-item"]}`;
var toggleButtonSelector = `.${styles_css_default8.toggle}`;
function useTokenFocusController({ removedItemIndex }) {
  const tokenListRef = (0, import_react24.useRef)(null);
  (0, import_react24.useEffect)(() => {
    var _a, _b;
    if (removedItemIndex === void 0 || removedItemIndex === null || tokenListRef.current === null) {
      return;
    }
    const tokenElements = tokenListRef.current.querySelectorAll(tokenSelector);
    const toggleButton = tokenListRef.current.querySelector(toggleButtonSelector);
    const activeItemIndices = [];
    for (let i = 0; i < tokenElements.length; i++) {
      if (!tokenElements[i].querySelector('[aria-disabled="true"]')) {
        activeItemIndices.push(i);
      }
    }
    let closestPrevIndex = Number.NEGATIVE_INFINITY;
    let closestNextIndex = Number.POSITIVE_INFINITY;
    for (const activeIndex of activeItemIndices) {
      if (activeIndex < removedItemIndex) {
        closestPrevIndex = removedItemIndex - activeIndex < removedItemIndex - closestPrevIndex ? activeIndex : closestPrevIndex;
      } else {
        closestNextIndex = activeIndex - removedItemIndex < closestNextIndex - removedItemIndex ? activeIndex : closestNextIndex;
      }
    }
    const nextElement = tokenElements[closestNextIndex];
    const prevElement = tokenElements[closestPrevIndex];
    if (nextElement instanceof HTMLElement) {
      (_a = getFirstFocusable(nextElement)) === null || _a === void 0 ? void 0 : _a.focus();
    } else if (prevElement instanceof HTMLElement) {
      (_b = getFirstFocusable(prevElement)) === null || _b === void 0 ? void 0 : _b.focus();
    } else if (toggleButton instanceof HTMLElement) {
      toggleButton.focus();
    }
  }, [removedItemIndex]);
  return tokenListRef;
}

// node_modules/@cloudscape-design/components/internal/components/token-list/index.js
function TokenList({ items, alignment, renderItem, limit, after, i18nStrings, removedItemIndex }) {
  const tokenListRef = useTokenFocusController({ removedItemIndex });
  const controlId = useUniqueId();
  const [expanded, setExpanded] = (0, import_react25.useState)(false);
  const hasItems = items.length > 0;
  const hasHiddenItems = hasItems && limit !== void 0 && items.length > limit;
  const visibleItems = hasHiddenItems && !expanded ? items.slice(0, limit) : items;
  const hasVisibleItems = visibleItems.length > 0;
  const toggle = hasHiddenItems ? import_react25.default.createElement(
    "div",
    { className: styles_css_default8[`toggle-container-${alignment}`] },
    import_react25.default.createElement(TokenLimitToggle, { controlId: hasVisibleItems ? controlId : void 0, allHidden: limit === 0, expanded, numberOfHiddenOptions: items.length - visibleItems.length, i18nStrings, onClick: () => setExpanded(!expanded) })
  ) : null;
  if (alignment === "inline") {
    return import_react25.default.createElement(
      "div",
      { ref: tokenListRef, className: clsx_m_default(styles_css_default8.root, styles_css_default8.horizontal) },
      hasItems && import_react25.default.createElement("ul", { id: controlId, className: styles_css_default8.list }, visibleItems.map((item, itemIndex) => import_react25.default.createElement("li", { key: itemIndex, className: styles_css_default8["list-item"], "aria-setsize": items.length, "aria-posinset": itemIndex + 1 }, renderItem(item, itemIndex)))),
      toggle,
      after && import_react25.default.createElement("div", { className: styles_css_default8.separator }),
      after
    );
  }
  return import_react25.default.createElement(
    "div",
    { ref: tokenListRef, className: clsx_m_default(styles_css_default8.root, styles_css_default8.vertical) },
    hasVisibleItems && import_react25.default.createElement("ul", { id: controlId, className: clsx_m_default(styles_css_default8.list, styles_css_default8[alignment]) }, visibleItems.map((item, itemIndex) => import_react25.default.createElement("li", { key: itemIndex, className: styles_css_default8["list-item"], "aria-setsize": items.length, "aria-posinset": itemIndex + 1 }, renderItem(item, itemIndex)))),
    toggle,
    after
  );
}

// node_modules/@cloudscape-design/components/token-group/token.js
var import_react27 = __toESM(require_react());

// node_modules/@cloudscape-design/components/token-group/dismiss-button.js
var import_react26 = __toESM(require_react());
var dismiss_button_default = (0, import_react26.forwardRef)(DismissButton);
function DismissButton({ disabled, dismissLabel, onDismiss }, ref) {
  return import_react26.default.createElement(
    "button",
    { ref, type: "button", className: clsx_m_default(styles_css_default7["dismiss-button"]), disabled, onClick: onDismiss, "aria-label": dismissLabel },
    import_react26.default.createElement(internal_default, { name: "close" })
  );
}

// node_modules/@cloudscape-design/components/token-group/token.js
function Token(_a) {
  var { ariaLabel, disabled, dismissLabel, onDismiss, children, errorText, errorIconAriaLabel } = _a, restProps = __rest(_a, ["ariaLabel", "disabled", "dismissLabel", "onDismiss", "children", "errorText", "errorIconAriaLabel"]);
  const errorId = useUniqueId("error");
  const baseProps = getBaseProps(restProps);
  return import_react27.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default7.token, baseProps.className), role: "group", "aria-label": ariaLabel, "aria-describedby": errorText ? errorId : void 0, "aria-disabled": disabled }),
    import_react27.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default7["token-box"], disabled && styles_css_default7["token-box-disabled"], errorText && styles_css_default7["token-box-error"]) },
      children,
      onDismiss && import_react27.default.createElement(dismiss_button_default, { disabled, dismissLabel, onDismiss })
    ),
    errorText && import_react27.default.createElement(FormFieldError, { id: errorId, errorIconAriaLabel }, errorText)
  );
}

// node_modules/@cloudscape-design/components/token-group/internal.js
function InternalTokenGroup(_a) {
  var { alignment, items, onDismiss, limit, i18nStrings, __internalRootRef } = _a, props2 = __rest(_a, ["alignment", "items", "onDismiss", "limit", "i18nStrings", "__internalRootRef"]);
  checkControlled("TokenGroup", "items", items, "onDismiss", onDismiss);
  const [removedItemIndex, setRemovedItemIndex] = (0, import_react28.useState)(null);
  const baseProps = getBaseProps(props2);
  const hasItems = items.length > 0;
  return import_react28.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default7.root, hasItems && styles_css_default7["has-items"]), ref: __internalRootRef }),
    import_react28.default.createElement(TokenList, { alignment, items, limit, renderItem: (item, itemIndex) => import_react28.default.createElement(
      Token,
      { ariaLabel: item.label, dismissLabel: item.dismissLabel, onDismiss: () => {
        fireNonCancelableEvent(onDismiss, { itemIndex });
        setRemovedItemIndex(itemIndex);
      }, disabled: item.disabled },
      import_react28.default.createElement(option_default, { option: item, isGenericGroup: false })
    ), i18nStrings, removedItemIndex })
  );
}

// node_modules/@cloudscape-design/components/multiselect/styles.css.js
import "/local/home/samilafo/final_epa_project/cloudscape_wrkshp/cloudscape-design-system-workshop/node_modules/@cloudscape-design/components/multiselect/styles.scoped.css";
var styles_css_default9 = {
  "root": "awsui_root_f8g6q_wi4df_93"
};

// node_modules/@cloudscape-design/components/multiselect/internal.js
var InternalMultiselect = import_react29.default.forwardRef((_a, externalRef) => {
  var _b;
  var { options = [], filteringType = "none", filteringPlaceholder, filteringAriaLabel, filteringClearAriaLabel, filteringResultsText, ariaRequired, placeholder, disabled, ariaLabel, statusType = "finished", empty, loadingText, finishedText, errorText, recoveryText, noMatch, selectedAriaLabel, renderHighlightedAriaLive, selectedOptions = [], deselectAriaLabel, keepOpen = true, tokenLimit, i18nStrings, onBlur, onFocus, onLoadItems, onChange, virtualScroll, hideTokens = false, expandToViewport, __internalRootRef = null, autoFocus } = _a, restProps = __rest(_a, ["options", "filteringType", "filteringPlaceholder", "filteringAriaLabel", "filteringClearAriaLabel", "filteringResultsText", "ariaRequired", "placeholder", "disabled", "ariaLabel", "statusType", "empty", "loadingText", "finishedText", "errorText", "recoveryText", "noMatch", "selectedAriaLabel", "renderHighlightedAriaLive", "selectedOptions", "deselectAriaLabel", "keepOpen", "tokenLimit", "i18nStrings", "onBlur", "onFocus", "onLoadItems", "onChange", "virtualScroll", "hideTokens", "expandToViewport", "__internalRootRef", "autoFocus"]);
  checkOptionValueField("Multiselect", "options", options);
  const baseProps = getBaseProps(restProps);
  const formFieldContext = useFormFieldContext(restProps);
  const i18n = useInternalI18n("multiselect");
  const { handleLoadMore, handleRecoveryClick, fireLoadItems } = useLoadItems({
    onLoadItems,
    options,
    statusType
  });
  const useInteractiveGroups = true;
  const [filteringValue, setFilteringValue] = (0, import_react29.useState)("");
  const { filteredOptions, parentMap, totalCount, matchesCount } = prepareOptions(options, filteringType, filteringValue);
  const updateSelectedOption = (0, import_react29.useCallback)((option) => {
    const filtered = filteredOptions.filter((item) => item.type !== "parent").map((item) => item.option);
    const isAllChildrenSelected = (optionsArray) => optionsArray.every((item) => findOptionIndex(selectedOptions, item) > -1 || item.disabled);
    const intersection = (visibleOptions, options2) => visibleOptions.filter((item) => findOptionIndex(options2, item) > -1 && !item.disabled);
    const union = (visibleOptions, options2) => visibleOptions.filter((item) => findOptionIndex(options2, item) === -1).concat(options2);
    const select = (options2, selectedOptions2) => {
      return union(selectedOptions2, options2);
    };
    const unselect = (options2, selectedOptions2) => {
      return selectedOptions2.filter((option2) => findOptionIndex(options2, option2) === -1);
    };
    let newSelectedOptions = [...selectedOptions];
    if (isGroup(option)) {
      const visibleOptions = intersection([...option.options], filtered);
      newSelectedOptions = isAllChildrenSelected(visibleOptions) ? unselect(visibleOptions, newSelectedOptions) : select(visibleOptions, newSelectedOptions);
    } else {
      newSelectedOptions = isAllChildrenSelected([option]) ? unselect([option], newSelectedOptions) : select([option], newSelectedOptions);
    }
    fireNonCancelableEvent(onChange, {
      selectedOptions: newSelectedOptions
    });
  }, [onChange, selectedOptions, filteredOptions]);
  const rootRef = (0, import_react29.useRef)(null);
  const selfControlId = useUniqueId("trigger");
  const controlId = (_b = formFieldContext.controlId) !== null && _b !== void 0 ? _b : selfControlId;
  const multiSelectAriaLabelId = useUniqueId("multiselect-arialabel-");
  const footerId = useUniqueId("footer");
  const scrollToIndex = (0, import_react29.useRef)(null);
  const { isOpen, highlightType, highlightedOption, highlightedIndex, getTriggerProps, getDropdownProps, getFilterProps, getMenuProps, getOptionProps, highlightOption, announceSelected } = useSelect({
    selectedOptions,
    updateSelectedOption,
    options: filteredOptions,
    filteringType,
    onFocus,
    onBlur,
    externalRef,
    keepOpen,
    fireLoadItems,
    setFilteringValue,
    useInteractiveGroups,
    statusType
  });
  const handleNativeSearch = useNativeSearch({
    isEnabled: filteringType === "none" && isOpen,
    options: filteredOptions,
    highlightOption,
    highlightedOption: highlightedOption === null || highlightedOption === void 0 ? void 0 : highlightedOption.option,
    useInteractiveGroups
  });
  const isEmpty = !options || options.length === 0;
  const isNoMatch = filteredOptions && filteredOptions.length === 0;
  const isFiltered = filteringType !== "none" && filteringValue.length > 0 && filteredOptions && filteredOptions.length > 0;
  const filteredText = isFiltered ? filteringResultsText === null || filteringResultsText === void 0 ? void 0 : filteringResultsText(matchesCount, totalCount) : void 0;
  const dropdownStatus = useDropdownStatus({
    statusType,
    empty,
    loadingText,
    finishedText,
    errorText,
    recoveryText,
    isEmpty,
    isNoMatch,
    noMatch,
    isFiltered,
    filteringResultsText: filteredText,
    onRecoveryClick: handleRecoveryClick,
    errorIconAriaLabel: restProps.errorIconAriaLabel
  });
  const filter = import_react29.default.createElement(filter_default, Object.assign({ clearAriaLabel: filteringClearAriaLabel, filteringType, placeholder: filteringPlaceholder, ariaLabel: filteringAriaLabel, ariaRequired, value: filteringValue }, getFilterProps()));
  const trigger = import_react29.default.createElement(trigger_default, Object.assign({ placeholder, disabled, triggerProps: getTriggerProps(disabled, autoFocus), selectedOption: null, isOpen }, formFieldContext, { controlId, ariaLabelledby: joinStrings(formFieldContext.ariaLabelledby, multiSelectAriaLabelId) }));
  const menuProps = Object.assign(Object.assign({}, getMenuProps()), { onLoadMore: handleLoadMore, ariaLabelledby: joinStrings(multiSelectAriaLabelId, controlId), ariaDescribedby: dropdownStatus.content ? footerId : void 0 });
  const announcement = useAnnouncement({
    announceSelected,
    highlightedOption,
    getParent: (option) => {
      var _a2;
      return (_a2 = parentMap.get(option)) === null || _a2 === void 0 ? void 0 : _a2.option;
    },
    selectedAriaLabel,
    renderHighlightedAriaLive
  });
  const tokens = selectedOptions.map((option) => ({
    label: option.label,
    disabled: disabled || option.disabled,
    labelTag: option.labelTag,
    description: option.description,
    iconAlt: option.iconAlt,
    iconName: option.iconName,
    iconUrl: option.iconUrl,
    iconSvg: option.iconSvg,
    tags: option.tags,
    dismissLabel: i18n("deselectAriaLabel", deselectAriaLabel === null || deselectAriaLabel === void 0 ? void 0 : deselectAriaLabel(option), (format) => {
      var _a2;
      return format({ option__label: (_a2 = option.label) !== null && _a2 !== void 0 ? _a2 : "" });
    })
  }));
  (0, import_react29.useEffect)(() => {
    var _a2;
    (_a2 = scrollToIndex.current) === null || _a2 === void 0 ? void 0 : _a2.call(scrollToIndex, highlightedIndex);
  }, [highlightedIndex]);
  const ListComponent = virtualScroll ? virtual_list_default : plain_list_default;
  const handleMouseDown = (event) => {
    const target = event.target;
    if (target !== document.activeElement) {
      event.preventDefault();
    }
  };
  const showTokens = !hideTokens && tokens.length > 0;
  const handleTokenDismiss = ({ detail }) => {
    const optionToDeselect = selectedOptions[detail.itemIndex];
    updateSelectedOption(optionToDeselect);
    const targetRef = getTriggerProps().ref;
    if (targetRef.current) {
      targetRef.current.focus();
    }
  };
  const tokenGroupI18nStrings = {
    limitShowFewer: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tokenLimitShowFewer,
    limitShowMore: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tokenLimitShowMore
  };
  const mergedRef = useMergeRefs(rootRef, __internalRootRef);
  return import_react29.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: mergedRef, className: clsx_m_default(styles_css_default9.root, baseProps.className), onKeyPress: handleNativeSearch }),
    import_react29.default.createElement(
      dropdown_default,
      Object.assign({}, getDropdownProps(), { open: isOpen, trigger, header: filter, onMouseDown: handleMouseDown, footer: dropdownStatus.isSticky ? import_react29.default.createElement(dropdown_footer_default, { content: isOpen ? dropdownStatus.content : null, id: footerId }) : null, expandToViewport }),
      import_react29.default.createElement(ListComponent, { listBottom: !dropdownStatus.isSticky ? import_react29.default.createElement(dropdown_footer_default, { content: isOpen ? dropdownStatus.content : null, id: footerId }) : null, menuProps, getOptionProps, filteredOptions, filteringValue, ref: scrollToIndex, hasDropdownStatus: dropdownStatus.content !== null, checkboxes: true, useInteractiveGroups, screenReaderContent: announcement, highlightType })
    ),
    showTokens && import_react29.default.createElement(InternalTokenGroup, { alignment: "horizontal", limit: tokenLimit, items: tokens, onDismiss: handleTokenDismiss, i18nStrings: tokenGroupI18nStrings }),
    import_react29.default.createElement(ScreenreaderOnly, { id: multiSelectAriaLabelId }, ariaLabel)
  );
});
var internal_default4 = InternalMultiselect;

export {
  useDropdownStatus,
  dropdown_footer_default,
  getTestOptionIndexes,
  generateTestIndexes,
  prepareOptions,
  useHighlightedOption,
  useSelect,
  useNativeSearch,
  useLoadItems,
  useAnnouncement,
  option_default,
  selectable_item_default,
  plain_list_default,
  useVirtual2 as useVirtual,
  virtual_list_default,
  checkOptionValueField,
  filter_default,
  button_trigger_default,
  trigger_default,
  TokenList,
  Token,
  InternalTokenGroup,
  internal_default4 as internal_default
};
//# sourceMappingURL=chunk-2XZ7DUT6.js.map

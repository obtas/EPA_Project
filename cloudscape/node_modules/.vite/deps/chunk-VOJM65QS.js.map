{
  "version": 3,
  "sources": ["../../@cloudscape-design/components/i18n/i18n/context.ts"],
  "sourcesContent": ["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useContext } from 'react';\nimport { I18nFormatArgTypes } from './messages-types';\n\nexport type CustomHandler<ReturnValue, FormatFnArgs> = (formatFn: (args: FormatFnArgs) => string) => ReturnValue;\n\nexport interface FormatFunction {\n  (namespace: string, component: string, key: string, provided: string): string;\n  (namespace: string, component: string, key: string, provided: string | undefined): string | undefined;\n  <T, A = unknown>(namespace: string, component: string, key: string, provided: T, handler?: CustomHandler<T, A>): T;\n}\n\nexport interface InternalI18nContextProps {\n  locale: string | null;\n  format: FormatFunction;\n}\n\nexport const InternalI18nContext = React.createContext<InternalI18nContextProps>({\n  locale: null,\n  format: <T>(_namespace: string, _component: string, _key: string, provided: T) => provided,\n});\n\nexport function useLocale(): string | null {\n  return useContext(InternalI18nContext).locale;\n}\n\n/**\n * Utility to get \"keyof T\" but exclude number or symbol types.\n * TypeScript allows those types because JS implicitly casts them to string.\n */\ntype StringKeyOf<T> = Extract<keyof T, string>;\n\nexport interface ComponentFormatFunction<ComponentName extends StringKeyOf<I18nFormatArgTypes>> {\n  <MessageKey extends StringKeyOf<I18nFormatArgTypes[ComponentName]>>(\n    key: MessageKey,\n    provided: string,\n    handler?: CustomHandler<string, I18nFormatArgTypes[ComponentName][MessageKey]>\n  ): string;\n  <MessageKey extends StringKeyOf<I18nFormatArgTypes[ComponentName]>>(\n    key: MessageKey,\n    provided: string | undefined,\n    handler?: CustomHandler<string, I18nFormatArgTypes[ComponentName][MessageKey]>\n  ): string | undefined;\n  <MessageKey extends StringKeyOf<I18nFormatArgTypes[ComponentName]>, ReturnValue>(\n    key: MessageKey,\n    provided: ReturnValue,\n    handler: I18nFormatArgTypes[ComponentName][MessageKey] extends never\n      ? never\n      : CustomHandler<ReturnValue, I18nFormatArgTypes[ComponentName][MessageKey]>\n  ): ReturnValue;\n}\n\nexport function useInternalI18n<ComponentName extends StringKeyOf<I18nFormatArgTypes>>(\n  componentName: ComponentName\n): ComponentFormatFunction<ComponentName> {\n  const { format } = useContext(InternalI18nContext);\n  return <MessageKey extends StringKeyOf<I18nFormatArgTypes[ComponentName]>, ValueType>(\n    key: MessageKey,\n    provided: ValueType,\n    customHandler?: CustomHandler<ValueType, I18nFormatArgTypes[ComponentName][MessageKey]>\n  ) => {\n    return format('@cloudscape-design/components', componentName, key, provided, customHandler);\n  };\n}\n"],
  "mappings": ";;;;;;AAGA,mBAAkC;AAgB3B,IAAM,sBAAsB,aAAAA,QAAM,cAAwC;EAC/E,QAAQ;EACR,QAAQ,CAAI,YAAoB,YAAoB,MAAc,aAAgB;CACnF;AAEK,SAAU,YAAS;AACvB,aAAO,yBAAW,mBAAmB,EAAE;AACzC;AA4BM,SAAU,gBACd,eAA4B;AAE5B,QAAM,EAAE,OAAM,QAAK,yBAAW,mBAAmB;AACjD,SAAO,CACL,KACA,UACA,kBACE;AACF,WAAO,OAAO,iCAAiC,eAAe,KAAK,UAAU,aAAa;EAC5F;AACF;",
  "names": ["React"]
}

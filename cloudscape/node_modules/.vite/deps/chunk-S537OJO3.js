import {
  Transition
} from "./chunk-TWOQSS3Q.js";
import {
  InternalButton
} from "./chunk-46IS5YID.js";
import {
  useInternalI18n
} from "./chunk-VOJM65QS.js";
import {
  useControllable
} from "./chunk-BPYCGB7Y.js";
import {
  DynamicOverlapContext
} from "./chunk-6IFHW5WD.js";
import {
  AppLayoutContext,
  custom_css_properties_default
} from "./chunk-NABBUFNM.js";
import {
  useContainerQuery,
  useResizeObserver
} from "./chunk-7EUAENCI.js";
import {
  useMobile
} from "./chunk-VAAYRRFE.js";
import {
  fireNonCancelableEvent
} from "./chunk-CTALK4OT.js";
import {
  internal_default
} from "./chunk-4FOLHITS.js";
import {
  KeyCode,
  __rest,
  applyDisplayName,
  clsx_m_default,
  findUpUntil,
  getBaseProps,
  isDevelopment,
  useBaseComponent,
  useStableEventHandler,
  useVisualRefresh,
  warnOnce
} from "./chunk-YXZ34YT5.js";
import {
  __toESM,
  require_react
} from "./chunk-C3URVCCN.js";

// node_modules/@cloudscape-design/components/app-layout/index.js
var import_react34 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/defaults.js
var defaultContentTypeState = {
  navigationOpen: true,
  minContentWidth: 280,
  maxContentWidth: void 0
};
var defaults = {
  default: Object.assign({}, defaultContentTypeState),
  dashboard: Object.assign({}, defaultContentTypeState),
  cards: {
    navigationOpen: true,
    minContentWidth: 280,
    maxContentWidth: void 0
  },
  form: {
    navigationOpen: false,
    minContentWidth: 280,
    maxContentWidth: 800
  },
  table: {
    navigationOpen: true,
    minContentWidth: 280,
    maxContentWidth: void 0
  },
  wizard: {
    navigationOpen: false,
    minContentWidth: 280,
    maxContentWidth: 1080
  }
};
function applyDefaults(contentType, stateFromProps, isRefresh) {
  var _a, _b, _c, _d;
  const contentTypeDefaults = isRefresh ? Object.assign(Object.assign({}, defaults[contentType]), { maxContentWidth: void 0 }) : defaults[contentType];
  return {
    maxContentWidth: (_a = stateFromProps.maxContentWidth) !== null && _a !== void 0 ? _a : contentTypeDefaults.maxContentWidth,
    minContentWidth: (_b = stateFromProps.minContentWidth) !== null && _b !== void 0 ? _b : contentTypeDefaults.minContentWidth,
    navigationOpen: (_c = stateFromProps.navigationOpen) !== null && _c !== void 0 ? _c : contentTypeDefaults.navigationOpen,
    toolsOpen: (_d = stateFromProps.toolsOpen) !== null && _d !== void 0 ? _d : contentTypeDefaults.toolsOpen
  };
}

// node_modules/@cloudscape-design/components/app-layout/notifications/index.js
var import_react = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/notifications/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/app-layout/notifications/styles.scoped.css";
var styles_css_default = {
  "notifications": "awsui_notifications_1hmm4_17p9e_9",
  "notifications-sticky": "awsui_notifications-sticky_1hmm4_17p9e_10",
  "no-content-paddings": "awsui_no-content-paddings_1hmm4_17p9e_25"
};

// node_modules/@cloudscape-design/components/app-layout/notifications/index.js
var Notifications = import_react.default.forwardRef((_a, ref) => {
  var _b, _c;
  var { sticky, disableContentPaddings } = _a, props = __rest(_a, ["sticky", "disableContentPaddings"]);
  return sticky ? import_react.default.createElement(
    "div",
    { ref, className: styles_css_default["notifications-sticky"], style: { top: props.topOffset } },
    import_react.default.createElement("div", { role: "region", className: clsx_m_default(props.testUtilsClassName, disableContentPaddings && styles_css_default["no-content-paddings"]), "aria-label": (_b = props.labels) === null || _b === void 0 ? void 0 : _b.notifications }, props.children)
  ) : import_react.default.createElement("div", { role: "region", ref, className: clsx_m_default(props.testUtilsClassName, styles_css_default.notifications, disableContentPaddings && styles_css_default["no-content-paddings"]), "aria-label": (_c = props.labels) === null || _c === void 0 ? void 0 : _c.notifications }, props.children);
});

// node_modules/@cloudscape-design/components/app-layout/mobile-toolbar/index.js
var import_react3 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/toggles/index.js
var import_react2 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/toggles/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/app-layout/toggles/styles.scoped.css";
var styles_css_default2 = {
  "close-button": "awsui_close-button_16w0h_wzsoy_93"
};

// node_modules/@cloudscape-design/components/app-layout/toggles/index.js
var togglesConfig = {
  navigation: {
    TagName: "nav",
    iconName: "menu",
    getLabels: (labels = {}) => ({
      mainLabel: labels.navigation,
      openLabel: labels.navigationToggle,
      closeLabel: labels.navigationClose
    })
  },
  tools: {
    TagName: "aside",
    iconName: "status-info",
    getLabels: (labels = {}) => ({
      mainLabel: labels.tools,
      openLabel: labels.toolsToggle,
      closeLabel: labels.toolsClose
    })
  }
};
var AppLayoutButton = import_react2.default.forwardRef(({ className, ariaLabel, ariaExpanded, iconName, iconSvg, disabled, onClick }, ref) => {
  return import_react2.default.createElement(InternalButton, { ref, className, ariaLabel, variant: "icon", formAction: "none", onClick, iconName, iconSvg, disabled, ariaExpanded: ariaExpanded ? void 0 : false, __nativeAttributes: { "aria-haspopup": ariaExpanded ? void 0 : true } });
});
var CloseButton = import_react2.default.forwardRef(({ className, ariaLabel, onClick }, ref) => {
  return import_react2.default.createElement(
    "span",
    { className: styles_css_default2["close-button"] },
    import_react2.default.createElement(AppLayoutButton, { ref, className, ariaExpanded: true, ariaLabel, iconName: "close", onClick })
  );
});

// node_modules/@cloudscape-design/components/app-layout/mobile-toolbar/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/app-layout/mobile-toolbar/styles.scoped.css";
var styles_css_default3 = {
  "block-body-scroll": "awsui_block-body-scroll_19d8l_1xapg_97",
  "mobile-bar": "awsui_mobile-bar_19d8l_1xapg_101",
  "mobile-bar-breadcrumbs": "awsui_mobile-bar-breadcrumbs_19d8l_1xapg_115",
  "mobile-trigger-with-drawers": "awsui_mobile-trigger-with-drawers_19d8l_1xapg_122",
  "mobile-toggle": "awsui_mobile-toggle_19d8l_1xapg_128",
  "mobile-toggle-with-drawers": "awsui_mobile-toggle-with-drawers_19d8l_1xapg_138"
};

// node_modules/@cloudscape-design/components/app-layout/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/app-layout/styles.scoped.css";
var styles_css_default4 = {
  "resize-active": "awsui_resize-active_lm6vo_1u105_98",
  "resize-side": "awsui_resize-side_lm6vo_1u105_104",
  "resize-bottom": "awsui_resize-bottom_lm6vo_1u105_107",
  "with-motion": "awsui_with-motion_lm6vo_1u105_112",
  "root": "awsui_root_lm6vo_1u105_127",
  "layout-wrapper": "awsui_layout-wrapper_lm6vo_1u105_128",
  "root-no-scroll": "awsui_root-no-scroll_lm6vo_1u105_135",
  "layout": "awsui_layout_lm6vo_1u105_128",
  "layout-no-scroll": "awsui_layout-no-scroll_lm6vo_1u105_146",
  "layout-main": "awsui_layout-main_lm6vo_1u105_150",
  "layout-main-scrollable": "awsui_layout-main-scrollable_lm6vo_1u105_156",
  "unfocusable": "awsui_unfocusable_lm6vo_1u105_161",
  "breadcrumbs-desktop": "awsui_breadcrumbs-desktop_lm6vo_1u105_165",
  "content-header-wrapper": "awsui_content-header-wrapper_lm6vo_1u105_170",
  "content-wrapper": "awsui_content-wrapper_lm6vo_1u105_174",
  "content-overlapped": "awsui_content-overlapped_lm6vo_1u105_178",
  "content-extra-top-padding": "awsui_content-extra-top-padding_lm6vo_1u105_182"
};

// node_modules/@cloudscape-design/components/app-layout/test-classes/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/app-layout/test-classes/styles.scoped.css";
var styles_css_default5 = {
  "root": "awsui_root_1fj9k_1csvr_5",
  "navigation": "awsui_navigation_1fj9k_1csvr_9",
  "navigation-toggle": "awsui_navigation-toggle_1fj9k_1csvr_13",
  "navigation-close": "awsui_navigation-close_1fj9k_1csvr_17",
  "content": "awsui_content_1fj9k_1csvr_21",
  "notifications": "awsui_notifications_1fj9k_1csvr_25",
  "breadcrumbs": "awsui_breadcrumbs_1fj9k_1csvr_29",
  "tools": "awsui_tools_1fj9k_1csvr_33",
  "tools-close": "awsui_tools-close_1fj9k_1csvr_37",
  "tools-toggle": "awsui_tools-toggle_1fj9k_1csvr_41",
  "drawer-closed": "awsui_drawer-closed_1fj9k_1csvr_45",
  "mobile-bar": "awsui_mobile-bar_1fj9k_1csvr_49",
  "disable-body-scroll-root": "awsui_disable-body-scroll-root_1fj9k_1csvr_53",
  "drawers-desktop-triggers-container": "awsui_drawers-desktop-triggers-container_1fj9k_1csvr_57",
  "drawers-mobile-triggers-container": "awsui_drawers-mobile-triggers-container_1fj9k_1csvr_61",
  "drawers-trigger": "awsui_drawers-trigger_1fj9k_1csvr_65",
  "active-drawer": "awsui_active-drawer_1fj9k_1csvr_69",
  "active-drawer-close-button": "awsui_active-drawer-close-button_1fj9k_1csvr_73",
  "drawers-slider": "awsui_drawers-slider_1fj9k_1csvr_77"
};

// node_modules/@cloudscape-design/components/app-layout/mobile-toolbar/index.js
var MobileToggle = import_react3.default.forwardRef(({ className, ariaLabels, type, disabled, onClick }, ref) => {
  const { TagName, iconName, getLabels } = togglesConfig[type];
  const { mainLabel, openLabel } = getLabels(ariaLabels);
  return import_react3.default.createElement(
    TagName,
    { className: clsx_m_default(styles_css_default3["mobile-toggle"]), "aria-hidden": disabled, "aria-label": mainLabel, onClick: (e) => e.target === e.currentTarget && onClick() },
    import_react3.default.createElement(AppLayoutButton, { ref, className, iconName, onClick, ariaLabel: openLabel, disabled, ariaExpanded: disabled })
  );
});
function MobileToolbar({ ariaLabels = {}, toggleRefs, topOffset, navigationHide, toolsHide, anyPanelOpen = false, unfocusable, children, onNavigationOpen, onToolsOpen, drawers, mobileBarRef }) {
  (0, import_react3.useEffect)(() => {
    if (anyPanelOpen) {
      document.body.classList.add(styles_css_default3["block-body-scroll"]);
      return () => {
        document.body.classList.remove(styles_css_default3["block-body-scroll"]);
      };
    } else {
      document.body.classList.remove(styles_css_default3["block-body-scroll"]);
    }
  }, [anyPanelOpen]);
  return import_react3.default.createElement(
    "div",
    { ref: mobileBarRef, className: clsx_m_default(styles_css_default3["mobile-bar"], unfocusable && styles_css_default4.unfocusable), style: { top: topOffset } },
    !navigationHide && import_react3.default.createElement(MobileToggle, { ref: toggleRefs.navigation, type: "navigation", className: styles_css_default5["navigation-toggle"], ariaLabels, disabled: anyPanelOpen, onClick: onNavigationOpen }),
    import_react3.default.createElement("div", { className: styles_css_default3["mobile-bar-breadcrumbs"] }, children && import_react3.default.createElement("div", { className: styles_css_default5.breadcrumbs }, children)),
    !toolsHide && !drawers && import_react3.default.createElement(MobileToggle, { ref: toggleRefs.tools, type: "tools", className: styles_css_default5["tools-toggle"], ariaLabels, disabled: anyPanelOpen, onClick: onToolsOpen }),
    drawers && import_react3.default.createElement("aside", { "aria-label": drawers.ariaLabel, className: clsx_m_default(styles_css_default3["mobile-toggle"], styles_css_default3["mobile-toggle-with-drawers"], styles_css_default5["drawers-mobile-triggers-container"]) }, drawers.items.map((item, index) => {
      var _a;
      return import_react3.default.createElement(AppLayoutButton, { className: clsx_m_default(styles_css_default3["mobile-trigger-with-drawers"], styles_css_default5["drawers-trigger"]), key: `drawer-trigger-${index}`, iconName: item.trigger.iconName, iconSvg: item.trigger.iconSvg, ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton, onClick: () => drawers.onChange({ activeDrawerId: item.id }), ariaExpanded: drawers.activeDrawerId !== void 0 });
    }))
  );
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-focus-control.js
var import_react4 = __toESM(require_react());
function useFocusControl(isOpen, restoreFocus = false) {
  const refs = {
    toggle: (0, import_react4.useRef)(null),
    close: (0, import_react4.useRef)(null)
  };
  const previousFocusedElement = (0, import_react4.useRef)();
  const shouldFocus = (0, import_react4.useRef)(false);
  const doFocus = () => {
    var _a, _b;
    if (!shouldFocus.current) {
      return;
    }
    if (isOpen) {
      previousFocusedElement.current = document.activeElement !== document.body ? document.activeElement : void 0;
      (_a = refs.close.current) === null || _a === void 0 ? void 0 : _a.focus();
    } else {
      if (restoreFocus && previousFocusedElement.current && document.contains(previousFocusedElement.current)) {
        previousFocusedElement.current.focus();
        previousFocusedElement.current = void 0;
      } else {
        (_b = refs.toggle.current) === null || _b === void 0 ? void 0 : _b.focus();
      }
    }
    shouldFocus.current = false;
  };
  (0, import_react4.useEffect)(doFocus, [isOpen]);
  const loseFocus = (0, import_react4.useCallback)(() => {
    previousFocusedElement.current = void 0;
  }, []);
  return {
    refs,
    setFocus: (force) => {
      shouldFocus.current = true;
      if (force && isOpen) {
        doFocus();
      }
    },
    loseFocus
  };
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-window-width.js
var import_react5 = __toESM(require_react());
function useWindowWidth() {
  const [width, setWidth] = (0, import_react5.useState)(() => typeof window !== "undefined" ? window.innerWidth : 0);
  (0, import_react5.useEffect)(() => {
    const handler = () => setWidth(window.innerWidth);
    window.addEventListener("resize", handler);
    return () => window.removeEventListener("resize", handler);
  }, []);
  return width;
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-content-height.js
var import_react7 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/utils/use-observed-element.js
var import_react6 = __toESM(require_react());
function useObservedElement(selector) {
  const getElement = (0, import_react6.useCallback)(() => {
    return document.querySelector(selector);
  }, [selector]);
  const [height, setHeight] = (0, import_react6.useState)(0);
  useResizeObserver(getElement, (entry) => setHeight(entry.borderBoxHeight));
  return height;
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-content-height.js
function useContentHeight(headerSelector, footerSelector, disableBodyScroll) {
  const headerHeight = useObservedElement(headerSelector);
  const footerHeight = useObservedElement(footerSelector);
  const [headerFooterHeight, setHeaderFooterHeight] = (0, import_react7.useState)(0);
  (0, import_react7.useEffect)(() => {
    const id = requestAnimationFrame(() => setHeaderFooterHeight(headerHeight + footerHeight));
    return () => cancelAnimationFrame(id);
  }, [headerHeight, footerHeight]);
  const heightStyleValue = `calc(100vh - ${headerFooterHeight}px)`;
  return {
    headerHeight,
    footerHeight,
    contentHeightStyle: {
      [disableBodyScroll ? "height" : "minHeight"]: heightStyleValue
    }
  };
}

// node_modules/@cloudscape-design/components/internal/context/split-panel-context.js
var import_react8 = __toESM(require_react());
var SplitPanelContext = (0, import_react8.createContext)(null);
var SplitPanelContextProvider = SplitPanelContext.Provider;
function useSplitPanelContext() {
  const ctx = (0, import_react8.useContext)(SplitPanelContext);
  if (!ctx) {
    throw new Error("Split panel can only be used inside app layout");
  }
  return ctx;
}

// node_modules/@cloudscape-design/components/split-panel/utils/size-utils.js
var CONSTRAINED_PAGE_HEIGHT = 400;
var MAIN_PANEL_MIN_HEIGHT = 250;
var CONSTRAINED_MAIN_PANEL_MIN_HEIGHT = 40;
function getSplitPanelDefaultSize(position) {
  if (typeof document === "undefined") {
    return 0;
  }
  return position === "side" ? document.documentElement.clientWidth / 3 : document.documentElement.clientHeight / 2;
}
function getLimitedValue(min, value, max) {
  if (min > max) {
    return min;
  }
  if (value < min) {
    return min;
  }
  if (value > max) {
    return max;
  }
  return value;
}

// node_modules/@cloudscape-design/components/app-layout/content-wrapper/index.js
var import_react9 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/content-wrapper/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/app-layout/content-wrapper/styles.scoped.css";
var styles_css_default6 = {
  "content-wrapper": "awsui_content-wrapper_zycdx_1nd6q_97",
  "content-wrapper-mobile": "awsui_content-wrapper-mobile_zycdx_1nd6q_101",
  "content-type-dashboard": "awsui_content-type-dashboard_zycdx_1nd6q_106"
};

// node_modules/@cloudscape-design/components/app-layout/content-wrapper/index.js
var ContentWrapper = import_react9.default.forwardRef(({ className, contentType, children, toolsPadding, disablePaddings, navigationPadding, isMobile, contentWidthStyles }, ref) => {
  if (disablePaddings) {
    return import_react9.default.createElement("div", { className, ref }, children);
  }
  return import_react9.default.createElement(
    "div",
    { ref, className: clsx_m_default(styles_css_default6["content-wrapper"], !navigationPadding && styles_css_default6["content-wrapper-no-navigation-padding"], !toolsPadding && styles_css_default6["content-wrapper-no-tools-padding"], isMobile && styles_css_default6["content-wrapper-mobile"]) },
    import_react9.default.createElement("div", { style: contentWidthStyles, className: clsx_m_default(className, styles_css_default6[`content-type-${contentType}`]) }, children)
  );
});
var content_wrapper_default = ContentWrapper;

// node_modules/@cloudscape-design/components/app-layout/drawer/index.js
var import_react10 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/drawer/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/app-layout/drawer/styles.scoped.css";
var styles_css_default7 = {
  "toggle": "awsui_toggle_1uo6m_184sl_97",
  "drawer-triggers": "awsui_drawer-triggers_1uo6m_184sl_102",
  "drawer": "awsui_drawer_1uo6m_184sl_102",
  "drawer-mobile": "awsui_drawer-mobile_1uo6m_184sl_112",
  "drawer-closed": "awsui_drawer-closed_1uo6m_184sl_115",
  "drawer-content": "awsui_drawer-content_1uo6m_184sl_123",
  "non-interactive": "awsui_non-interactive_1uo6m_184sl_141",
  "trigger": "awsui_trigger_1uo6m_184sl_149",
  "trigger-drawer": "awsui_trigger-drawer_1uo6m_184sl_160",
  "selected": "awsui_selected_1uo6m_184sl_160"
};

// node_modules/@cloudscape-design/components/app-layout/drawer/index.js
var Drawer = import_react10.default.forwardRef(({ contentClassName, toggleClassName, closeClassName, width, type, toggleRefs, topOffset, bottomOffset, ariaLabels, drawersAriaLabels, children, isOpen, isMobile, onToggle, onClick, onLoseFocus, drawers, resizeHandle }, ref) => {
  const openButtonWrapperRef = (0, import_react10.useRef)(null);
  const { TagName, iconName, getLabels } = togglesConfig[type];
  const { mainLabel, closeLabel, openLabel } = getLabels(ariaLabels);
  const drawerContentWidthOpen = isMobile ? void 0 : width;
  const drawerContentWidth = isOpen ? drawerContentWidthOpen : void 0;
  const getDrawersLabels = (labels = {}) => ({
    drawerMainLabel: labels === null || labels === void 0 ? void 0 : labels.content,
    drawerOpenLabel: labels === null || labels === void 0 ? void 0 : labels.triggerButton,
    drawerCloseLabel: labels === null || labels === void 0 ? void 0 : labels.closeButton
  });
  const { drawerMainLabel, drawerCloseLabel } = getDrawersLabels(drawersAriaLabels);
  const regularOpenButton = import_react10.default.createElement(
    TagName,
    { ref: openButtonWrapperRef, "aria-label": mainLabel, className: styles_css_default7.toggle, "aria-hidden": isOpen },
    import_react10.default.createElement(AppLayoutButton, { ref: toggleRefs.toggle, className: toggleClassName, iconName, ariaLabel: openLabel, onClick: () => onToggle(true), ariaExpanded: false })
  );
  return import_react10.default.createElement(
    "div",
    { ref, className: clsx_m_default(styles_css_default7.drawer, {
      [styles_css_default7["drawer-closed"]]: !isOpen,
      [styles_css_default5["drawer-closed"]]: !isOpen,
      [styles_css_default7["drawer-mobile"]]: isMobile
    }), style: { width: drawerContentWidth }, onBlur: onLoseFocus ? (e) => {
      if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {
        onLoseFocus(e);
      }
    } : void 0, onClick: (event) => {
      var _a;
      if (onClick) {
        onClick(event);
      }
      if (!isOpen) {
        if (openButtonWrapperRef.current === event.target || !((_a = openButtonWrapperRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target))) {
          onToggle(true);
        }
      }
    } },
    import_react10.default.createElement(
      "div",
      { style: { width: drawerContentWidth, top: topOffset, bottom: bottomOffset }, className: clsx_m_default(styles_css_default7["drawer-content"], contentClassName) },
      !isMobile && regularOpenButton,
      resizeHandle,
      import_react10.default.createElement(
        TagName,
        { "aria-label": drawers ? drawerMainLabel : mainLabel, "aria-hidden": !isOpen },
        import_react10.default.createElement(CloseButton, { ref: toggleRefs.close, className: closeClassName, ariaLabel: drawers ? drawerCloseLabel : closeLabel, onClick: () => {
          onToggle(false);
          drawers === null || drawers === void 0 ? void 0 : drawers.onChange({ activeDrawerId: void 0 });
        } }),
        children
      )
    )
  );
});
function DrawerTriggersBar({ isMobile, topOffset, bottomOffset, drawers, contentClassName, toggleClassName }) {
  var _a;
  return import_react10.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default7.drawer, styles_css_default7["drawer-closed"], styles_css_default5["drawer-closed"], {
      [styles_css_default7["drawer-mobile"]]: isMobile
    }) },
    import_react10.default.createElement("div", { style: { top: topOffset, bottom: bottomOffset }, className: clsx_m_default(styles_css_default7["drawer-content"], styles_css_default7["non-interactive"]) }, !isMobile && import_react10.default.createElement("aside", { "aria-label": drawers === null || drawers === void 0 ? void 0 : drawers.ariaLabel, className: clsx_m_default(styles_css_default7["drawer-triggers"], contentClassName) }, (_a = drawers === null || drawers === void 0 ? void 0 : drawers.items) === null || _a === void 0 ? void 0 : _a.map((item, index) => {
      var _a2;
      return import_react10.default.createElement(AppLayoutButton, { className: clsx_m_default(toggleClassName, styles_css_default7.trigger, styles_css_default7["trigger-drawer"], drawers.activeDrawerId === item.id && styles_css_default7.selected), key: `drawer-trigger-${index}`, iconName: item.trigger.iconName, iconSvg: item.trigger.iconSvg, ariaLabel: (_a2 = item.ariaLabels) === null || _a2 === void 0 ? void 0 : _a2.triggerButton, onClick: () => drawers.onChange({ activeDrawerId: item.id !== drawers.activeDrawerId ? item.id : void 0 }), ariaExpanded: drawers.activeDrawerId !== void 0 });
    })))
  );
}

// node_modules/@cloudscape-design/components/app-layout/drawer/resizable-drawer.js
var import_react13 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/utils/use-pointer-events.js
var import_react11 = __toESM(require_react());
var usePointerEvents = ({ position, panelRef, handleRef, setSidePanelWidth, setBottomPanelHeight, hasTransitions = false }) => {
  const onDocumentPointerMove = (0, import_react11.useCallback)((event) => {
    if (!panelRef || !panelRef.current || !handleRef || !handleRef.current) {
      return;
    }
    panelRef.current.classList.remove(styles_css_default4["with-motion"]);
    if (position === "side") {
      const mouseClientX = event.clientX || 0;
      const handleOffset = handleRef.current.getBoundingClientRect().width / 2;
      const width = panelRef.current.getBoundingClientRect().right - mouseClientX + handleOffset;
      setSidePanelWidth(width);
    } else {
      const mouseClientY = event.clientY || 0;
      const handleOffset = handleRef.current.getBoundingClientRect().height / 2;
      const height = panelRef.current.getBoundingClientRect().bottom - mouseClientY + handleOffset;
      setBottomPanelHeight(height);
    }
  }, [position, panelRef, handleRef, setSidePanelWidth, setBottomPanelHeight]);
  const onDocumentPointerUp = (0, import_react11.useCallback)(() => {
    if (!panelRef || !panelRef.current) {
      return;
    }
    if (hasTransitions) {
      panelRef.current.classList.add(styles_css_default4["with-motion"]);
    }
    document.body.classList.remove(styles_css_default4["resize-active"]);
    document.body.classList.remove(styles_css_default4[`resize-${position}`]);
    document.removeEventListener("pointerup", onDocumentPointerUp);
    document.removeEventListener("pointermove", onDocumentPointerMove);
  }, [panelRef, onDocumentPointerMove, position, hasTransitions]);
  const onSliderPointerDown = (0, import_react11.useCallback)(() => {
    document.body.classList.add(styles_css_default4["resize-active"]);
    document.body.classList.add(styles_css_default4[`resize-${position}`]);
    document.addEventListener("pointerup", onDocumentPointerUp);
    document.addEventListener("pointermove", onDocumentPointerMove);
  }, [onDocumentPointerMove, onDocumentPointerUp, position]);
  return onSliderPointerDown;
};

// node_modules/@cloudscape-design/components/app-layout/utils/use-keyboard-events.js
var KEYBOARD_SINGLE_STEP_SIZE = 10;
var KEYBOARD_MULTIPLE_STEPS_SIZE = 60;
var getCurrentSize = (panelRef) => {
  if (!panelRef || !panelRef.current) {
    return {
      panelHeight: 0,
      panelWidth: 0
    };
  }
  return {
    panelHeight: panelRef.current.clientHeight,
    panelWidth: panelRef.current.clientWidth
  };
};
var useKeyboardEvents = ({ position, setSidePanelWidth, setBottomPanelHeight, panelRef }) => {
  return (event) => {
    let setSizeFunction;
    let currentSize;
    let maxSize;
    const { panelHeight, panelWidth } = getCurrentSize(panelRef);
    if (position === "side") {
      setSizeFunction = setSidePanelWidth;
      currentSize = panelWidth;
      maxSize = window.innerWidth;
    } else {
      setSizeFunction = setBottomPanelHeight;
      currentSize = panelHeight;
      maxSize = window.innerHeight;
    }
    const primaryGrowKey = position === "bottom" ? KeyCode.up : KeyCode.left;
    const primaryShrinkKey = position === "bottom" ? KeyCode.down : KeyCode.right;
    const altGrowKey = position === "bottom" ? KeyCode.right : KeyCode.down;
    const altShrinkKey = position === "bottom" ? KeyCode.left : KeyCode.up;
    let isEventHandled = true;
    switch (event.keyCode) {
      case primaryGrowKey:
      case altGrowKey:
        setSizeFunction(currentSize + KEYBOARD_SINGLE_STEP_SIZE);
        break;
      case primaryShrinkKey:
      case altShrinkKey:
        setSizeFunction(currentSize - KEYBOARD_SINGLE_STEP_SIZE);
        break;
      case KeyCode.pageUp:
        setSizeFunction(currentSize + KEYBOARD_MULTIPLE_STEPS_SIZE);
        break;
      case KeyCode.pageDown:
        setSizeFunction(currentSize - KEYBOARD_MULTIPLE_STEPS_SIZE);
        break;
      case KeyCode.home:
        setSizeFunction(maxSize);
        break;
      case KeyCode.end:
        setSizeFunction(0);
        break;
      default:
        isEventHandled = false;
    }
    if (isEventHandled) {
      event.preventDefault();
      event.stopPropagation();
    }
  };
};

// node_modules/@cloudscape-design/components/split-panel/icons/resize-handler.js
var import_react12 = __toESM(require_react());
var ResizeHandler = ({ className }) => import_react12.default.createElement(
  "svg",
  { focusable: false, className, xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 16 16" },
  import_react12.default.createElement("line", { strokeWidth: "2", x1: "2", y1: "5", x2: "14", y2: "5" }),
  import_react12.default.createElement("line", { strokeWidth: "2", x1: "14", y1: "10", x2: "2", y2: "10" })
);
var resize_handler_default = ResizeHandler;

// node_modules/@cloudscape-design/components/split-panel/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/split-panel/styles.scoped.css";
var styles_css_default8 = {
  "drawer": "awsui_drawer_1r9lg_15wn6_189",
  "refresh": "awsui_refresh_1r9lg_15wn6_189",
  "animating": "awsui_animating_1r9lg_15wn6_203",
  "preference-icon--layout-border": "awsui_preference-icon--layout-border_1r9lg_15wn6_226",
  "preference-icon--layout-background": "awsui_preference-icon--layout-background_1r9lg_15wn6_230",
  "preference-icon--layout-header": "awsui_preference-icon--layout-header_1r9lg_15wn6_233",
  "preference-icon--border": "awsui_preference-icon--border_1r9lg_15wn6_236",
  "preference-icon--primary-button": "awsui_preference-icon--primary-button_1r9lg_15wn6_240",
  "preference-icon--secondary": "awsui_preference-icon--secondary_1r9lg_15wn6_243",
  "preference-icon--disabled-element": "awsui_preference-icon--disabled-element_1r9lg_15wn6_246",
  "preference-icon--separator": "awsui_preference-icon--separator_1r9lg_15wn6_249",
  "preference-icon--focus-text": "awsui_preference-icon--focus-text_1r9lg_15wn6_252",
  "preference-icon-refresh--layout-top": "awsui_preference-icon-refresh--layout-top_1r9lg_15wn6_256",
  "preference-icon-refresh--layout-main": "awsui_preference-icon-refresh--layout-main_1r9lg_15wn6_259",
  "preference-icon-refresh--primary": "awsui_preference-icon-refresh--primary_1r9lg_15wn6_262",
  "preference-icon-refresh--disabled": "awsui_preference-icon-refresh--disabled_1r9lg_15wn6_265",
  "preference-icon-refresh--column-header": "awsui_preference-icon-refresh--column-header_1r9lg_15wn6_268",
  "preference-icon-refresh--window": "awsui_preference-icon-refresh--window_1r9lg_15wn6_271",
  "preference-icon-refresh--secondary": "awsui_preference-icon-refresh--secondary_1r9lg_15wn6_275",
  "preference-icon-refresh--default": "awsui_preference-icon-refresh--default_1r9lg_15wn6_278",
  "preference-icon-refresh--separator": "awsui_preference-icon-refresh--separator_1r9lg_15wn6_281",
  "preference-icon-refresh--input-default": "awsui_preference-icon-refresh--input-default_1r9lg_15wn6_284",
  "preference-icon-refresh--heading": "awsui_preference-icon-refresh--heading_1r9lg_15wn6_287",
  "root": "awsui_root_1r9lg_15wn6_291",
  "preferences-button": "awsui_preferences-button_1r9lg_15wn6_304",
  "close-button": "awsui_close-button_1r9lg_15wn6_308",
  "drawer-closed": "awsui_drawer-closed_1r9lg_15wn6_319",
  "drawer-content-side": "awsui_drawer-content-side_1r9lg_15wn6_324",
  "drawer-content-bottom": "awsui_drawer-content-bottom_1r9lg_15wn6_344",
  "position-bottom": "awsui_position-bottom_1r9lg_15wn6_353",
  "position-side": "awsui_position-side_1r9lg_15wn6_380",
  "slider": "awsui_slider_1r9lg_15wn6_386",
  "slider-side": "awsui_slider-side_1r9lg_15wn6_415",
  "slider-wrapper-bottom": "awsui_slider-wrapper-bottom_1r9lg_15wn6_420",
  "slider-wrapper-side": "awsui_slider-wrapper-side_1r9lg_15wn6_431",
  "open-button": "awsui_open-button_1r9lg_15wn6_442",
  "open-button-side": "awsui_open-button-side_1r9lg_15wn6_446",
  "slider-icon": "awsui_slider-icon_1r9lg_15wn6_453",
  "slider-icon-bottom": "awsui_slider-icon-bottom_1r9lg_15wn6_459",
  "slider-icon-side": "awsui_slider-icon-side_1r9lg_15wn6_462",
  "pane-header-wrapper-bottom": "awsui_pane-header-wrapper-bottom_1r9lg_15wn6_466",
  "drawer-mobile": "awsui_drawer-mobile_1r9lg_15wn6_476",
  "drawer-disable-content-paddings": "awsui_drawer-disable-content-paddings_1r9lg_15wn6_479",
  "content-bottom": "awsui_content-bottom_1r9lg_15wn6_487",
  "pane-bottom-center-align": "awsui_pane-bottom-center-align_1r9lg_15wn6_500",
  "pane-bottom-content-nav-padding": "awsui_pane-bottom-content-nav-padding_1r9lg_15wn6_505",
  "pane-bottom-content-tools-padding": "awsui_pane-bottom-content-tools-padding_1r9lg_15wn6_509",
  "content-bottom-max-width": "awsui_content-bottom-max-width_1r9lg_15wn6_513",
  "content-side": "awsui_content-side_1r9lg_15wn6_518",
  "pane-header-wrapper-side": "awsui_pane-header-wrapper-side_1r9lg_15wn6_529",
  "pane-content-wrapper-side": "awsui_pane-content-wrapper-side_1r9lg_15wn6_532",
  "header": "awsui_header_1r9lg_15wn6_537",
  "header-text": "awsui_header-text_1r9lg_15wn6_546",
  "header-divider": "awsui_header-divider_1r9lg_15wn6_556",
  "header-actions": "awsui_header-actions_1r9lg_15wn6_562",
  "divider": "awsui_divider_1r9lg_15wn6_570"
};

// node_modules/@cloudscape-design/components/app-layout/drawer/resizable-drawer.js
var ResizableDrawer = (_a) => {
  var _b;
  var { onResize, size, getMaxWidth, refs, activeDrawer } = _a, props = __rest(_a, ["onResize", "size", "getMaxWidth", "refs", "activeDrawer"]);
  const { isOpen, children, isMobile } = props;
  const MIN_WIDTH = (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.defaultSize) && activeDrawer.defaultSize < 280 ? activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.defaultSize : 280;
  const [relativeSize, setRelativeSize] = (0, import_react13.useState)(0);
  (0, import_react13.useEffect)(() => {
    const handle = requestAnimationFrame(() => {
      const maxSize = getMaxWidth();
      setRelativeSize(size / maxSize * 100);
    });
    return () => cancelAnimationFrame(handle);
  }, [size, getMaxWidth]);
  const setSidePanelWidth = (width) => {
    const maxWidth = getMaxWidth();
    const size2 = getLimitedValue(MIN_WIDTH, width, maxWidth);
    const id = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id;
    if (isOpen && id && maxWidth >= MIN_WIDTH) {
      onResize({ size: size2, id });
    }
  };
  const position = "side";
  const setBottomPanelHeight = () => {
  };
  const drawerRefObject = (0, import_react13.useRef)(null);
  const sizeControlProps = {
    position,
    panelRef: drawerRefObject,
    handleRef: refs.slider,
    setSidePanelWidth,
    setBottomPanelHeight
  };
  const onSliderPointerDown = usePointerEvents(sizeControlProps);
  const onKeyDown = useKeyboardEvents(sizeControlProps);
  const resizeHandle = import_react13.default.createElement(
    "div",
    { ref: refs.slider, role: "slider", tabIndex: 0, "aria-label": (_b = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _b === void 0 ? void 0 : _b.resizeHandle, "aria-valuemax": 100, "aria-valuemin": 0, "aria-valuenow": relativeSize, className: clsx_m_default(styles_css_default8.slider, styles_css_default8[`slider-side`], styles_css_default5["drawers-slider"]), onKeyDown, onPointerDown: onSliderPointerDown },
    import_react13.default.createElement(resize_handler_default, { className: clsx_m_default(styles_css_default8["slider-icon"], styles_css_default8[`slider-icon-side`]) })
  );
  return import_react13.default.createElement(Drawer, Object.assign({}, props, { ref: drawerRefObject, resizeHandle: !isMobile && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.resizable) && import_react13.default.createElement("div", { className: styles_css_default8["slider-wrapper-side"] }, resizeHandle) }), children);
};

// node_modules/@cloudscape-design/components/app-layout/split-panel-drawer/index.js
var import_react14 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/split-panel-drawer/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/app-layout/split-panel-drawer/styles.scoped.css";
var styles_css_default9 = {
  "drawer-displayed": "awsui_drawer-displayed_glvdu_475ep_97",
  "drawer-content": "awsui_drawer-content_glvdu_475ep_101"
};

// node_modules/@cloudscape-design/components/app-layout/split-panel-drawer/index.js
function SideSplitPanelDrawer({ topOffset, bottomOffset, width, displayed, children }) {
  return import_react14.default.createElement(
    "div",
    { className: clsx_m_default(displayed && styles_css_default9["drawer-displayed"]), style: { width }, "data-testid": "side-split-panel-drawer" },
    import_react14.default.createElement("div", { className: styles_css_default9["drawer-content"], style: { width, top: topOffset, bottom: bottomOffset } }, children)
  );
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-content-width.js
var import_react15 = __toESM(require_react());
function useAppLayoutOffsets(element) {
  const [offsets, setOffsets] = (0, import_react15.useState)({ left: 0, right: 0 });
  const updatePosition = (0, import_react15.useCallback)(() => {
    if (!element) {
      return;
    }
    const { left, right } = element.getBoundingClientRect();
    const bodyWidth = document.body.clientWidth;
    setOffsets({ left, right: bodyWidth - right });
  }, [element]);
  (0, import_react15.useEffect)(() => {
    window.addEventListener("resize", updatePosition);
    return () => window.removeEventListener("resize", updatePosition);
  }, [updatePosition]);
  const getElement = (0, import_react15.useCallback)(() => element, [element]);
  useResizeObserver(getElement, updatePosition);
  return offsets;
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/index.js
var import_react32 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/context.js
var import_react20 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/utils/use-drawer-focus-control.js
var import_react16 = __toESM(require_react());
function useDrawerFocusControl(dependencies, isOpen, restoreFocus = false) {
  const refs = {
    toggle: (0, import_react16.useRef)(null),
    close: (0, import_react16.useRef)(null),
    slider: (0, import_react16.useRef)(null)
  };
  const previousFocusedElement = (0, import_react16.useRef)();
  const shouldFocus = (0, import_react16.useRef)(false);
  const lastInteraction = (0, import_react16.useRef)(null);
  (0, import_react16.useEffect)(() => {
    var _a, _b, _c, _d;
    switch ((_a = lastInteraction.current) === null || _a === void 0 ? void 0 : _a.type) {
      case "open":
        if (refs.slider.current) {
          (_b = refs.slider.current) === null || _b === void 0 ? void 0 : _b.focus();
        } else {
          (_c = refs.close.current) === null || _c === void 0 ? void 0 : _c.focus();
        }
        break;
      case "close":
        (_d = refs.toggle.current) === null || _d === void 0 ? void 0 : _d.focus();
        break;
    }
    lastInteraction.current = null;
  }, dependencies);
  const doFocus = () => {
    var _a, _b;
    if (!shouldFocus.current) {
      return;
    }
    if (isOpen) {
      previousFocusedElement.current = document.activeElement !== document.body ? document.activeElement : void 0;
      (_a = refs.close.current) === null || _a === void 0 ? void 0 : _a.focus();
    } else {
      if (restoreFocus && previousFocusedElement.current && document.contains(previousFocusedElement.current)) {
        previousFocusedElement.current.focus();
        previousFocusedElement.current = void 0;
      } else {
        (_b = refs.toggle.current) === null || _b === void 0 ? void 0 : _b.focus();
      }
    }
    shouldFocus.current = false;
  };
  (0, import_react16.useEffect)(doFocus, [isOpen]);
  const loseFocus = (0, import_react16.useCallback)(() => {
    previousFocusedElement.current = void 0;
  }, []);
  return {
    refs,
    setFocus: (force) => {
      shouldFocus.current = true;
      if (force && isOpen) {
        doFocus();
      }
    },
    loseFocus,
    setLastInteraction: (interaction) => lastInteraction.current = interaction
  };
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/split-panel.js
var import_react17 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/styles.css.js
import "/local/home/samilafo/final_epa_project/QwizGuruPlatform/cloudscape/node_modules/@cloudscape-design/components/app-layout/visual-refresh/styles.scoped.css";
var styles_css_default10 = {
  "background": "awsui_background_hyvsj_42qar_93",
  "scrolling-background": "awsui_scrolling-background_hyvsj_42qar_96",
  "sticky-background": "awsui_sticky-background_hyvsj_42qar_102",
  "has-sticky-notifications": "awsui_has-sticky-notifications_hyvsj_42qar_110",
  "breadcrumbs": "awsui_breadcrumbs_hyvsj_42qar_123",
  "has-sticky-background": "awsui_has-sticky-background_hyvsj_42qar_133",
  "drawers-container": "awsui_drawers-container_hyvsj_42qar_145",
  "has-open-drawer": "awsui_has-open-drawer_hyvsj_42qar_157",
  "disable-body-scroll": "awsui_disable-body-scroll_hyvsj_42qar_191",
  "drawers-desktop-triggers-container": "awsui_drawers-desktop-triggers-container_hyvsj_42qar_196",
  "has-multiple-triggers": "awsui_has-multiple-triggers_hyvsj_42qar_214",
  "drawers-trigger-content": "awsui_drawers-trigger-content_hyvsj_42qar_246",
  "drawers-trigger": "awsui_drawers-trigger_hyvsj_42qar_246",
  "drawer": "awsui_drawer_hyvsj_42qar_145",
  "drawer-close-button": "awsui_drawer-close-button_hyvsj_42qar_295",
  "drawer-content": "awsui_drawer-content_hyvsj_42qar_300",
  "drawer-slider": "awsui_drawer-slider_hyvsj_42qar_305",
  "is-drawer-open": "awsui_is-drawer-open_hyvsj_42qar_312",
  "content": "awsui_content_hyvsj_42qar_337",
  "layout": "awsui_layout_hyvsj_42qar_358",
  "has-max-content-width": "awsui_has-max-content-width_hyvsj_42qar_441",
  "content-type-dashboard": "awsui_content-type-dashboard_hyvsj_42qar_456",
  "is-overlap-disabled": "awsui_is-overlap-disabled_hyvsj_42qar_473",
  "has-content-gap-left": "awsui_has-content-gap-left_hyvsj_42qar_505",
  "has-content-gap-right": "awsui_has-content-gap-right_hyvsj_42qar_508",
  "content-first-child-notifications": "awsui_content-first-child-notifications_hyvsj_42qar_518",
  "has-breadcrumbs": "awsui_has-breadcrumbs_hyvsj_42qar_521",
  "content-first-child-header": "awsui_content-first-child-header_hyvsj_42qar_524",
  "has-header": "awsui_has-header_hyvsj_42qar_524",
  "content-first-child-main": "awsui_content-first-child-main_hyvsj_42qar_545",
  "disable-content-paddings": "awsui_disable-content-paddings_hyvsj_42qar_545",
  "has-split-panel": "awsui_has-split-panel_hyvsj_42qar_588",
  "split-panel-position-bottom": "awsui_split-panel-position-bottom_hyvsj_42qar_588",
  "block-body-scroll": "awsui_block-body-scroll_hyvsj_42qar_604",
  "unfocusable": "awsui_unfocusable_hyvsj_42qar_609",
  "container": "awsui_container_hyvsj_42qar_619",
  "is-navigation-open": "awsui_is-navigation-open_hyvsj_42qar_644",
  "is-tools-open": "awsui_is-tools-open_hyvsj_42qar_647",
  "is-split-panel-open": "awsui_is-split-panel-open_hyvsj_42qar_647",
  "split-panel-position-side": "awsui_split-panel-position-side_hyvsj_42qar_647",
  "mobile-toolbar": "awsui_mobile-toolbar_hyvsj_42qar_656",
  "mobile-toolbar-nav": "awsui_mobile-toolbar-nav_hyvsj_42qar_672",
  "mobile-toolbar-breadcrumbs": "awsui_mobile-toolbar-breadcrumbs_hyvsj_42qar_676",
  "mobile-toolbar-tools": "awsui_mobile-toolbar-tools_hyvsj_42qar_680",
  "navigation-container": "awsui_navigation-container_hyvsj_42qar_689",
  "show-navigation": "awsui_show-navigation_hyvsj_42qar_733",
  "animating": "awsui_animating_hyvsj_42qar_755",
  "showButtons": "awsui_showButtons_hyvsj_42qar_1",
  "navigation": "awsui_navigation_hyvsj_42qar_689",
  "openNavigation": "awsui_openNavigation_hyvsj_42qar_1",
  "animated-content": "awsui_animated-content_hyvsj_42qar_816",
  "hide-navigation": "awsui_hide-navigation_hyvsj_42qar_825",
  "notifications": "awsui_notifications_hyvsj_42qar_835",
  "sticky-notifications": "awsui_sticky-notifications_hyvsj_42qar_841",
  "split-panel-bottom": "awsui_split-panel-bottom_hyvsj_42qar_858",
  "position-bottom": "awsui_position-bottom_hyvsj_42qar_904",
  "openSplitPanelBottom": "awsui_openSplitPanelBottom_hyvsj_42qar_1",
  "split-panel-side": "awsui_split-panel-side_hyvsj_42qar_933",
  "position-side": "awsui_position-side_hyvsj_42qar_961",
  "openSplitPanelSide": "awsui_openSplitPanelSide_hyvsj_42qar_1",
  "tools-container": "awsui_tools-container_hyvsj_42qar_998",
  "tools": "awsui_tools_hyvsj_42qar_998",
  "openTools": "awsui_openTools_hyvsj_42qar_1",
  "has-tools-form-persistence": "awsui_has-tools-form-persistence_hyvsj_42qar_1092",
  "hide-tools": "awsui_hide-tools_hyvsj_42qar_1102",
  "show-tools": "awsui_show-tools_hyvsj_42qar_1114",
  "has-tools-form": "awsui_has-tools-form_hyvsj_42qar_1092",
  "trigger": "awsui_trigger_hyvsj_42qar_1181",
  "selected": "awsui_selected_hyvsj_42qar_1220"
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/split-panel.js
function SplitPanel({ children }) {
  const { footerHeight, handleSplitPanelClick, handleSplitPanelPreferencesChange, handleSplitPanelResize, headerHeight, isMobile, isSplitPanelForcedPosition, isSplitPanelOpen, setSplitPanelReportedSize, setSplitPanelReportedHeaderHeight, setSplitPanelToggle, splitPanelPosition, splitPanelRefs, splitPanelSize } = useAppLayoutInternals();
  const context = {
    bottomOffset: 0,
    getMaxHeight: () => {
      const availableHeight = document.documentElement.clientHeight - headerHeight - footerHeight;
      return availableHeight < 400 ? availableHeight - 40 : availableHeight - 250;
    },
    getMaxWidth: () => document.documentElement.clientWidth,
    isForcedPosition: isSplitPanelForcedPosition,
    isMobile,
    isOpen: isSplitPanelOpen,
    leftOffset: 0,
    onPreferencesChange: handleSplitPanelPreferencesChange,
    onResize: handleSplitPanelResize,
    onToggle: handleSplitPanelClick,
    position: splitPanelPosition,
    reportSize: setSplitPanelReportedSize,
    reportHeaderHeight: setSplitPanelReportedHeaderHeight,
    rightOffset: 0,
    size: splitPanelSize || 0,
    topOffset: 0,
    setSplitPanelToggle,
    refs: splitPanelRefs
  };
  return import_react17.default.createElement(SplitPanelContextProvider, { value: context }, children);
}
function SplitPanelBottom() {
  const { disableBodyScroll, hasOpenDrawer, isNavigationOpen, isSplitPanelOpen, splitPanel, splitPanelPosition, splitPanelReportedSize, splitPanelReportedHeaderHeight } = useAppLayoutInternals();
  if (!splitPanel) {
    return null;
  }
  return import_react17.default.createElement(Transition, { in: isSplitPanelOpen !== null && isSplitPanelOpen !== void 0 ? isSplitPanelOpen : false, exit: false }, (state, transitionEventsRef) => import_react17.default.createElement(
    "section",
    { className: clsx_m_default(styles_css_default10["split-panel-bottom"], styles_css_default10[`position-${splitPanelPosition}`], {
      [styles_css_default10.animating]: state === "entering",
      [styles_css_default10["disable-body-scroll"]]: disableBodyScroll,
      [styles_css_default10["has-open-drawer"]]: hasOpenDrawer,
      [styles_css_default10["is-navigation-open"]]: isNavigationOpen,
      [styles_css_default10["is-split-panel-open"]]: isSplitPanelOpen
    }), ref: transitionEventsRef, style: {
      [custom_css_properties_default.splitPanelReportedSize]: `${splitPanelReportedSize}px`,
      [custom_css_properties_default.splitPanelReportedHeaderSize]: `${splitPanelReportedHeaderHeight}px`
    } },
    import_react17.default.createElement(SplitPanel, null),
    splitPanelPosition === "bottom" && splitPanel
  ));
}
function SplitPanelSide() {
  const { isSplitPanelOpen, splitPanel, splitPanelPosition, splitPanelMaxWidth, splitPanelMinWidth, splitPanelReportedSize } = useAppLayoutInternals();
  if (!splitPanel) {
    return null;
  }
  return import_react17.default.createElement(Transition, { in: isSplitPanelOpen !== null && isSplitPanelOpen !== void 0 ? isSplitPanelOpen : false, exit: false }, (state, transitionEventsRef) => import_react17.default.createElement(
    "section",
    { "aria-hidden": !isSplitPanelOpen || splitPanelPosition === "bottom" ? true : false, className: clsx_m_default(styles_css_default10["split-panel-side"], styles_css_default10[`position-${splitPanelPosition}`], {
      [styles_css_default10.animating]: state === "entering",
      [styles_css_default10["is-split-panel-open"]]: isSplitPanelOpen
    }), ref: transitionEventsRef, style: {
      [custom_css_properties_default.splitPanelMaxWidth]: `${splitPanelMaxWidth}px`,
      [custom_css_properties_default.splitPanelMinWidth]: `${splitPanelMinWidth}px`,
      [custom_css_properties_default.splitPanelReportedHeaderSize]: `${splitPanelReportedSize}px`
    } },
    import_react17.default.createElement("div", { className: clsx_m_default(styles_css_default10["animated-content"]) }, splitPanelPosition === "side" && splitPanel)
  ));
}
function getSplitPanelPosition(isSplitPanelForcedPosition, splitPanelPreferences) {
  let splitPanelPosition = "bottom";
  if (!isSplitPanelForcedPosition && (splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) === "side") {
    splitPanelPosition = "side";
  }
  return splitPanelPosition;
}
SplitPanel.Bottom = SplitPanelBottom;
SplitPanel.Side = SplitPanelSide;
var split_panel_default = SplitPanel;

// node_modules/@cloudscape-design/components/app-layout/utils/use-split-panel-focus-control.js
var import_react18 = __toESM(require_react());
function useSplitPanelFocusControl(dependencies) {
  const refs = {
    toggle: (0, import_react18.useRef)(null),
    slider: (0, import_react18.useRef)(null),
    preferences: (0, import_react18.useRef)(null)
  };
  const lastInteraction = (0, import_react18.useRef)(null);
  (0, import_react18.useEffect)(() => {
    var _a, _b, _c, _d;
    switch ((_a = lastInteraction.current) === null || _a === void 0 ? void 0 : _a.type) {
      case "open":
        (_b = refs.slider.current) === null || _b === void 0 ? void 0 : _b.focus();
        break;
      case "close":
        (_c = refs.toggle.current) === null || _c === void 0 ? void 0 : _c.focus();
        break;
      case "position":
        (_d = refs.preferences.current) === null || _d === void 0 ? void 0 : _d.focus();
        break;
    }
    lastInteraction.current = null;
  }, dependencies);
  return {
    refs,
    setLastInteraction: (interaction) => lastInteraction.current = interaction
  };
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-resize.js
var import_react19 = __toESM(require_react());
function useResize(drawerRefObject, drawerResizeProps) {
  var _a, _b;
  const { activeDrawerId, drawers, drawersRefs, isToolsOpen, drawersMaxWidth } = drawerResizeProps;
  const activeDrawer = (_a = drawers === null || drawers === void 0 ? void 0 : drawers.items.find((item) => item.id === activeDrawerId)) !== null && _a !== void 0 ? _a : null;
  const drawerItems = (0, import_react19.useMemo)(() => (drawers === null || drawers === void 0 ? void 0 : drawers.items) || [], [drawers === null || drawers === void 0 ? void 0 : drawers.items]);
  const toolsWidth = 290;
  const MIN_WIDTH = (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.defaultSize) && activeDrawer.defaultSize < 290 ? activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.defaultSize : 290;
  const [relativeSize, setRelativeSize] = (0, import_react19.useState)(0);
  const getDrawerItemSizes = (0, import_react19.useCallback)(() => {
    const sizes = {};
    if (!drawerItems) {
      return {};
    }
    for (const item of drawerItems) {
      if (item.defaultSize) {
        sizes[item.id] = item.defaultSize;
      }
    }
    return sizes;
  }, [drawerItems]);
  const [drawerItemSizes, setDrawerItemSizes] = (0, import_react19.useState)(() => getDrawerItemSizes());
  const drawerSize = !activeDrawerId && !isToolsOpen ? 0 : activeDrawerId && drawerItemSizes[activeDrawerId] ? drawerItemSizes[activeDrawerId] : toolsWidth;
  (0, import_react19.useEffect)(() => {
    setDrawerItemSizes((prev) => Object.assign(Object.assign({}, getDrawerItemSizes()), prev));
  }, [getDrawerItemSizes]);
  (0, import_react19.useEffect)(() => {
    const handle = requestAnimationFrame(() => {
      const maxSize = drawersMaxWidth;
      setRelativeSize((drawerSize - MIN_WIDTH) / (maxSize - MIN_WIDTH) * 100);
    });
    return () => cancelAnimationFrame(handle);
  }, [drawerSize, drawersMaxWidth, MIN_WIDTH]);
  const drawerResize = (resizeDetail) => {
    const drawerItem = drawers === null || drawers === void 0 ? void 0 : drawers.items.find((item) => item.id === resizeDetail.id);
    fireNonCancelableEvent(drawerItem === null || drawerItem === void 0 ? void 0 : drawerItem.onResize, resizeDetail);
    fireNonCancelableEvent(drawers === null || drawers === void 0 ? void 0 : drawers.onResize, resizeDetail);
    setDrawerItemSizes(Object.assign(Object.assign({}, drawerItemSizes), { [resizeDetail.id]: resizeDetail.size }));
  };
  const setSidePanelWidth = (width) => {
    const maxWidth = drawersMaxWidth;
    const size = getLimitedValue(MIN_WIDTH, width, maxWidth);
    const id = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id;
    if (id && maxWidth >= MIN_WIDTH) {
      drawerResize({ size, id });
    }
  };
  const position = "side";
  const setBottomPanelHeight = () => {
  };
  const sizeControlProps = {
    position,
    panelRef: drawerRefObject,
    handleRef: drawersRefs.slider,
    setSidePanelWidth,
    setBottomPanelHeight,
    hasTransitions: true
  };
  const onSliderPointerDown = usePointerEvents(sizeControlProps);
  const onKeyDown = useKeyboardEvents(sizeControlProps);
  const resizeHandle = import_react19.default.createElement(
    "div",
    { ref: drawersRefs.slider, role: "slider", tabIndex: 0, "aria-label": (_b = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _b === void 0 ? void 0 : _b.resizeHandle, "aria-valuemax": 100, "aria-valuemin": 0, "aria-valuenow": relativeSize, className: clsx_m_default(styles_css_default8.slider, styles_css_default8[`slider-side`], styles_css_default5["drawers-slider"]), onKeyDown, onPointerDown: onSliderPointerDown },
    import_react19.default.createElement(resize_handler_default, { className: clsx_m_default(styles_css_default8["slider-icon"], styles_css_default8[`slider-icon-side`]) })
  );
  return { resizeHandle: import_react19.default.createElement("div", { className: styles_css_default10["drawer-slider"] }, resizeHandle), drawerSize };
}
var use_resize_default = useResize;

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/context.js
var AppLayoutInternalsContext = (0, import_react20.createContext)(null);
function useAppLayoutInternals() {
  const ctx = (0, import_react20.useContext)(AppLayoutInternalsContext);
  if (!ctx) {
    throw new Error("Invariant violation: this context is only available inside app layout");
  }
  return ctx;
}
var AppLayoutInternalsProvider = import_react20.default.forwardRef((_a, forwardRef) => {
  var _b, _c, _d, _e;
  var { toolsHide, toolsOpen: controlledToolsOpen, navigationHide, navigationOpen: controlledNavigationOpen, contentType = "default", headerSelector = "#b #h", footerSelector = "#b #h", children, splitPanel } = _a, props = __rest(_a, ["toolsHide", "toolsOpen", "navigationHide", "navigationOpen", "contentType", "headerSelector", "footerSelector", "children", "splitPanel"]);
  const isMobile = useMobile();
  if (isDevelopment) {
    if (controlledToolsOpen && toolsHide) {
      warnOnce("AppLayout", `You have enabled both the \`toolsOpen\` prop and the \`toolsHide\` prop. This is not supported. Set \`toolsOpen\` to \`false\` when you set \`toolsHide\` to \`true\`.`);
    }
  }
  const [dynamicOverlapHeight, setDynamicOverlapHeight] = (0, import_react20.useState)(0);
  const [hasStickyBackground, setHasStickyBackground] = (0, import_react20.useState)(false);
  const geckoMaxCssLength = ((1 << 30) - 1) / 60;
  const halfGeckoMaxCssLength = geckoMaxCssLength / 2;
  const maxContentWidth = props.maxContentWidth && props.maxContentWidth > halfGeckoMaxCssLength ? halfGeckoMaxCssLength : (_b = props.maxContentWidth) !== null && _b !== void 0 ? _b : 0;
  const minContentWidth = (_c = props.minContentWidth) !== null && _c !== void 0 ? _c : 280;
  const contentTypeDefaults = applyDefaults(contentType, { maxContentWidth, minContentWidth }, true);
  const [isNavigationOpen = false, setIsNavigationOpen] = useControllable(controlledNavigationOpen, props.onNavigationChange, isMobile ? false : contentTypeDefaults.navigationOpen, { componentName: "AppLayout", controlledProp: "navigationOpen", changeHandler: "onNavigationChange" });
  const { refs: navigationRefs, setFocus: focusNavButtons } = useFocusControl(isNavigationOpen);
  const handleNavigationClick = (0, import_react20.useCallback)(function handleNavigationChange(isOpen) {
    setIsNavigationOpen(isOpen);
    focusNavButtons();
    fireNonCancelableEvent(props.onNavigationChange, { open: isOpen });
  }, [props.onNavigationChange, setIsNavigationOpen, focusNavButtons]);
  const toolsWidth = (_d = props.toolsWidth) !== null && _d !== void 0 ? _d : 290;
  const hasDefaultToolsWidth = props.toolsWidth === void 0;
  const [isToolsOpen = false, setIsToolsOpen] = useControllable(controlledToolsOpen, props.onToolsChange, isMobile ? false : contentTypeDefaults.toolsOpen, { componentName: "AppLayout", controlledProp: "toolsOpen", changeHandler: "onToolsChange" });
  const { refs: toolsRefs, setFocus: focusToolsButtons, loseFocus: loseToolsFocus } = useFocusControl(isToolsOpen, true);
  const handleToolsClick = (0, import_react20.useCallback)(function handleToolsChange(isOpen, skipFocusControl) {
    setIsToolsOpen(isOpen);
    !skipFocusControl && focusToolsButtons();
    fireNonCancelableEvent(props.onToolsChange, { open: isOpen });
  }, [props.onToolsChange, setIsToolsOpen, focusToolsButtons]);
  (0, import_react20.useEffect)(function handleBodyScroll() {
    if (isMobile && (isNavigationOpen || isToolsOpen)) {
      document.body.classList.add(styles_css_default10["block-body-scroll"]);
    } else {
      document.body.classList.remove(styles_css_default10["block-body-scroll"]);
    }
    return function cleanup() {
      document.body.classList.remove(styles_css_default10["block-body-scroll"]);
    };
  }, [isMobile, isNavigationOpen, isToolsOpen]);
  (0, import_react20.useImperativeHandle)(forwardRef, function createImperativeHandle() {
    return {
      closeNavigationIfNecessary: function() {
        isMobile && handleNavigationClick(false);
      },
      openTools: function() {
        handleToolsClick(true);
      },
      focusToolsClose: () => focusToolsButtons(true)
    };
  }, [isMobile, handleNavigationClick, handleToolsClick, focusToolsButtons]);
  const headerHeight = useObservedElement(headerSelector);
  const footerHeight = useObservedElement(footerSelector);
  const splitPanelMinWidth = 280;
  const [splitPanelMaxWidth, setSplitPanelMaxWidth] = (0, import_react20.useState)(splitPanelMinWidth);
  const [isSplitPanelOpen, setIsSplitPanelOpen] = useControllable(props.splitPanelOpen, props.onSplitPanelToggle, false, { componentName: "AppLayout", controlledProp: "splitPanelOpen", changeHandler: "onSplitPanelToggle" });
  const [splitPanelPreferences, setSplitPanelPreferences] = useControllable(props.splitPanelPreferences, props.onSplitPanelPreferencesChange, void 0, {
    componentName: "AppLayout",
    controlledProp: "splitPanelPreferences",
    changeHandler: "onSplitPanelPreferencesChange"
  });
  const { refs: splitPanelRefs, setLastInteraction: setSplitPanelLastInteraction } = useSplitPanelFocusControl([
    splitPanelPreferences,
    isSplitPanelOpen
  ]);
  const handleSplitPanelClick = (0, import_react20.useCallback)(function handleSplitPanelChange() {
    setIsSplitPanelOpen(!isSplitPanelOpen);
    setSplitPanelLastInteraction({ type: isSplitPanelOpen ? "close" : "open" });
    fireNonCancelableEvent(props.onSplitPanelToggle, { open: !isSplitPanelOpen });
  }, [props.onSplitPanelToggle, isSplitPanelOpen, setIsSplitPanelOpen, setSplitPanelLastInteraction]);
  const [isSplitPanelForcedPosition, setSplitPanelForcedPosition] = (0, import_react20.useState)(false);
  const splitPanelPosition = getSplitPanelPosition(isSplitPanelForcedPosition, splitPanelPreferences);
  (0, import_react20.useLayoutEffect)(function handleSplitPanelForcePosition() {
    setSplitPanelForcedPosition(splitPanelMinWidth > splitPanelMaxWidth);
  }, [splitPanelMaxWidth, splitPanelMinWidth]);
  const [splitPanelReportedSize, setSplitPanelReportedSize] = (0, import_react20.useState)(0);
  const [splitPanelReportedHeaderHeight, setSplitPanelReportedHeaderHeight] = (0, import_react20.useState)(0);
  const [splitPanelToggle, setSplitPanelToggle] = (0, import_react20.useState)({
    displayed: false,
    ariaLabel: void 0
  });
  const splitPanelDisplayed = !!(splitPanelToggle.displayed || isSplitPanelOpen);
  const [splitPanelSize, setSplitPanelSize] = useControllable(props.splitPanelSize, props.onSplitPanelResize, getSplitPanelDefaultSize(splitPanelPosition), { componentName: "AppLayout", controlledProp: "splitPanelSize", changeHandler: "onSplitPanelResize" });
  const handleSplitPanelResize = (0, import_react20.useCallback)(function handleSplitPanelChange(detail) {
    setSplitPanelSize(detail.size);
    fireNonCancelableEvent(props.onSplitPanelResize, detail);
  }, [props.onSplitPanelResize, setSplitPanelSize]);
  const handleSplitPanelPreferencesChange = (0, import_react20.useCallback)(function handleSplitPanelChange(detail) {
    setSplitPanelPreferences(detail);
    setSplitPanelLastInteraction({ type: "position" });
    fireNonCancelableEvent(props.onSplitPanelPreferencesChange, detail);
  }, [props.onSplitPanelPreferencesChange, setSplitPanelPreferences, setSplitPanelLastInteraction]);
  const drawers = props.drawers;
  const [activeDrawerId, setActiveDrawerId] = useControllable(drawers === null || drawers === void 0 ? void 0 : drawers.activeDrawerId, drawers === null || drawers === void 0 ? void 0 : drawers.onChange, null, {
    componentName: "AppLayout",
    controlledProp: "drawers.activeDrawerId",
    changeHandler: "onChange"
  });
  const [drawersMaxWidth, setDrawersMaxWidth] = (0, import_react20.useState)(toolsWidth);
  const activeDrawer = drawers === null || drawers === void 0 ? void 0 : drawers.items.find((drawer) => drawer.id === activeDrawerId);
  const { refs: drawersRefs, setFocus: focusDrawersButtons, loseFocus: loseDrawersFocus, setLastInteraction: setDrawerLastInteraction } = useDrawerFocusControl([activeDrawerId, activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.resizable], activeDrawerId !== void 0, true);
  const drawerRef = (0, import_react20.useRef)(null);
  const { resizeHandle, drawerSize } = use_resize_default(drawerRef, {
    activeDrawerId,
    drawers,
    drawersRefs,
    isToolsOpen,
    drawersMaxWidth
  });
  const handleDrawersClick = (0, import_react20.useCallback)(function handleDrawersChange(id, skipFocusControl) {
    const newActiveDrawerId = id !== activeDrawerId ? id : null;
    setActiveDrawerId(newActiveDrawerId);
    !skipFocusControl && focusDrawersButtons();
    fireNonCancelableEvent(drawers === null || drawers === void 0 ? void 0 : drawers.onChange, newActiveDrawerId);
    setDrawerLastInteraction({ type: activeDrawerId ? "close" : "open" });
  }, [activeDrawerId, drawers === null || drawers === void 0 ? void 0 : drawers.onChange, focusDrawersButtons, setActiveDrawerId, setDrawerLastInteraction]);
  const drawersTriggerCount = ((_e = drawers === null || drawers === void 0 ? void 0 : drawers.items.length) !== null && _e !== void 0 ? _e : 0) + (splitPanelDisplayed && splitPanelPosition === "side" ? 1 : 0) + (!toolsHide ? 1 : 0);
  const hasOpenDrawer = activeDrawerId !== null || isToolsOpen || splitPanelDisplayed && splitPanelPosition === "side" && isSplitPanelOpen;
  const hasDrawerViewportOverlay = isMobile && (!!activeDrawerId || !navigationHide && isNavigationOpen || !toolsHide && isToolsOpen);
  const [layoutContainerQuery, layoutElement] = useContainerQuery((rect) => rect.width);
  const layoutWidth = layoutContainerQuery !== null && layoutContainerQuery !== void 0 ? layoutContainerQuery : 0;
  const mainElement = (0, import_react20.useRef)(null);
  const [mainOffsetLeft, setMainOffsetLeft] = (0, import_react20.useState)(0);
  (0, import_react20.useLayoutEffect)(function handleMainOffsetLeft() {
    var _a2, _b2;
    setMainOffsetLeft((_b2 = (_a2 = mainElement === null || mainElement === void 0 ? void 0 : mainElement.current) === null || _a2 === void 0 ? void 0 : _a2.offsetLeft) !== null && _b2 !== void 0 ? _b2 : 0);
  }, [layoutWidth, isNavigationOpen, isToolsOpen, splitPanelReportedSize]);
  const [notificationsContainerQuery, notificationsElement] = useContainerQuery((rect) => rect.height);
  const [notificationsHeight, setNotificationsHeight] = (0, import_react20.useState)(0);
  const [hasNotificationsContent, setHasNotificationsContent] = (0, import_react20.useState)(false);
  (0, import_react20.useEffect)(function handleNotificationsContent() {
    setNotificationsHeight(notificationsContainerQuery !== null && notificationsContainerQuery !== void 0 ? notificationsContainerQuery : 0);
    setHasNotificationsContent(notificationsContainerQuery && notificationsContainerQuery > 0 ? true : false);
  }, [notificationsContainerQuery]);
  let offsetBottom = footerHeight;
  if (splitPanelDisplayed && splitPanelPosition === "bottom") {
    if (isSplitPanelOpen) {
      offsetBottom += splitPanelReportedSize;
    } else {
      offsetBottom += splitPanelReportedHeaderHeight;
    }
  }
  (0, import_react20.useLayoutEffect)(function handleSplitPanelMaxWidth() {
    const contentGapRight = 80;
    const toolsFormOffsetWidth = 160;
    const toolsOffsetWidth = isToolsOpen ? toolsWidth : 0;
    const activeDrawerOffsetWidth = activeDrawerId ? drawerSize : 0;
    setSplitPanelMaxWidth(layoutWidth - mainOffsetLeft - minContentWidth - contentGapRight - toolsOffsetWidth - toolsFormOffsetWidth - activeDrawerOffsetWidth);
    setDrawersMaxWidth(layoutWidth - mainOffsetLeft - minContentWidth - contentGapRight - toolsFormOffsetWidth);
  }, [
    activeDrawerId,
    drawerSize,
    isNavigationOpen,
    isToolsOpen,
    layoutWidth,
    mainOffsetLeft,
    minContentWidth,
    toolsWidth
  ]);
  return import_react20.default.createElement(
    AppLayoutInternalsContext.Provider,
    { value: Object.assign(Object.assign({}, props), {
      activeDrawerId,
      contentType,
      drawers,
      drawersRefs,
      drawersMaxWidth,
      drawerSize,
      drawerRef,
      resizeHandle,
      drawersTriggerCount,
      dynamicOverlapHeight,
      headerHeight,
      footerHeight,
      hasDefaultToolsWidth,
      hasDrawerViewportOverlay,
      handleDrawersClick,
      handleNavigationClick,
      handleSplitPanelClick,
      handleSplitPanelPreferencesChange,
      handleSplitPanelResize,
      handleToolsClick,
      hasNotificationsContent,
      hasOpenDrawer,
      hasStickyBackground,
      isMobile,
      isNavigationOpen: isNavigationOpen !== null && isNavigationOpen !== void 0 ? isNavigationOpen : false,
      isSplitPanelForcedPosition,
      isSplitPanelOpen,
      isToolsOpen,
      layoutElement,
      layoutWidth,
      loseToolsFocus,
      loseDrawersFocus,
      mainElement,
      mainOffsetLeft,
      maxContentWidth,
      minContentWidth,
      navigationHide,
      navigationRefs,
      notificationsElement,
      notificationsHeight,
      offsetBottom,
      setHasStickyBackground,
      setSplitPanelReportedSize,
      setSplitPanelReportedHeaderHeight,
      splitPanel,
      splitPanelDisplayed,
      splitPanelMaxWidth,
      splitPanelMinWidth,
      splitPanelPosition,
      splitPanelPreferences,
      splitPanelReportedSize,
      splitPanelReportedHeaderHeight,
      splitPanelSize,
      splitPanelToggle,
      setSplitPanelToggle,
      splitPanelRefs,
      toolsHide,
      toolsOpen: isToolsOpen,
      toolsWidth,
      toolsRefs
    }) },
    import_react20.default.createElement(
      AppLayoutContext.Provider,
      { value: {
        stickyOffsetBottom: offsetBottom,
        stickyOffsetTop: 0,
        setHasStickyBackground
      } },
      import_react20.default.createElement(DynamicOverlapContext.Provider, { value: setDynamicOverlapHeight }, children)
    )
  );
});

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/background.js
var import_react21 = __toESM(require_react());
function Background() {
  const { breadcrumbs, contentHeader, dynamicOverlapHeight, hasNotificationsContent, hasStickyBackground, isMobile, stickyNotifications } = useAppLayoutInternals();
  if (!hasNotificationsContent && (!breadcrumbs || isMobile) && !contentHeader && dynamicOverlapHeight <= 0) {
    return null;
  }
  return import_react21.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default10.background, "awsui-context-content-header") },
    import_react21.default.createElement("div", { className: styles_css_default10["scrolling-background"] }),
    !isMobile && hasStickyBackground && import_react21.default.createElement("div", { className: clsx_m_default(styles_css_default10["sticky-background"], {
      [styles_css_default10["has-sticky-notifications"]]: stickyNotifications
    }) })
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/breadcrumbs.js
var import_react22 = __toESM(require_react());
function Breadcrumbs() {
  const { breadcrumbs, hasStickyBackground, isMobile } = useAppLayoutInternals();
  if (isMobile || !breadcrumbs) {
    return null;
  }
  return import_react22.default.createElement("div", { className: clsx_m_default(styles_css_default10.breadcrumbs, styles_css_default5.breadcrumbs, {
    [styles_css_default10["has-sticky-background"]]: hasStickyBackground
  }, "awsui-context-content-header") }, breadcrumbs);
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/drawers.js
var import_react24 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/trigger-button.js
var import_react23 = __toESM(require_react());
function TriggerButton({ ariaLabel, className, iconName, iconSvg, onClick, selected = false }, ref) {
  return import_react23.default.createElement(
    "button",
    { "aria-expanded": false, "aria-haspopup": true, "aria-label": ariaLabel, className: clsx_m_default(styles_css_default10.trigger, {
      [styles_css_default10.selected]: selected
    }, className), onClick, ref, type: "button" },
    import_react23.default.createElement(internal_default, { name: iconName, svg: iconSvg })
  );
}
var trigger_button_default = import_react23.default.forwardRef(TriggerButton);

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/drawers.js
function Drawers() {
  const { disableBodyScroll, drawers, hasDrawerViewportOverlay, hasOpenDrawer, isNavigationOpen, navigationHide } = useAppLayoutInternals();
  const isUnfocusable = hasDrawerViewportOverlay && isNavigationOpen && !navigationHide;
  if (!drawers) {
    return null;
  }
  return import_react24.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default10["drawers-container"], {
      [styles_css_default10["disable-body-scroll"]]: disableBodyScroll,
      [styles_css_default10["has-open-drawer"]]: hasOpenDrawer,
      [styles_css_default10.unfocusable]: isUnfocusable
    }) },
    import_react24.default.createElement(split_panel_default.Side, null),
    import_react24.default.createElement(ActiveDrawer, null),
    import_react24.default.createElement(DesktopTriggers, null)
  );
}
function ActiveDrawer() {
  var _a, _b, _c;
  const { activeDrawerId, ariaLabels, drawers, drawersRefs, handleDrawersClick, handleToolsClick, hasDrawerViewportOverlay, isMobile, isNavigationOpen, isToolsOpen, navigationHide, tools, toolsRefs, loseDrawersFocus, resizeHandle, drawerSize, drawersMaxWidth, drawerRef } = useAppLayoutInternals();
  const activeDrawer = (_a = drawers === null || drawers === void 0 ? void 0 : drawers.items.find((item) => item.id === activeDrawerId)) !== null && _a !== void 0 ? _a : null;
  const computedAriaLabels = {
    closeButton: activeDrawerId ? (_b = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _b === void 0 ? void 0 : _b.closeButton : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsClose,
    content: activeDrawerId ? (_c = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _c === void 0 ? void 0 : _c.content : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools
  };
  const isHidden = !activeDrawerId && !isToolsOpen;
  const isUnfocusable = isHidden || hasDrawerViewportOverlay && isNavigationOpen && !navigationHide;
  const size = Math.min(drawersMaxWidth, drawerSize);
  return import_react24.default.createElement(
    "aside",
    { "aria-hidden": isHidden, "aria-label": computedAriaLabels.content, className: clsx_m_default(styles_css_default10.drawer, styles_css_default4["with-motion"], {
      [styles_css_default10["is-drawer-open"]]: activeDrawerId || isToolsOpen,
      [styles_css_default10.unfocusable]: isUnfocusable,
      [styles_css_default5["active-drawer"]]: activeDrawerId,
      [styles_css_default5.tools]: isToolsOpen
    }), style: Object.assign({}, !isMobile && drawerSize && { [custom_css_properties_default.drawerSize]: `${size}px` }), ref: drawerRef, onBlur: (e) => {
      if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {
        loseDrawersFocus();
      }
    } },
    !isMobile && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.resizable) && resizeHandle,
    import_react24.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default10["drawer-close-button"]) },
      import_react24.default.createElement(InternalButton, { ariaLabel: computedAriaLabels.closeButton, className: clsx_m_default({
        [styles_css_default5["active-drawer-close-button"]]: activeDrawerId,
        [styles_css_default5["tools-close"]]: isToolsOpen
      }), formAction: "none", iconName: isMobile ? "close" : "angle-right", onClick: () => activeDrawerId ? handleDrawersClick(activeDrawerId !== null && activeDrawerId !== void 0 ? activeDrawerId : null) : handleToolsClick(false), ref: isToolsOpen ? toolsRefs.close : drawersRefs.close, variant: "icon" })
    ),
    import_react24.default.createElement(
      "div",
      { className: styles_css_default10["drawer-content"] },
      activeDrawerId && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.content),
      isToolsOpen && tools
    )
  );
}
function DesktopTriggers() {
  const { activeDrawerId, ariaLabels, drawers, drawersRefs, drawersTriggerCount, handleDrawersClick, handleSplitPanelClick, handleToolsClick, hasOpenDrawer, isMobile, isSplitPanelOpen, isToolsOpen, splitPanel, splitPanelDisplayed, splitPanelPosition, splitPanelRefs, splitPanelToggle, tools, toolsHide, toolsRefs } = useAppLayoutInternals();
  const hasMultipleTriggers = drawersTriggerCount > 1;
  const hasSplitPanel = splitPanel && splitPanelDisplayed && splitPanelPosition === "side" ? true : false;
  const previousActiveDrawerId = (0, import_react24.useRef)(activeDrawerId);
  if (activeDrawerId) {
    previousActiveDrawerId.current = activeDrawerId;
  }
  if (isMobile) {
    return null;
  }
  return import_react24.default.createElement(
    "aside",
    { className: clsx_m_default(styles_css_default10["drawers-desktop-triggers-container"], styles_css_default5["drawers-desktop-triggers-container"], {
      [styles_css_default10["has-multiple-triggers"]]: hasMultipleTriggers,
      [styles_css_default10["has-open-drawer"]]: hasOpenDrawer
    }), "aria-label": drawers === null || drawers === void 0 ? void 0 : drawers.ariaLabel },
    import_react24.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default10["drawers-trigger-content"], {
        [styles_css_default10["has-multiple-triggers"]]: hasMultipleTriggers,
        [styles_css_default10["has-open-drawer"]]: hasOpenDrawer
      }) },
      !toolsHide && tools && import_react24.default.createElement(trigger_button_default, { ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsToggle, className: clsx_m_default(styles_css_default10["drawers-trigger"], styles_css_default5["tools-toggle"]), iconName: "status-info", onClick: () => {
        activeDrawerId && handleDrawersClick(null, true);
        handleToolsClick(!isToolsOpen);
      }, ref: toolsRefs.toggle, selected: isToolsOpen }),
      drawers === null || drawers === void 0 ? void 0 : drawers.items.map((item) => {
        var _a;
        return import_react24.default.createElement(trigger_button_default, { ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton, className: clsx_m_default(styles_css_default10["drawers-trigger"], styles_css_default5["drawers-trigger"]), iconName: item.trigger.iconName, iconSvg: item.trigger.iconSvg, key: item.id, onClick: () => {
          isToolsOpen && handleToolsClick(!isToolsOpen, true);
          handleDrawersClick(item.id);
        }, ref: item.id === previousActiveDrawerId.current ? drawersRefs.toggle : void 0, selected: item.id === activeDrawerId });
      }),
      hasSplitPanel && splitPanelToggle.displayed && import_react24.default.createElement(trigger_button_default, { ariaLabel: splitPanelToggle.ariaLabel, className: clsx_m_default(styles_css_default10["drawers-trigger"], styles_css_default8["open-button"]), iconName: "view-vertical", onClick: () => handleSplitPanelClick(), selected: hasSplitPanel && isSplitPanelOpen, ref: splitPanelRefs.toggle })
    )
  );
}
function MobileTriggers() {
  var _a;
  const { activeDrawerId, ariaLabels, drawers, drawersRefs, handleDrawersClick, handleToolsClick, hasDrawerViewportOverlay, isMobile, isToolsOpen, tools, toolsHide, toolsRefs } = useAppLayoutInternals();
  const previousActiveDrawerId = (0, import_react24.useRef)(activeDrawerId);
  if (activeDrawerId) {
    previousActiveDrawerId.current = activeDrawerId;
  }
  if (!isMobile || !drawers) {
    return null;
  }
  return import_react24.default.createElement(
    "aside",
    { "aria-hidden": hasDrawerViewportOverlay, className: clsx_m_default(styles_css_default10["drawers-mobile-triggers-container"], styles_css_default5["drawers-mobile-triggers-container"], {
      [styles_css_default10.unfocusable]: hasDrawerViewportOverlay
    }), "aria-label": drawers.ariaLabel },
    !toolsHide && tools && import_react24.default.createElement(InternalButton, { ariaLabel: (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsToggle) !== null && _a !== void 0 ? _a : void 0, ariaExpanded: isToolsOpen, className: styles_css_default5["tools-toggle"], disabled: hasDrawerViewportOverlay, formAction: "none", iconName: "status-info", onClick: () => handleToolsClick(true), ref: toolsRefs.toggle, variant: "icon", __nativeAttributes: { "aria-haspopup": true } }),
    drawers.items.map((item) => {
      var _a2;
      return import_react24.default.createElement(InternalButton, { ariaExpanded: item.id === activeDrawerId, ariaLabel: (_a2 = item.ariaLabels) === null || _a2 === void 0 ? void 0 : _a2.triggerButton, className: clsx_m_default(styles_css_default10["drawers-trigger"], styles_css_default5["drawers-trigger"]), disabled: hasDrawerViewportOverlay, formAction: "none", iconName: item.trigger.iconName, iconSvg: item.trigger.iconSvg, key: item.id, onClick: () => handleDrawersClick(item.id), ref: item.id === previousActiveDrawerId.current ? drawersRefs.toggle : void 0, variant: "icon", __nativeAttributes: { "aria-haspopup": true } });
    })
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/header.js
var import_react25 = __toESM(require_react());
function Header() {
  const { breadcrumbs, contentHeader, hasDrawerViewportOverlay, hasNotificationsContent } = useAppLayoutInternals();
  if (!contentHeader) {
    return null;
  }
  return import_react25.default.createElement("header", { className: clsx_m_default(styles_css_default10.content, {
    [styles_css_default10["has-breadcrumbs"]]: breadcrumbs,
    [styles_css_default10["has-notifications-content"]]: hasNotificationsContent,
    [styles_css_default10.unfocusable]: hasDrawerViewportOverlay
  }, "awsui-context-content-header") }, contentHeader);
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/layout.js
var import_react26 = __toESM(require_react());
function Layout({ children }) {
  const { breadcrumbs, contentHeader, contentType, disableBodyScroll, disableContentHeaderOverlap, disableContentPaddings, drawersTriggerCount, dynamicOverlapHeight, footerHeight, hasNotificationsContent, hasStickyBackground, hasOpenDrawer, headerHeight, isMobile, isNavigationOpen, layoutElement, layoutWidth, mainOffsetLeft, maxContentWidth, minContentWidth, navigationHide, notificationsHeight, splitPanelPosition, stickyNotifications, splitPanelDisplayed } = useAppLayoutInternals();
  const contentFirstChild = getContentFirstChild(breadcrumbs, contentHeader, hasNotificationsContent, isMobile);
  const hasContentGapLeft = isNavigationOpen || navigationHide;
  const hasContentGapRight = drawersTriggerCount <= 0 || hasOpenDrawer;
  const isOverlapDisabled = disableContentHeaderOverlap || !contentHeader && dynamicOverlapHeight <= 0;
  return import_react26.default.createElement("main", { className: clsx_m_default(styles_css_default10.layout, styles_css_default10[`content-first-child-${contentFirstChild}`], styles_css_default10[`content-type-${contentType}`], styles_css_default10[`split-panel-position-${splitPanelPosition !== null && splitPanelPosition !== void 0 ? splitPanelPosition : "bottom"}`], {
    [styles_css_default10["disable-body-scroll"]]: disableBodyScroll,
    [styles_css_default5["disable-body-scroll-root"]]: disableBodyScroll,
    [styles_css_default10["disable-content-paddings"]]: disableContentPaddings,
    [styles_css_default10["has-breadcrumbs"]]: breadcrumbs && !isMobile,
    [styles_css_default10["has-content-gap-left"]]: hasContentGapLeft,
    [styles_css_default10["has-content-gap-right"]]: hasContentGapRight,
    [styles_css_default10["has-header"]]: contentHeader,
    [styles_css_default10["has-max-content-width"]]: maxContentWidth && maxContentWidth > 0,
    [styles_css_default10["has-split-panel"]]: splitPanelDisplayed,
    [styles_css_default10["has-sticky-background"]]: hasStickyBackground,
    [styles_css_default10["has-sticky-notifications"]]: stickyNotifications && hasNotificationsContent,
    [styles_css_default10["is-overlap-disabled"]]: isOverlapDisabled
  }, styles_css_default5.root), ref: layoutElement, style: Object.assign(Object.assign(Object.assign(Object.assign({ [custom_css_properties_default.headerHeight]: `${headerHeight}px`, [custom_css_properties_default.footerHeight]: `${footerHeight}px`, [custom_css_properties_default.layoutWidth]: `${layoutWidth}px`, [custom_css_properties_default.mainOffsetLeft]: `${mainOffsetLeft}px` }, maxContentWidth && { [custom_css_properties_default.maxContentWidth]: `${maxContentWidth}px` }), minContentWidth && { [custom_css_properties_default.minContentWidth]: `${minContentWidth}px` }), { [custom_css_properties_default.notificationsHeight]: `${notificationsHeight}px` }), !isOverlapDisabled && dynamicOverlapHeight > 0 && { [custom_css_properties_default.overlapHeight]: `${dynamicOverlapHeight}px` }) }, children);
}
function getContentFirstChild(breadcrumbs, contentHeader, hasNotificationsContent, isMobile) {
  let contentFirstChild = "main";
  if (hasNotificationsContent) {
    contentFirstChild = "notifications";
  } else if (breadcrumbs && !isMobile) {
    contentFirstChild = "breadcrumbs";
  } else if (contentHeader) {
    contentFirstChild = "header";
  }
  return contentFirstChild;
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/main.js
var import_react27 = __toESM(require_react());
function Main() {
  const { content, disableContentPaddings, footerHeight, hasDrawerViewportOverlay, isNavigationOpen, isSplitPanelOpen, isToolsOpen, mainElement, offsetBottom, splitPanelDisplayed, splitPanelPosition } = useAppLayoutInternals();
  const splitPanelHeight = offsetBottom - footerHeight;
  return import_react27.default.createElement("div", { className: clsx_m_default(styles_css_default10.container, styles_css_default10[`split-panel-position-${splitPanelPosition !== null && splitPanelPosition !== void 0 ? splitPanelPosition : "bottom"}`], {
    [styles_css_default10["disable-content-paddings"]]: disableContentPaddings,
    [styles_css_default10["has-split-panel"]]: splitPanelDisplayed,
    [styles_css_default10["is-navigation-open"]]: isNavigationOpen,
    [styles_css_default10["is-tools-open"]]: isToolsOpen,
    [styles_css_default10["is-split-panel-open"]]: isSplitPanelOpen,
    [styles_css_default10.unfocusable]: hasDrawerViewportOverlay
  }, styles_css_default5.content), ref: mainElement, style: {
    [custom_css_properties_default.splitPanelHeight]: `${splitPanelHeight}px`
  } }, content);
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/mobile-toolbar.js
var import_react28 = __toESM(require_react());
function MobileToolbar2() {
  var _a, _b, _c;
  const { ariaLabels, breadcrumbs, drawers, handleNavigationClick, handleToolsClick, hasDrawerViewportOverlay, isMobile, isNavigationOpen, isToolsOpen, navigationHide, navigationRefs, toolsHide, toolsRefs } = useAppLayoutInternals();
  if (!isMobile || navigationHide && !breadcrumbs && toolsHide && !drawers) {
    return null;
  }
  return import_react28.default.createElement(
    "section",
    { className: clsx_m_default(styles_css_default10["mobile-toolbar"], {
      [styles_css_default10["has-breadcrumbs"]]: breadcrumbs,
      [styles_css_default10.unfocusable]: hasDrawerViewportOverlay,
      [styles_css_default5["mobile-bar"]]: isMobile
    }, styles_css_default5["mobile-bar"], "awsui-context-content-header") },
    !navigationHide && import_react28.default.createElement(
      "nav",
      { "aria-hidden": isNavigationOpen, className: clsx_m_default(styles_css_default10["mobile-toolbar-nav"], { [styles_css_default5["drawer-closed"]]: !isNavigationOpen }) },
      import_react28.default.createElement(InternalButton, { ariaLabel: (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationToggle) !== null && _a !== void 0 ? _a : void 0, ariaExpanded: isNavigationOpen ? void 0 : false, iconName: "menu", formAction: "none", onClick: () => handleNavigationClick(true), variant: "icon", className: styles_css_default5["navigation-toggle"], ref: navigationRefs.toggle, disabled: hasDrawerViewportOverlay, __nativeAttributes: { "aria-haspopup": isNavigationOpen ? void 0 : true } })
    ),
    breadcrumbs && import_react28.default.createElement("div", { className: clsx_m_default(styles_css_default10["mobile-toolbar-breadcrumbs"], styles_css_default5.breadcrumbs) }, breadcrumbs),
    isMobile && !toolsHide && !drawers && import_react28.default.createElement(
      "aside",
      { "aria-hidden": isToolsOpen, "aria-label": (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _b !== void 0 ? _b : void 0, className: clsx_m_default(styles_css_default10["mobile-toolbar-tools"], { [styles_css_default5["drawer-closed"]]: !isToolsOpen }) },
      import_react28.default.createElement(InternalButton, { className: styles_css_default5["tools-toggle"], ariaExpanded: isToolsOpen, disabled: hasDrawerViewportOverlay, ariaLabel: (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsToggle) !== null && _c !== void 0 ? _c : void 0, iconName: "status-info", formAction: "none", onClick: () => handleToolsClick(true), variant: "icon", ref: toolsRefs.toggle, __nativeAttributes: { "aria-haspopup": true } })
    ),
    import_react28.default.createElement(MobileTriggers, null)
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/navigation.js
var import_react29 = __toESM(require_react());
function Navigation() {
  const { ariaLabels, disableBodyScroll, handleNavigationClick, hasDrawerViewportOverlay, isMobile, isNavigationOpen, isToolsOpen, navigation, navigationHide, navigationRefs, navigationWidth, toolsHide } = useAppLayoutInternals();
  if (navigationHide) {
    return null;
  }
  const onNavigationClick = (event) => {
    const hasLink = findUpUntil(event.target, (node) => node.tagName === "A" && !!node.href);
    if (hasLink && isMobile) {
      handleNavigationClick(false);
    }
  };
  const isUnfocusable = hasDrawerViewportOverlay && (!isNavigationOpen || isToolsOpen && !toolsHide);
  return import_react29.default.createElement(Transition, { in: isNavigationOpen }, (state, transitionEventsRef) => {
    var _a, _b, _c;
    return import_react29.default.createElement(
      "div",
      {
        className: clsx_m_default(styles_css_default10["navigation-container"], {
          [styles_css_default10["disable-body-scroll"]]: disableBodyScroll,
          [styles_css_default10.unfocusable]: isUnfocusable,
          [styles_css_default5["drawer-closed"]]: !isNavigationOpen
        }),
        style: Object.assign({}, navigationWidth && { [custom_css_properties_default.navigationWidth]: `${navigationWidth}px` })
      },
      !isMobile && import_react29.default.createElement(
        "nav",
        { "aria-hidden": isMobile || isNavigationOpen ? true : false, "aria-label": (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigation) !== null && _a !== void 0 ? _a : void 0, className: clsx_m_default(styles_css_default10["show-navigation"], {
          [styles_css_default10.animating]: state === "exiting",
          [styles_css_default10["is-navigation-open"]]: isNavigationOpen
        }), ref: state === "exiting" ? transitionEventsRef : void 0 },
        import_react29.default.createElement(trigger_button_default, { ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationToggle, iconName: "menu", className: styles_css_default5["navigation-toggle"], onClick: () => handleNavigationClick(true), ref: navigationRefs.toggle })
      ),
      import_react29.default.createElement(
        "nav",
        { "aria-label": (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigation) !== null && _b !== void 0 ? _b : void 0, className: clsx_m_default(styles_css_default10.navigation, {
          [styles_css_default10.animating]: state === "entering",
          [styles_css_default10["is-navigation-open"]]: isNavigationOpen
        }, styles_css_default5.navigation), ref: state !== "exiting" ? transitionEventsRef : void 0, "aria-hidden": !isNavigationOpen, onClick: (event) => {
          onNavigationClick && onNavigationClick(event);
        } },
        import_react29.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default10["animated-content"]) },
          import_react29.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default10["hide-navigation"]) },
            import_react29.default.createElement(InternalButton, { ariaLabel: (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationClose) !== null && _c !== void 0 ? _c : void 0, iconName: isMobile ? "close" : "angle-left", onClick: () => handleNavigationClick(false), variant: "icon", formAction: "none", className: styles_css_default5["navigation-close"], ref: navigationRefs.close })
          ),
          navigation
        )
      )
    );
  });
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/notifications.js
var import_react30 = __toESM(require_react());
function Notifications2() {
  var _a;
  const { ariaLabels, hasDrawerViewportOverlay, notifications, notificationsElement, stickyNotifications } = useAppLayoutInternals();
  if (!notifications) {
    return null;
  }
  return import_react30.default.createElement(
    "div",
    { role: "region", "aria-label": (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.notifications) !== null && _a !== void 0 ? _a : void 0, className: clsx_m_default(styles_css_default10.notifications, {
      [styles_css_default10["sticky-notifications"]]: stickyNotifications,
      [styles_css_default10.unfocusable]: hasDrawerViewportOverlay
    }, styles_css_default5.notifications, "awsui-context-content-header") },
    import_react30.default.createElement("div", { ref: notificationsElement }, notifications)
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/tools.js
var import_react31 = __toESM(require_react());
function Tools({ children }) {
  const { ariaLabels, disableBodyScroll, drawers, handleSplitPanelClick, handleToolsClick, hasDefaultToolsWidth, hasDrawerViewportOverlay, isMobile, isSplitPanelOpen, isToolsOpen, loseToolsFocus, splitPanel, splitPanelDisplayed, splitPanelPosition, splitPanelRefs, splitPanelToggle, tools, toolsHide, toolsRefs, toolsWidth } = useAppLayoutInternals();
  const hasSplitPanel = !!splitPanel && getSplitPanelStatus(splitPanelDisplayed, splitPanelPosition);
  const hasToolsForm = getToolsFormStatus(hasSplitPanel, isMobile, isSplitPanelOpen, isToolsOpen, toolsHide);
  const hasToolsFormPersistence = getToolsFormPersistence(hasSplitPanel, isSplitPanelOpen, isToolsOpen, toolsHide);
  const isUnfocusable = hasDrawerViewportOverlay && !isToolsOpen;
  if (toolsHide && !hasSplitPanel || drawers) {
    return null;
  }
  return import_react31.default.createElement(Transition, { in: isToolsOpen !== null && isToolsOpen !== void 0 ? isToolsOpen : false }, (state, transitionEventsRef) => {
    var _a, _b, _c;
    return import_react31.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default10["tools-container"], {
        [styles_css_default10["disable-body-scroll"]]: disableBodyScroll,
        [styles_css_default10.unfocusable]: isUnfocusable,
        [styles_css_default5["drawer-closed"]]: !isToolsOpen
      }), style: {
        [custom_css_properties_default.toolsAnimationStartingOpacity]: `${hasSplitPanel && isSplitPanelOpen ? 1 : 0}`,
        [custom_css_properties_default.toolsWidth]: hasDefaultToolsWidth ? "" : `${toolsWidth}px`
      }, onBlur: (e) => {
        if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {
          loseToolsFocus();
        }
      } },
      children,
      !toolsHide && import_react31.default.createElement(
        "aside",
        { "aria-hidden": !isToolsOpen ? true : false, "aria-label": (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _a !== void 0 ? _a : void 0, className: clsx_m_default(styles_css_default10.tools, {
          [styles_css_default10.animating]: state === "entering",
          [styles_css_default10["has-tools-form-persistence"]]: hasToolsFormPersistence,
          [styles_css_default10["is-tools-open"]]: isToolsOpen
        }, styles_css_default5.tools), ref: state !== "exiting" ? transitionEventsRef : void 0 },
        import_react31.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default10["animated-content"]) },
          import_react31.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default10["hide-tools"]) },
            import_react31.default.createElement(InternalButton, { ariaLabel: (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsClose) !== null && _b !== void 0 ? _b : void 0, iconName: isMobile ? "close" : "angle-right", onClick: () => handleToolsClick(false), variant: "icon", formAction: "none", className: styles_css_default5["tools-close"], ref: toolsRefs.close })
          ),
          tools
        )
      ),
      !isMobile && import_react31.default.createElement(
        "aside",
        { "aria-hidden": !hasToolsForm ? true : false, "aria-label": (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _c !== void 0 ? _c : void 0, className: clsx_m_default(styles_css_default10["show-tools"], {
          [styles_css_default10.animating]: state === "exiting",
          [styles_css_default10["has-tools-form"]]: hasToolsForm,
          [styles_css_default10["has-tools-form-persistence"]]: hasToolsFormPersistence
        }), ref: state === "exiting" ? transitionEventsRef : void 0, "data-testid": "side-split-panel-drawer" },
        !toolsHide && import_react31.default.createElement(trigger_button_default, { ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsToggle, iconName: "status-info", onClick: () => handleToolsClick(!isToolsOpen), selected: hasSplitPanel && isToolsOpen, className: styles_css_default5["tools-toggle"], ref: toolsRefs.toggle }),
        hasSplitPanel && splitPanelToggle.displayed && import_react31.default.createElement(trigger_button_default, { ariaLabel: splitPanelToggle.ariaLabel, iconName: "view-vertical", onClick: () => handleSplitPanelClick(), selected: hasSplitPanel && isSplitPanelOpen, className: styles_css_default8["open-button"], ref: splitPanelRefs.toggle })
      )
    );
  });
}
function getSplitPanelStatus(splitPanelDisplayed, splitPanelPosition) {
  return splitPanelDisplayed && splitPanelPosition === "side" ? true : false;
}
function getToolsFormStatus(hasSplitPanel, isMobile, isSplitPanelOpen, isToolsOpen, toolsHide) {
  let hasToolsForm = false;
  if (!isMobile) {
    if (hasSplitPanel && !toolsHide) {
      hasToolsForm = true;
    }
    if (hasSplitPanel && !isSplitPanelOpen && toolsHide) {
      hasToolsForm = true;
    }
    if (!hasSplitPanel && !toolsHide && !isToolsOpen) {
      hasToolsForm = true;
    }
  }
  return hasToolsForm;
}
function getToolsFormPersistence(hasSplitPanel, isSplitPanelOpen, isToolsOpen, toolsHide) {
  let hasToolsFormPersistence = false;
  if (hasSplitPanel && !toolsHide && (isSplitPanelOpen || isToolsOpen)) {
    hasToolsFormPersistence = true;
  }
  return hasToolsFormPersistence;
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/index.js
var AppLayoutWithRef = import_react32.default.forwardRef(function AppLayout(props, ref) {
  return import_react32.default.createElement(
    AppLayoutInternalsProvider,
    Object.assign({}, props, { ref }),
    import_react32.default.createElement(
      split_panel_default,
      null,
      import_react32.default.createElement(
        Layout,
        null,
        import_react32.default.createElement(Background, null),
        import_react32.default.createElement(Navigation, null),
        import_react32.default.createElement(MobileToolbar2, null),
        import_react32.default.createElement(Notifications2, null),
        import_react32.default.createElement(Breadcrumbs, null),
        import_react32.default.createElement(Header, null),
        import_react32.default.createElement(Main, null),
        import_react32.default.createElement(split_panel_default.Bottom, null),
        import_react32.default.createElement(
          Tools,
          null,
          import_react32.default.createElement(split_panel_default.Side, null)
        ),
        import_react32.default.createElement(Drawers, null)
      )
    )
  );
});
var visual_refresh_default = AppLayoutWithRef;

// node_modules/@cloudscape-design/components/internal/plugins/drawers-controller.js
var DrawersController = class {
  constructor() {
    this.drawers = [];
    this.drawersRegistrationListener = null;
    this.updateTimeout = null;
    this.registerDrawer = (config) => {
      this.drawers = this.drawers.concat(config);
      this.scheduleUpdate();
    };
    this.onDrawersRegistered = (listener) => {
      if (this.drawersRegistrationListener !== null) {
        console.warn("[AwsUi] [runtime plugins] multiple app layout instances detected");
      }
      this.drawersRegistrationListener = listener;
      this.scheduleUpdate();
      return () => {
        this.drawersRegistrationListener = null;
      };
    };
    this.clearRegisteredDrawers = () => {
      this.drawers = [];
    };
  }
  scheduleUpdate() {
    if (this.updateTimeout) {
      clearTimeout(this.updateTimeout);
    }
    this.updateTimeout = setTimeout(() => {
      var _a;
      (_a = this.drawersRegistrationListener) === null || _a === void 0 ? void 0 : _a.call(this, this.drawers);
    });
  }
};

// node_modules/@cloudscape-design/components/internal/plugins/api.js
var storageKey = Symbol.for("awsui-plugin-api");
function findUpApi(currentWindow) {
  try {
    if (currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow[storageKey]) {
      return currentWindow[storageKey];
    }
    if (!currentWindow || currentWindow.parent === currentWindow) {
      return void 0;
    }
    return findUpApi(currentWindow.parent);
  } catch (ex) {
    return void 0;
  }
}
function loadApi() {
  if (typeof window === "undefined") {
    return createApi();
  }
  const win = window;
  const api = findUpApi(win);
  if (api) {
    return api;
  }
  win[storageKey] = createApi();
  return win[storageKey];
}
var { awsuiPlugins, awsuiPluginsInternal } = loadApi();
function createApi() {
  const drawers = new DrawersController();
  return {
    awsuiPlugins: {
      appLayout: {
        registerDrawer: drawers.registerDrawer
      }
    },
    awsuiPluginsInternal: {
      appLayout: {
        clearRegisteredDrawers: drawers.clearRegisteredDrawers,
        onDrawersRegistered: drawers.onDrawersRegistered
      }
    }
  };
}

// node_modules/@cloudscape-design/components/app-layout/runtime-api.js
var import_react33 = __toESM(require_react());
function RuntimeContentWrapper({ mountContent, unmountContent }) {
  const ref = (0, import_react33.useRef)(null);
  (0, import_react33.useEffect)(() => {
    const container = ref.current;
    mountContent(container);
    return () => unmountContent(container);
  }, []);
  return import_react33.default.createElement("div", { ref });
}
function convertRuntimeDrawers(drawers) {
  const converted = drawers.map((_a) => {
    var { mountContent, unmountContent, trigger } = _a, runtimeDrawer = __rest(_a, ["mountContent", "unmountContent", "trigger"]);
    return Object.assign(Object.assign({}, runtimeDrawer), { trigger: {
      iconSvg: import_react33.default.createElement("span", { dangerouslySetInnerHTML: { __html: trigger.iconSvg } })
    }, content: import_react33.default.createElement(RuntimeContentWrapper, { key: runtimeDrawer.id, mountContent, unmountContent }) });
  });
  converted.sort((a, b) => {
    var _a, _b;
    if (b.orderPriority !== a.orderPriority) {
      return Math.sign(((_a = b.orderPriority) !== null && _a !== void 0 ? _a : 0) - ((_b = a.orderPriority) !== null && _b !== void 0 ? _b : 0));
    }
    return b.id < a.id ? 1 : -1;
  });
  return {
    before: converted.filter((item) => {
      var _a;
      return ((_a = item.orderPriority) !== null && _a !== void 0 ? _a : 0) > 0;
    }),
    after: converted.filter((item) => {
      var _a;
      return ((_a = item.orderPriority) !== null && _a !== void 0 ? _a : 0) <= 0;
    })
  };
}

// node_modules/@cloudscape-design/components/app-layout/index.js
var AppLayout2 = import_react34.default.forwardRef((_a, ref) => {
  var _b, _c, _d, _e, _f, _g, _h, _j;
  var { contentType = "default", headerSelector = "#b #h", footerSelector = "#b #f" } = _a, rest = __rest(_a, ["contentType", "headerSelector", "footerSelector"]);
  const { __internalRootRef } = useBaseComponent("AppLayout");
  const [runtimeDrawers, setRuntimeDrawers] = (0, import_react34.useState)({ before: [], after: [] });
  const isRefresh = useVisualRefresh();
  const i18n = useInternalI18n("app-layout");
  const ariaLabels = {
    navigation: i18n("ariaLabels.navigation", (_b = rest.ariaLabels) === null || _b === void 0 ? void 0 : _b.navigation),
    navigationClose: i18n("ariaLabels.navigationClose", (_c = rest.ariaLabels) === null || _c === void 0 ? void 0 : _c.navigationClose),
    navigationToggle: i18n("ariaLabels.navigationToggle", (_d = rest.ariaLabels) === null || _d === void 0 ? void 0 : _d.navigationToggle),
    notifications: i18n("ariaLabels.notifications", (_e = rest.ariaLabels) === null || _e === void 0 ? void 0 : _e.notifications),
    tools: i18n("ariaLabels.tools", (_f = rest.ariaLabels) === null || _f === void 0 ? void 0 : _f.tools),
    toolsClose: i18n("ariaLabels.toolsClose", (_g = rest.ariaLabels) === null || _g === void 0 ? void 0 : _g.toolsClose),
    toolsToggle: i18n("ariaLabels.toolsToggle", (_h = rest.ariaLabels) === null || _h === void 0 ? void 0 : _h.toolsToggle)
  };
  const props = Object.assign(Object.assign({ contentType, headerSelector, footerSelector }, rest), { ariaLabels });
  const baseProps = getBaseProps(rest);
  const ownDrawers = props.drawers;
  const disableRuntimeDrawers = props.__disableRuntimeDrawers;
  const combinedDrawers = [...runtimeDrawers.before, ...(_j = ownDrawers === null || ownDrawers === void 0 ? void 0 : ownDrawers.items) !== null && _j !== void 0 ? _j : [], ...runtimeDrawers.after];
  const finalDrawers = combinedDrawers.length > 0 ? Object.assign(Object.assign({}, ownDrawers), { items: combinedDrawers }) : ownDrawers;
  (0, import_react34.useEffect)(() => {
    if (disableRuntimeDrawers) {
      return;
    }
    const unsubscribe = awsuiPluginsInternal.appLayout.onDrawersRegistered((drawers) => setRuntimeDrawers(convertRuntimeDrawers(drawers)));
    return () => {
      unsubscribe();
      setRuntimeDrawers({ before: [], after: [] });
    };
  }, [disableRuntimeDrawers]);
  return import_react34.default.createElement("div", Object.assign({ ref: __internalRootRef }, baseProps), isRefresh ? import_react34.default.createElement(visual_refresh_default, Object.assign({}, props, { drawers: finalDrawers }, { ref })) : import_react34.default.createElement(OldAppLayout, Object.assign({}, props, { drawers: finalDrawers }, { ref })));
});
var OldAppLayout = import_react34.default.forwardRef((_a, ref) => {
  var _b, _c;
  var { navigation, navigationWidth = 280, navigationHide, navigationOpen: controlledNavigationOpen, tools, toolsWidth = 290, toolsHide, toolsOpen: controlledToolsOpen, breadcrumbs, notifications, stickyNotifications, contentHeader, disableContentHeaderOverlap, content, contentType = "default", disableContentPaddings, disableBodyScroll, maxContentWidth, minContentWidth, headerSelector = "#b #h", footerSelector = "#b #f", ariaLabels, splitPanel, splitPanelSize: controlledSplitPanelSize, splitPanelOpen: controlledSplitPanelOpen, splitPanelPreferences: controlledSplitPanelPreferences, onSplitPanelPreferencesChange, onSplitPanelResize, onSplitPanelToggle, onNavigationChange, onToolsChange } = _a, props = __rest(_a, ["navigation", "navigationWidth", "navigationHide", "navigationOpen", "tools", "toolsWidth", "toolsHide", "toolsOpen", "breadcrumbs", "notifications", "stickyNotifications", "contentHeader", "disableContentHeaderOverlap", "content", "contentType", "disableContentPaddings", "disableBodyScroll", "maxContentWidth", "minContentWidth", "headerSelector", "footerSelector", "ariaLabels", "splitPanel", "splitPanelSize", "splitPanelOpen", "splitPanelPreferences", "onSplitPanelPreferencesChange", "onSplitPanelResize", "onSplitPanelToggle", "onNavigationChange", "onToolsChange"]);
  if (isDevelopment) {
    if (controlledToolsOpen && toolsHide) {
      warnOnce("AppLayout", `You have enabled both the \`toolsOpen\` prop and the \`toolsHide\` prop. This is not supported. Set \`toolsOpen\` to \`false\` when you set \`toolsHide\` to \`true\`.`);
    }
  }
  const drawers = props.drawers;
  const hasDrawers = drawers && drawers.items.length > 0;
  const rootRef = (0, import_react34.useRef)(null);
  const isMobile = useMobile();
  const defaults2 = applyDefaults(contentType, { maxContentWidth, minContentWidth }, false);
  const [navigationOpen = false, setNavigationOpen] = useControllable(controlledNavigationOpen, onNavigationChange, isMobile ? false : defaults2.navigationOpen, { componentName: "AppLayout", controlledProp: "navigationOpen", changeHandler: "onNavigationChange" });
  const [toolsOpen = false, setToolsOpen] = useControllable(controlledToolsOpen, onToolsChange, isMobile ? false : defaults2.toolsOpen, { componentName: "AppLayout", controlledProp: "toolsOpen", changeHandler: "onToolsChange" });
  const [activeDrawerId, setActiveDrawerId] = useControllable(drawers === null || drawers === void 0 ? void 0 : drawers.activeDrawerId, drawers === null || drawers === void 0 ? void 0 : drawers.onChange, isMobile ? false : tools ? defaults2.toolsOpen : "", {
    componentName: "AppLayout",
    controlledProp: "activeDrawerId",
    changeHandler: "onChange"
  });
  const { iconName, getLabels } = togglesConfig.tools;
  const { mainLabel, closeLabel, openLabel } = getLabels(ariaLabels);
  const toolsItem = {
    id: "tools",
    content: tools,
    resizable: false,
    ariaLabels: {
      triggerButton: openLabel,
      closeButton: closeLabel,
      content: mainLabel
    },
    trigger: {
      iconName
    }
  };
  const getAllDrawerItems = () => {
    if (!hasDrawers) {
      return;
    }
    return tools ? [toolsItem, ...drawers.items] : drawers.items;
  };
  const selectedDrawer = tools && toolsOpen ? toolsItem : hasDrawers ? (_b = getAllDrawerItems()) === null || _b === void 0 ? void 0 : _b.filter((drawerItem) => drawerItem.id === activeDrawerId)[0] : void 0;
  const { refs: navigationRefs, setFocus: focusNavButtons } = useFocusControl(navigationOpen);
  const { refs: toolsRefs, setFocus: focusToolsButtons, loseFocus: loseToolsFocus } = useFocusControl(toolsOpen || selectedDrawer !== void 0, true);
  const { refs: drawerRefs, setFocus: focusDrawersButtons, loseFocus: loseDrawersFocus, setLastInteraction: setDrawerLastInteraction } = useDrawerFocusControl([selectedDrawer === null || selectedDrawer === void 0 ? void 0 : selectedDrawer.resizable], toolsOpen || selectedDrawer !== void 0, true);
  const onNavigationToggle = (0, import_react34.useCallback)((open) => {
    setNavigationOpen(open);
    focusNavButtons();
    fireNonCancelableEvent(onNavigationChange, { open });
  }, [setNavigationOpen, onNavigationChange, focusNavButtons]);
  const onToolsToggle = (0, import_react34.useCallback)((open) => {
    setToolsOpen(open);
    focusToolsButtons();
    fireNonCancelableEvent(onToolsChange, { open });
  }, [setToolsOpen, onToolsChange, focusToolsButtons]);
  const onNavigationClick = (event) => {
    const hasLink = findUpUntil(event.target, (node) => node.tagName === "A" && !!node.href);
    if (hasLink) {
      onNavigationToggle(false);
    }
  };
  const navigationVisible = !navigationHide && navigationOpen;
  const toolsVisible = !toolsHide && toolsOpen;
  const { contentHeightStyle, headerHeight, footerHeight } = useContentHeight(headerSelector, footerSelector, disableBodyScroll);
  const [isSplitpanelForcedPosition, setIsSplitpanelForcedPosition] = (0, import_react34.useState)(false);
  const [isResizeInvalid, setIsResizeInvalid] = (0, import_react34.useState)(false);
  const [notificationsHeight, notificationsRef] = useContainerQuery((rect) => rect.height);
  const anyPanelOpen = navigationVisible || toolsVisible;
  const hasRenderedNotifications = notificationsHeight ? notificationsHeight > 0 : false;
  const stickyNotificationsHeight = stickyNotifications ? notificationsHeight : null;
  const [splitPanelPreferences, setSplitPanelPreferences] = useControllable(controlledSplitPanelPreferences, onSplitPanelPreferencesChange, void 0, {
    componentName: "AppLayout",
    controlledProp: "splitPanelPreferences",
    changeHandler: "onSplitPanelPreferencesChange"
  });
  const [splitPanelOpen = false, setSplitPanelOpen] = useControllable(controlledSplitPanelOpen, onSplitPanelToggle, false, {
    componentName: "AppLayout",
    controlledProp: "splitPanelOpen",
    changeHandler: "onSplitPanelToggle"
  });
  const drawerItems = (0, import_react34.useMemo)(() => (drawers === null || drawers === void 0 ? void 0 : drawers.items) || [], [drawers === null || drawers === void 0 ? void 0 : drawers.items]);
  const getDrawerItemSizes = (0, import_react34.useCallback)(() => {
    const sizes = {};
    if (!drawerItems) {
      return {};
    }
    for (const item of drawerItems) {
      if (item.defaultSize) {
        sizes[item.id] = item.defaultSize || toolsWidth;
      }
    }
    return sizes;
  }, [drawerItems, toolsWidth]);
  const [drawerSizes, setDrawerSizes] = (0, import_react34.useState)(() => getDrawerItemSizes());
  (0, import_react34.useEffect)(() => {
    setDrawerSizes((prev) => Object.assign(Object.assign({}, getDrawerItemSizes()), prev));
  }, [getDrawerItemSizes]);
  const drawerSize = (selectedDrawer === null || selectedDrawer === void 0 ? void 0 : selectedDrawer.id) && drawerSizes[selectedDrawer === null || selectedDrawer === void 0 ? void 0 : selectedDrawer.id] ? drawerSizes[selectedDrawer === null || selectedDrawer === void 0 ? void 0 : selectedDrawer.id] : toolsWidth;
  const splitPanelPosition = (splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) || "bottom";
  const [splitPanelReportedToggle, setSplitPanelReportedToggle] = (0, import_react34.useState)({
    displayed: false,
    ariaLabel: void 0
  });
  const splitPanelDisplayed = !!(splitPanel && (splitPanelReportedToggle.displayed || splitPanelOpen));
  const closedDrawerWidth = 40;
  const effectiveNavigationWidth = navigationHide ? 0 : navigationOpen ? navigationWidth : closedDrawerWidth;
  const getEffectiveToolsWidth = () => {
    if (toolsHide && (!splitPanelDisplayed || (splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) !== "side") && !drawers) {
      return 0;
    }
    if (selectedDrawer === null || selectedDrawer === void 0 ? void 0 : selectedDrawer.resizable) {
      return drawerSize;
    }
    if (toolsOpen || activeDrawerId) {
      return toolsWidth;
    }
    return closedDrawerWidth;
  };
  const effectiveToolsWidth = getEffectiveToolsWidth();
  const defaultSplitPanelSize = getSplitPanelDefaultSize(splitPanelPosition);
  const [splitPanelSize = defaultSplitPanelSize, setSplitPanelSize] = useControllable(controlledSplitPanelSize, onSplitPanelResize, defaultSplitPanelSize, {
    componentName: "AppLayout",
    controlledProp: "splitPanelSize",
    changeHandler: "onSplitPanelResize"
  });
  const mainContentRef = (0, import_react34.useRef)(null);
  const legacyScrollRootRef = (0, import_react34.useRef)(null);
  const { refs: splitPanelRefs, setLastInteraction: setSplitPanelLastInteraction } = useSplitPanelFocusControl([
    splitPanelPreferences,
    splitPanelOpen
  ]);
  const onSplitPanelPreferencesSet = (0, import_react34.useCallback)((detail) => {
    setSplitPanelPreferences(detail);
    setSplitPanelLastInteraction({ type: "position" });
    fireNonCancelableEvent(onSplitPanelPreferencesChange, detail);
  }, [setSplitPanelPreferences, onSplitPanelPreferencesChange, setSplitPanelLastInteraction]);
  const onSplitPanelSizeSet = (0, import_react34.useCallback)((detail) => {
    setSplitPanelSize(detail.size);
    fireNonCancelableEvent(onSplitPanelResize, detail);
  }, [setSplitPanelSize, onSplitPanelResize]);
  const onSplitPanelToggleHandler = (0, import_react34.useCallback)(() => {
    setSplitPanelOpen(!splitPanelOpen);
    setSplitPanelLastInteraction({ type: splitPanelOpen ? "close" : "open" });
    fireNonCancelableEvent(onSplitPanelToggle, { open: !splitPanelOpen });
  }, [setSplitPanelOpen, splitPanelOpen, onSplitPanelToggle, setSplitPanelLastInteraction]);
  const getSplitPanelMaxWidth = useStableEventHandler(() => {
    if (!mainContentRef.current || !defaults2.minContentWidth) {
      return NaN;
    }
    const width = parseInt(getComputedStyle(mainContentRef.current).width);
    const contentPadding = disableContentPaddings ? 80 : 0;
    const spaceAvailable = width - defaults2.minContentWidth - contentPadding;
    const spaceTaken = finalSplitPanePosition === "side" ? splitPanelSize : 0;
    return Math.max(0, spaceTaken + spaceAvailable);
  });
  const getDrawerMaxWidth = useStableEventHandler(() => {
    if (!mainContentRef.current || !defaults2.minContentWidth) {
      return NaN;
    }
    const width = parseInt(getComputedStyle(mainContentRef.current).width || `${drawerSize}`);
    const contentPadding = disableContentPaddings ? 80 : 0;
    const spaceAvailable = width - defaults2.minContentWidth - contentPadding;
    const spaceTaken = drawerSize;
    return Math.max(0, spaceTaken + spaceAvailable);
  });
  const getSplitPanelMaxHeight = useStableEventHandler(() => {
    if (typeof document === "undefined") {
      return 0;
    } else if (disableBodyScroll && legacyScrollRootRef.current) {
      const availableHeight = legacyScrollRootRef.current.clientHeight;
      return availableHeight < CONSTRAINED_PAGE_HEIGHT ? availableHeight : availableHeight - MAIN_PANEL_MIN_HEIGHT;
    } else {
      const availableHeight = document.documentElement.clientHeight - headerHeight - footerHeight;
      return availableHeight < CONSTRAINED_PAGE_HEIGHT ? availableHeight - CONSTRAINED_MAIN_PANEL_MIN_HEIGHT : availableHeight - MAIN_PANEL_MIN_HEIGHT;
    }
  });
  const finalSplitPanePosition = isSplitpanelForcedPosition ? "bottom" : splitPanelPosition;
  const splitPaneAvailableOnTheSide = splitPanelDisplayed && finalSplitPanePosition === "side";
  const splitPanelOpenOnTheSide = splitPaneAvailableOnTheSide && splitPanelOpen;
  const toggleButtonsBarWidth = 0;
  const windowWidth = useWindowWidth();
  const { left: leftOffset, right: rightOffset } = useAppLayoutOffsets(rootRef.current);
  const contentWidthWithSplitPanel = windowWidth - leftOffset - rightOffset - effectiveToolsWidth - effectiveNavigationWidth - (disableContentPaddings ? 0 : toggleButtonsBarWidth);
  (0, import_react34.useEffect)(() => {
    const contentWidth = contentWidthWithSplitPanel - splitPanelSize;
    setIsSplitpanelForcedPosition(isMobile || (defaults2.minContentWidth || 0) > contentWidth);
    setIsResizeInvalid(isMobile || (defaults2.minContentWidth || 0) > contentWidthWithSplitPanel);
  }, [contentWidthWithSplitPanel, drawerSize, defaults2.minContentWidth, isMobile]);
  const navigationClosedWidth = navigationHide || isMobile ? 0 : closedDrawerWidth;
  const toolsClosedWidth = toolsHide || isMobile || !hasDrawers && toolsHide ? 0 : closedDrawerWidth;
  const contentMaxWidthStyle = !isMobile ? { maxWidth: defaults2.maxContentWidth } : void 0;
  const [splitPanelReportedSize, setSplitPanelReportedSize] = (0, import_react34.useState)(0);
  const [splitPanelReportedHeaderHeight, setSplitPanelReportedHeaderHeight] = (0, import_react34.useState)(0);
  const getSplitPanelRightOffset = () => {
    if (isMobile) {
      return 0;
    }
    if (hasDrawers) {
      if (activeDrawerId) {
        if (!isResizeInvalid && drawerSize) {
          return drawerSize + closedDrawerWidth;
        }
        return toolsWidth + closedDrawerWidth;
      }
      return closedDrawerWidth;
    }
    if (!toolsHide && toolsOpen) {
      return toolsWidth;
    }
    return toolsClosedWidth;
  };
  const splitPanelContext = {
    topOffset: headerHeight + (finalSplitPanePosition === "bottom" ? stickyNotificationsHeight || 0 : 0),
    bottomOffset: footerHeight,
    leftOffset: leftOffset + (isMobile ? 0 : !navigationHide && navigationOpen ? navigationWidth : navigationClosedWidth),
    rightOffset: rightOffset + getSplitPanelRightOffset(),
    position: finalSplitPanePosition,
    size: splitPanelSize,
    getMaxWidth: getSplitPanelMaxWidth,
    getMaxHeight: getSplitPanelMaxHeight,
    disableContentPaddings,
    contentWidthStyles: contentMaxWidthStyle,
    isOpen: splitPanelOpen,
    isMobile,
    isForcedPosition: isSplitpanelForcedPosition,
    onResize: onSplitPanelSizeSet,
    onToggle: onSplitPanelToggleHandler,
    onPreferencesChange: onSplitPanelPreferencesSet,
    setSplitPanelToggle: setSplitPanelReportedToggle,
    reportSize: setSplitPanelReportedSize,
    reportHeaderHeight: setSplitPanelReportedHeaderHeight,
    refs: splitPanelRefs
  };
  const splitPanelWrapped = splitPanel && import_react34.default.createElement(SplitPanelContextProvider, { value: splitPanelContext }, splitPanel);
  const contentWrapperProps = {
    contentType,
    navigationPadding: navigationHide || !!navigationOpen,
    contentWidthStyles: !isMobile ? { minWidth: defaults2.minContentWidth, maxWidth: defaults2.maxContentWidth } : void 0,
    toolsPadding: toolsHide || hasDrawers && !activeDrawerId && (!splitPanelDisplayed || finalSplitPanePosition !== "side") || toolsVisible || splitPanelOpenOnTheSide,
    isMobile
  };
  (0, import_react34.useImperativeHandle)(ref, () => ({
    openTools: () => onToolsToggle(true),
    closeNavigationIfNecessary: () => {
      if (isMobile) {
        onNavigationToggle(false);
      }
    },
    focusToolsClose: () => focusToolsButtons(true)
  }), [isMobile, onNavigationToggle, onToolsToggle, focusToolsButtons]);
  const splitPanelBottomOffset = (_c = !splitPanelDisplayed || finalSplitPanePosition !== "bottom" ? void 0 : splitPanelOpen ? splitPanelReportedSize : splitPanelReportedHeaderHeight) !== null && _c !== void 0 ? _c : void 0;
  const [mobileBarHeight, mobileBarRef] = useContainerQuery((rect) => rect.height);
  return import_react34.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default4.root, styles_css_default5.root, disableBodyScroll && styles_css_default4["root-no-scroll"]), ref: rootRef },
    import_react34.default.createElement(
      "div",
      { className: styles_css_default4["layout-wrapper"], style: contentHeightStyle },
      isMobile && (!toolsHide || !navigationHide || breadcrumbs) && import_react34.default.createElement(MobileToolbar, { anyPanelOpen, toggleRefs: { navigation: navigationRefs.toggle, tools: toolsRefs.toggle }, topOffset: headerHeight, ariaLabels, navigationHide, toolsHide, onNavigationOpen: () => onNavigationToggle(true), onToolsOpen: () => onToolsToggle(true), unfocusable: anyPanelOpen, mobileBarRef, drawers: drawers ? {
        items: tools && !toolsHide ? [toolsItem, ...drawers.items] : drawers.items,
        activeDrawerId: selectedDrawer === null || selectedDrawer === void 0 ? void 0 : selectedDrawer.id,
        onChange: (changeDetail) => {
          if ((selectedDrawer === null || selectedDrawer === void 0 ? void 0 : selectedDrawer.id) !== changeDetail.activeDrawerId) {
            onToolsToggle(changeDetail.activeDrawerId === "tools");
            focusDrawersButtons();
            setActiveDrawerId(changeDetail.activeDrawerId);
            setDrawerLastInteraction({ type: "open" });
            fireNonCancelableEvent(drawers.onChange, changeDetail.activeDrawerId);
          }
        },
        ariaLabel: drawers.ariaLabel
      } : void 0 }, breadcrumbs),
      import_react34.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default4.layout, disableBodyScroll && styles_css_default4["layout-no-scroll"]) },
        !navigationHide && import_react34.default.createElement(Drawer, { contentClassName: styles_css_default5.navigation, toggleClassName: styles_css_default5["navigation-toggle"], closeClassName: styles_css_default5["navigation-close"], ariaLabels, bottomOffset: footerHeight, topOffset: headerHeight, isMobile, isOpen: navigationOpen, onClick: isMobile ? onNavigationClick : void 0, onToggle: onNavigationToggle, toggleRefs: navigationRefs, type: "navigation", width: navigationWidth }, navigation),
        import_react34.default.createElement(
          "main",
          { ref: legacyScrollRootRef, className: clsx_m_default(styles_css_default4["layout-main"], {
            [styles_css_default4["layout-main-scrollable"]]: disableBodyScroll,
            [styles_css_default5["disable-body-scroll-root"]]: disableBodyScroll,
            [styles_css_default4.unfocusable]: isMobile && anyPanelOpen
          }) },
          import_react34.default.createElement(
            "div",
            { style: {
              marginBottom: splitPanelBottomOffset
            } },
            notifications && import_react34.default.createElement(Notifications, { disableContentPaddings, testUtilsClassName: styles_css_default5.notifications, labels: ariaLabels, topOffset: disableBodyScroll ? 0 : headerHeight, sticky: !isMobile && stickyNotifications, ref: notificationsRef }, notifications),
            (!isMobile && breadcrumbs || contentHeader) && import_react34.default.createElement(
              content_wrapper_default,
              Object.assign({}, contentWrapperProps),
              !isMobile && breadcrumbs && import_react34.default.createElement("div", { className: clsx_m_default(styles_css_default5.breadcrumbs, styles_css_default4["breadcrumbs-desktop"]) }, breadcrumbs),
              contentHeader && import_react34.default.createElement("div", { className: clsx_m_default(styles_css_default4["content-header-wrapper"], !hasRenderedNotifications && (isMobile || !breadcrumbs) && styles_css_default4["content-extra-top-padding"], !hasRenderedNotifications && !breadcrumbs && styles_css_default4["content-header-wrapper-first-child"], !disableContentHeaderOverlap && styles_css_default4["content-header-wrapper-overlapped"]) }, contentHeader)
            ),
            import_react34.default.createElement(
              content_wrapper_default,
              Object.assign({}, contentWrapperProps, {
                ref: mainContentRef,
                disablePaddings: disableContentPaddings,
                className: clsx_m_default(!disableContentPaddings && styles_css_default4["content-wrapper"], !disableContentPaddings && (isMobile || !breadcrumbs) && !contentHeader && styles_css_default4["content-extra-top-padding"], styles_css_default5.content, !disableContentHeaderOverlap && contentHeader && styles_css_default4["content-overlapped"], !hasRenderedNotifications && !breadcrumbs && !isMobile && !contentHeader && styles_css_default4["content-wrapper-first-child"])
              }),
              import_react34.default.createElement(AppLayoutContext.Provider, { value: {
                stickyOffsetTop: (disableBodyScroll ? isMobile ? -9999 : 0 : headerHeight) + (isMobile ? 0 : stickyNotificationsHeight !== null ? stickyNotificationsHeight : 0),
                stickyOffsetBottom: footerHeight + (splitPanelBottomOffset || 0),
                mobileBarHeight: mobileBarHeight !== null && mobileBarHeight !== void 0 ? mobileBarHeight : 0
              } }, content)
            )
          ),
          finalSplitPanePosition === "bottom" && splitPanelWrapped
        ),
        finalSplitPanePosition === "side" && import_react34.default.createElement(SideSplitPanelDrawer, { topOffset: headerHeight, bottomOffset: footerHeight, displayed: splitPanelDisplayed, width: splitPanelOpen && splitPanel ? splitPanelSize : void 0 }, splitPanelWrapped),
        (hasDrawers && (selectedDrawer === null || selectedDrawer === void 0 ? void 0 : selectedDrawer.id) || !hasDrawers && !toolsHide) && (hasDrawers ? import_react34.default.createElement(ResizableDrawer, { contentClassName: (selectedDrawer === null || selectedDrawer === void 0 ? void 0 : selectedDrawer.id) === "tools" ? styles_css_default5.tools : styles_css_default5["active-drawer"], toggleClassName: styles_css_default5["tools-toggle"], closeClassName: (selectedDrawer === null || selectedDrawer === void 0 ? void 0 : selectedDrawer.id) === "tools" ? styles_css_default5["tools-close"] : styles_css_default5["active-drawer-close-button"], ariaLabels, drawersAriaLabels: selectedDrawer === null || selectedDrawer === void 0 ? void 0 : selectedDrawer.ariaLabels, width: !isResizeInvalid ? drawerSize : toolsWidth, bottomOffset: footerHeight, topOffset: headerHeight, isMobile, onToggle: onToolsToggle, isOpen: toolsOpen || activeDrawerId !== void 0, toggleRefs: toolsRefs, type: "tools", onLoseFocus: hasDrawers ? loseDrawersFocus : loseToolsFocus, activeDrawer: selectedDrawer, drawers: {
          items: tools && !toolsHide ? [toolsItem, ...drawers.items] : drawers.items,
          activeDrawerId: selectedDrawer === null || selectedDrawer === void 0 ? void 0 : selectedDrawer.id,
          onChange: (changeDetail) => {
            onToolsToggle(false);
            setDrawerLastInteraction({ type: "close" });
            setActiveDrawerId(changeDetail.activeDrawerId);
            fireNonCancelableEvent(drawers.onChange, changeDetail.activeDrawerId);
          }
        }, size: !isResizeInvalid ? drawerSize : toolsWidth, onResize: (changeDetail) => {
          fireNonCancelableEvent(drawers.onResize, changeDetail);
          const drawerItem = drawerItems.find(({ id }) => id === changeDetail.id);
          if (drawerItem === null || drawerItem === void 0 ? void 0 : drawerItem.onResize) {
            fireNonCancelableEvent(drawerItem.onResize, changeDetail);
          }
          setDrawerSizes(Object.assign(Object.assign({}, drawerSizes), { [changeDetail.id]: changeDetail.size }));
        }, refs: drawerRefs, getMaxWidth: getDrawerMaxWidth }, selectedDrawer === null || selectedDrawer === void 0 ? void 0 : selectedDrawer.content) : import_react34.default.createElement(Drawer, { contentClassName: styles_css_default5.tools, toggleClassName: styles_css_default5["tools-toggle"], closeClassName: styles_css_default5["tools-close"], ariaLabels, width: effectiveToolsWidth, bottomOffset: footerHeight, topOffset: headerHeight, isMobile, onToggle: onToolsToggle, isOpen: toolsOpen, toggleRefs: toolsRefs, type: "tools", onLoseFocus: loseToolsFocus }, tools)),
        hasDrawers && import_react34.default.createElement(DrawerTriggersBar, { contentClassName: styles_css_default5["drawers-desktop-triggers-container"], toggleClassName: styles_css_default5["drawers-trigger"], bottomOffset: footerHeight, topOffset: headerHeight, isMobile, drawers: {
          items: tools && !toolsHide ? [toolsItem, ...drawers.items] : drawers.items,
          activeDrawerId: selectedDrawer === null || selectedDrawer === void 0 ? void 0 : selectedDrawer.id,
          onChange: (changeDetail) => {
            if ((selectedDrawer === null || selectedDrawer === void 0 ? void 0 : selectedDrawer.id) !== changeDetail.activeDrawerId) {
              onToolsToggle(changeDetail.activeDrawerId === "tools");
              focusDrawersButtons();
              setActiveDrawerId(changeDetail.activeDrawerId);
              setDrawerLastInteraction({ type: "open" });
              fireNonCancelableEvent(drawers.onChange, changeDetail.activeDrawerId);
            }
          },
          ariaLabel: drawers.ariaLabel
        } })
      )
    )
  );
});
applyDisplayName(AppLayout2, "AppLayout");
var app_layout_default = AppLayout2;

export {
  useSplitPanelContext,
  getLimitedValue,
  usePointerEvents,
  useKeyboardEvents,
  resize_handler_default,
  styles_css_default8 as styles_css_default,
  app_layout_default
};
//# sourceMappingURL=chunk-S537OJO3.js.map

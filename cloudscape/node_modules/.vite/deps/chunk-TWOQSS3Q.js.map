{
  "version": 3,
  "sources": ["../../@cloudscape-design/components/internal/components/transition/internal/components/transition/index.tsx"],
  "sourcesContent": ["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useState } from 'react';\nimport { MutableRefObject, useCallback, useRef } from 'react';\nimport {\n  Transition as ReactTransitionGroupTransition,\n  TransitionStatus as ReactTransitionGroupTransitionStatus,\n} from 'react-transition-group';\nimport { useReducedMotion } from '../../hooks/use-visual-mode';\n\nexport type TransitionStatus = ReactTransitionGroupTransitionStatus | 'enter' | 'exit';\n\nexport interface TransitionProps {\n  in: boolean;\n  exit?: boolean;\n\n  disabled?: boolean;\n\n  children: (state: TransitionStatus, transitioningElementRef: MutableRefObject<any>) => React.ReactNode;\n  onStatusChange?: (status: TransitionStatus) => void;\n  transitionChangeDelay?: { entering?: number };\n}\n\n/**\n * This component is a wrapper around the CSSTransition component.\n *\n * It provides a second parameter in its rendering function that must be\n * attached to the node that is transitioning.\n */\nexport function Transition({\n  in: isIn,\n  children,\n  exit = true,\n  onStatusChange = () => void 0,\n  disabled = false,\n  transitionChangeDelay,\n  ...rest\n}: TransitionProps) {\n  const transitionRootElement = useRef<HTMLElement>(null);\n  // the initial state of the transition should be either 'exited' or 'entered' depending\n  // on the `in` property, this mimicks how internally the Transition component works here:\n  // https://github.com/reactjs/react-transition-group/blob/6cbd6aaedaf8e9472007640b429ddb48c6c24158/src/Transition.js#L121\n  const [transitionState, setTransitionState] = useState<TransitionStatus>(isIn ? 'entered' : 'exited');\n  const motionDisabled = useReducedMotion(transitionRootElement) || disabled;\n\n  const addTransitionEndListener = useCallback((done: () => void) => {\n    const node = transitionRootElement.current;\n\n    if (node === null) {\n      return;\n    }\n    const listener = (e: TransitionEvent | AnimationEvent) => {\n      if (e.target === node) {\n        node.removeEventListener('transitionend', listener);\n        node.removeEventListener('animationend', listener);\n        done();\n      }\n    };\n    node.addEventListener('transitionend', listener);\n    node.addEventListener('animationend', listener);\n  }, []);\n\n  return (\n    <ReactTransitionGroupTransition\n      addEndListener={addTransitionEndListener}\n      timeout={motionDisabled ? 0 : undefined}\n      in={isIn}\n      nodeRef={transitionRootElement}\n      exit={exit}\n      onEnter={isAppearing => {\n        if (!isAppearing) {\n          setTransitionState('enter');\n          onStatusChange('enter');\n        }\n      }}\n      onEntering={isAppearing => {\n        if (!isAppearing) {\n          // This line forces the browser to recalculate the layout because we want the starting state in the 'enter' style\n          // to be applied before the animation starts.\n          void transitionRootElement.current?.offsetHeight;\n\n          if (transitionChangeDelay?.entering) {\n            setTimeout(() => {\n              setTransitionState('entering');\n              onStatusChange('entering');\n            }, transitionChangeDelay?.entering);\n          } else {\n            setTransitionState('entering');\n            onStatusChange('entering');\n          }\n        }\n      }}\n      onEntered={isAppearing => {\n        if (!isAppearing) {\n          setTransitionState('entered');\n          onStatusChange('entered');\n        }\n      }}\n      onExit={() => {\n        setTransitionState('exit');\n        onStatusChange('exit');\n      }}\n      onExiting={() => {\n        setTransitionState('exiting');\n        onStatusChange('exiting');\n      }}\n      onExited={() => {\n        setTransitionState('exited');\n        onStatusChange('exited');\n      }}\n      {...rest}\n    >\n      {() => children(transitionState, transitionRootElement)}\n    </ReactTransitionGroupTransition>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;AAEA,mBAAgC;AAChC,IAAAA,gBAAsD;AA0BhD,SAAU,WAAW,IAQT;MARS,EACzB,IAAI,MACJ,UACA,OAAO,MACP,iBAAiB,MAAM,QACvB,WAAW,OACX,sBAAqB,IAAA,IAClB,OAAI,OAAA,IAPkB,CAAA,MAAA,YAAA,QAAA,kBAAA,YAAA,uBAAA,CAQ1B;AACC,QAAM,4BAAwB,sBAAoB,IAAI;AAItD,QAAM,CAAC,iBAAiB,kBAAkB,QAAI,uBAA2B,OAAO,YAAY,QAAQ;AACpG,QAAM,iBAAiB,iBAAiB,qBAAqB,KAAK;AAElE,QAAM,+BAA2B,2BAAY,CAAC,SAAoB;AAChE,UAAM,OAAO,sBAAsB;AAEnC,QAAI,SAAS,MAAM;AACjB;;AAEF,UAAM,WAAW,CAAC,MAAuC;AACvD,UAAI,EAAE,WAAW,MAAM;AACrB,aAAK,oBAAoB,iBAAiB,QAAQ;AAClD,aAAK,oBAAoB,gBAAgB,QAAQ;AACjD,aAAI;;IAER;AACA,SAAK,iBAAiB,iBAAiB,QAAQ;AAC/C,SAAK,iBAAiB,gBAAgB,QAAQ;EAChD,GAAG,CAAA,CAAE;AAEL,SACE,aAAAC,QAAA,cAAC,oBAA8B,OAAA,OAAA,EAC7B,gBAAgB,0BAChB,SAAS,iBAAiB,IAAI,QAC9B,IAAI,MACJ,SAAS,uBACT,MACA,SAAS,iBAAc;AACrB,QAAI,CAAC,aAAa;AAChB,yBAAmB,OAAO;AAC1B,qBAAe,OAAO;;EAE1B,GACA,YAAY,iBAAc;;AACxB,QAAI,CAAC,aAAa;AAGhB,aAAKC,MAAA,sBAAsB,aAAO,QAAAA,QAAA,SAAA,SAAAA,IAAE;AAEpC,UAAI,0BAAqB,QAArB,0BAAqB,SAAA,SAArB,sBAAuB,UAAU;AACnC,mBAAW,MAAK;AACd,6BAAmB,UAAU;AAC7B,yBAAe,UAAU;QAC3B,GAAG,0BAAqB,QAArB,0BAAqB,SAAA,SAArB,sBAAuB,QAAQ;aAC7B;AACL,2BAAmB,UAAU;AAC7B,uBAAe,UAAU;;;EAG/B,GACA,WAAW,iBAAc;AACvB,QAAI,CAAC,aAAa;AAChB,yBAAmB,SAAS;AAC5B,qBAAe,SAAS;;EAE5B,GACA,QAAQ,MAAK;AACX,uBAAmB,MAAM;AACzB,mBAAe,MAAM;EACvB,GACA,WAAW,MAAK;AACd,uBAAmB,SAAS;AAC5B,mBAAe,SAAS;EAC1B,GACA,UAAU,MAAK;AACb,uBAAmB,QAAQ;AAC3B,mBAAe,QAAQ;EACzB,EAAC,GACG,IAAI,GAEP,MAAM,SAAS,iBAAiB,qBAAqB,CAAC;AAG7D;",
  "names": ["import_react", "React", "_a"]
}

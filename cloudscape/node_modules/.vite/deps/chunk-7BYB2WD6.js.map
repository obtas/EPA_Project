{
  "version": 3,
  "sources": ["../../@cloudscape-design/components/internal/hooks/use-dynamic-overlap/internal/hooks/use-dynamic-overlap/index.ts"],
  "sourcesContent": ["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useContext, useLayoutEffect } from 'react';\n\nimport { DynamicOverlapContext } from '../../context/dynamic-overlap-context';\nimport { useContainerQuery } from '../container-queries';\n\nexport interface UseDynamicOverlapProps {\n  /**\n   * Disables hook if not needed. By default, `false`.\n   */\n  disabled?: boolean;\n}\n\n/**\n * Observes the height of an element referenced by the returning ref and sets the value as overlapping\n * height for the surrounding AppLayout component.\n * @param props.disabled disables hook if not applicable\n * @returns ref to be measured as overlapping height\n */\nexport function useDynamicOverlap(props?: UseDynamicOverlapProps) {\n  const disabled = props?.disabled ?? false;\n  const setDynamicOverlapHeight = useContext(DynamicOverlapContext);\n  const [overlapHeight, overlapElementRef] = useContainerQuery(rect => rect.height);\n\n  useLayoutEffect(\n    function handleDynamicOverlapHeight() {\n      if (!disabled) {\n        setDynamicOverlapHeight(overlapHeight ?? 0);\n      }\n\n      return () => {\n        if (!disabled) {\n          setDynamicOverlapHeight(0);\n        }\n      };\n    },\n    [disabled, overlapHeight, setDynamicOverlapHeight]\n  );\n\n  return overlapElementRef;\n}\n"],
  "mappings": ";;;;;;;;;;;;AAEA,mBAA4C;AAkBtC,SAAU,kBAAkB,OAA8B;;AAC9D,QAAM,YAAW,KAAA,UAAK,QAAL,UAAK,SAAA,SAAL,MAAO,cAAQ,QAAA,OAAA,SAAA,KAAI;AACpC,QAAM,8BAA0B,yBAAW,qBAAqB;AAChE,QAAM,CAAC,eAAe,iBAAiB,IAAI,kBAAkB,UAAQ,KAAK,MAAM;AAEhF,oCACE,SAAS,6BAA0B;AACjC,QAAI,CAAC,UAAU;AACb,8BAAwB,kBAAa,QAAb,kBAAa,SAAb,gBAAiB,CAAC;;AAG5C,WAAO,MAAK;AACV,UAAI,CAAC,UAAU;AACb,gCAAwB,CAAC;;IAE7B;EACF,GACA,CAAC,UAAU,eAAe,uBAAuB,CAAC;AAGpD,SAAO;AACT;",
  "names": []
}

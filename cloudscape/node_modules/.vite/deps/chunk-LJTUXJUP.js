// node_modules/@cloudscape-design/components/internal/utils/scrollable-containers.js
var getOverflowParents = (element) => {
  const parents = [];
  let node = element;
  while ((node = node.parentElement) && node !== document.body) {
    getComputedStyle(node).overflow !== "visible" && parents.push(node);
  }
  return parents;
};
var getOverflowParentDimensions = (element, excludeClosestParent = false, expandToViewport = false, canExpandOutsideViewport = false) => {
  const parents = expandToViewport ? [] : getOverflowParents(element).map((el) => {
    const { height, width, top, left } = el.getBoundingClientRect();
    return {
      height: canExpandOutsideViewport ? el.scrollHeight : height,
      width,
      top,
      left
    };
  });
  if (canExpandOutsideViewport && !expandToViewport) {
    const documentDimensions = document.documentElement.getBoundingClientRect();
    parents.push({
      width: Math.max(documentDimensions.width, document.documentElement.clientWidth),
      height: Math.max(documentDimensions.height, document.documentElement.clientHeight),
      top: documentDimensions.top,
      left: documentDimensions.left
    });
  } else {
    parents.push({
      height: window.innerHeight,
      width: window.innerWidth,
      top: 0,
      left: 0
    });
  }
  if (excludeClosestParent && !expandToViewport) {
    parents.shift();
  }
  return parents;
};
function scrollElementIntoView(element, options = { block: "nearest", inline: "nearest" }) {
  var _a;
  (_a = element === null || element === void 0 ? void 0 : element.scrollIntoView) === null || _a === void 0 ? void 0 : _a.call(element, options);
}

export {
  getOverflowParents,
  getOverflowParentDimensions,
  scrollElementIntoView
};
//# sourceMappingURL=chunk-LJTUXJUP.js.map

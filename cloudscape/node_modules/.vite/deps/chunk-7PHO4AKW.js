import {
  FormFieldContext,
  useFormFieldContext
} from "./chunk-SLVYPT42.js";
import {
  internal_default as internal_default2
} from "./chunk-FIRMH2RI.js";
import {
  joinStrings
} from "./chunk-IXOWUQJP.js";
import {
  InfoLinkLabelContext
} from "./chunk-YTKRNNDQ.js";
import {
  useInternalI18n
} from "./chunk-VOJM65QS.js";
import {
  useUniqueId
} from "./chunk-ZOQJCCJI.js";
import {
  internal_default
} from "./chunk-CRWXG7GH.js";
import {
  FunnelMetrics,
  useFunnel,
  useFunnelSubStep
} from "./chunk-7FZ3ZYD3.js";
import {
  DATA_ATTR_FIELD_ERROR,
  DATA_ATTR_FIELD_LABEL,
  getFieldSlotSeletor,
  getNameFromSelector,
  getSubStepAllSelector
} from "./chunk-AX3SE4VV.js";
import {
  __rest,
  clsx_m_default,
  getBaseProps,
  useVisualRefresh
} from "./chunk-BATVD76T.js";
import {
  __toESM,
  require_react
} from "./chunk-C3URVCCN.js";

// node_modules/@cloudscape-design/components/form-field/internal.js
var import_react = __toESM(require_react());

// node_modules/@cloudscape-design/components/form-field/util.js
function makeSlotId(prop, formFieldId, propName) {
  if (!prop) {
    return void 0;
  }
  return `${formFieldId}-${propName}`;
}
function getSlotIds(formFieldId, label, description, constraintText, errorText) {
  const ids = {
    label: makeSlotId(label, formFieldId, "label"),
    description: makeSlotId(description, formFieldId, "description"),
    constraint: makeSlotId(constraintText, formFieldId, "constraint"),
    error: makeSlotId(errorText, formFieldId, "error")
  };
  return ids;
}
function getAriaDescribedBy({ error, description, constraint }) {
  const describedByAttributes = [error, description, constraint].filter((e) => !!e);
  const describedBy = describedByAttributes.length ? describedByAttributes.join(" ") : void 0;
  return describedBy;
}
function getGridDefinition(stretch, secondaryControlPresent, isRefresh) {
  let columns;
  if (stretch) {
    columns = [{ colspan: 12 }, { colspan: 12 }];
  } else if (isRefresh) {
    columns = [{ colspan: { default: 12, xs: 8 } }, { colspan: { default: 12, xs: 4 } }];
  } else {
    columns = [{ colspan: { default: 12, xs: 9 } }, { colspan: { default: 12, xs: 3 } }];
  }
  if (!secondaryControlPresent) {
    return [columns[0]];
  }
  return columns;
}

// node_modules/@cloudscape-design/components/form-field/styles.css.js
import "/local/home/samilafo/final_epa_project/cloudscape_wrkshp/cloudscape-design-system-workshop/node_modules/@cloudscape-design/components/form-field/styles.scoped.css";
var styles_css_default = {
  "error-icon-shake-wrapper": "awsui_error-icon-shake-wrapper_14mhv_a78yj_97",
  "awsui-motion-shake-horizontally": "awsui_awsui-motion-shake-horizontally_14mhv_a78yj_1",
  "error-icon-scale-wrapper": "awsui_error-icon-scale-wrapper_14mhv_a78yj_124",
  "awsui-motion-scale-popup": "awsui_awsui-motion-scale-popup_14mhv_a78yj_1",
  "error": "awsui_error_14mhv_a78yj_97",
  "awsui-motion-fade-in-0": "awsui_awsui-motion-fade-in-0_14mhv_a78yj_1",
  "root": "awsui_root_14mhv_a78yj_168",
  "label": "awsui_label_14mhv_a78yj_182",
  "info": "awsui_info_14mhv_a78yj_195",
  "description": "awsui_description_14mhv_a78yj_200",
  "constraint": "awsui_constraint_14mhv_a78yj_201",
  "hints": "awsui_hints_14mhv_a78yj_208",
  "constraint-has-error": "awsui_constraint-has-error_14mhv_a78yj_209",
  "secondary-control": "awsui_secondary-control_14mhv_a78yj_213",
  "controls": "awsui_controls_14mhv_a78yj_217",
  "label-hidden": "awsui_label-hidden_14mhv_a78yj_217",
  "control": "awsui_control_14mhv_a78yj_217",
  "error__message": "awsui_error__message_14mhv_a78yj_236",
  "visually-hidden": "awsui_visually-hidden_14mhv_a78yj_240"
};

// node_modules/@cloudscape-design/components/form-field/internal.js
function FormFieldError({ id, children, errorIconAriaLabel }) {
  const i18n = useInternalI18n("form-field");
  return import_react.default.createElement(
    "div",
    { id, className: styles_css_default.error },
    import_react.default.createElement(
      "div",
      { className: styles_css_default["error-icon-shake-wrapper"] },
      import_react.default.createElement(
        "div",
        { role: "img", "aria-label": i18n("i18nStrings.errorIconAriaLabel", errorIconAriaLabel), className: styles_css_default["error-icon-scale-wrapper"] },
        import_react.default.createElement(internal_default, { name: "status-warning", size: "small" })
      )
    ),
    import_react.default.createElement("span", { className: styles_css_default.error__message }, children)
  );
}
function ConstraintText({ id, hasError, children }) {
  return import_react.default.createElement("div", { id, className: clsx_m_default(styles_css_default.constraint, hasError && styles_css_default["constraint-has-error"]) }, children);
}
function InternalFormField(_a) {
  var { controlId, stretch = false, label, info, i18nStrings, children, secondaryControl, description, constraintText, errorText, __hideLabel, __internalRootRef = null, __disableGutters = false } = _a, rest = __rest(_a, ["controlId", "stretch", "label", "info", "i18nStrings", "children", "secondaryControl", "description", "constraintText", "errorText", "__hideLabel", "__internalRootRef", "__disableGutters"]);
  const baseProps = getBaseProps(rest);
  const isRefresh = useVisualRefresh();
  const instanceUniqueId = useUniqueId("formField");
  const generatedControlId = controlId || instanceUniqueId;
  const formFieldId = controlId || generatedControlId;
  const { funnelInteractionId, submissionAttempt, funnelState, errorCount } = useFunnel();
  const { stepNumber, stepNameSelector, subStepSelector, subStepNameSelector } = useFunnelSubStep();
  const slotIds = getSlotIds(formFieldId, label, description, constraintText, errorText);
  const ariaDescribedBy = getAriaDescribedBy(slotIds);
  const gridDefinition = getGridDefinition(stretch, !!secondaryControl, isRefresh);
  const { ariaLabelledby: parentAriaLabelledby, ariaDescribedby: parentAriaDescribedby, invalid: parentInvalid } = useFormFieldContext({});
  const contextValuesWithoutControlId = {
    ariaLabelledby: joinStrings(parentAriaLabelledby, slotIds.label) || void 0,
    ariaDescribedby: joinStrings(parentAriaDescribedby, ariaDescribedBy) || void 0,
    invalid: !!errorText || !!parentInvalid
  };
  const analyticsAttributes = {
    [DATA_ATTR_FIELD_LABEL]: slotIds.label ? getFieldSlotSeletor(slotIds.label) : void 0,
    [DATA_ATTR_FIELD_ERROR]: slotIds.error ? getFieldSlotSeletor(slotIds.error) : void 0
  };
  (0, import_react.useEffect)(() => {
    if (funnelInteractionId && errorText && funnelState.current !== "complete") {
      const stepName = getNameFromSelector(stepNameSelector);
      const subStepName = getNameFromSelector(subStepNameSelector);
      errorCount.current++;
      FunnelMetrics.funnelSubStepError({
        funnelInteractionId,
        subStepSelector,
        subStepName,
        subStepNameSelector,
        stepNumber,
        stepName,
        stepNameSelector,
        fieldErrorSelector: getFieldSlotSeletor(slotIds.error),
        fieldLabelSelector: getFieldSlotSeletor(slotIds.label),
        subStepAllSelector: getSubStepAllSelector()
      });
      return () => {
        errorCount.current--;
      };
    }
  }, [funnelInteractionId, errorText, submissionAttempt, errorCount]);
  return import_react.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default.root), ref: __internalRootRef }, analyticsAttributes),
    import_react.default.createElement(
      "div",
      { className: clsx_m_default(__hideLabel && styles_css_default["visually-hidden"]) },
      label && import_react.default.createElement("label", { className: styles_css_default.label, id: slotIds.label, htmlFor: generatedControlId }, label),
      import_react.default.createElement(InfoLinkLabelContext.Provider, { value: slotIds.label }, !__hideLabel && info && import_react.default.createElement("span", { className: styles_css_default.info }, info))
    ),
    description && import_react.default.createElement("div", { className: styles_css_default.description, id: slotIds.description }, description),
    import_react.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default.controls, __hideLabel && styles_css_default["label-hidden"]) },
      import_react.default.createElement(
        internal_default2,
        { gridDefinition, disableGutters: __disableGutters },
        import_react.default.createElement(FormFieldContext.Provider, { value: Object.assign({ controlId: generatedControlId }, contextValuesWithoutControlId) }, children && import_react.default.createElement("div", { className: styles_css_default.control }, children)),
        secondaryControl && import_react.default.createElement(
          FormFieldContext.Provider,
          { value: contextValuesWithoutControlId },
          import_react.default.createElement("div", { className: styles_css_default["secondary-control"] }, secondaryControl)
        )
      )
    ),
    (constraintText || errorText) && import_react.default.createElement(
      "div",
      { className: styles_css_default.hints },
      errorText && import_react.default.createElement(FormFieldError, { id: slotIds.error, errorIconAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorIconAriaLabel }, errorText),
      constraintText && import_react.default.createElement(ConstraintText, { id: slotIds.constraint, hasError: !!errorText }, constraintText)
    )
  );
}

export {
  FormFieldError,
  ConstraintText,
  InternalFormField
};
//# sourceMappingURL=chunk-7PHO4AKW.js.map

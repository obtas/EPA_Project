import {
  getOverflowParents
} from "./chunk-5PTPSAWI.js";
import {
  custom_css_properties_default,
  useAppLayoutContext
} from "./chunk-NABBUFNM.js";
import {
  useMobile
} from "./chunk-VAAYRRFE.js";
import {
  findUpUntil,
  supportsStickyPosition,
  useVisualRefresh
} from "./chunk-YXZ34YT5.js";
import {
  __toESM,
  require_react
} from "./chunk-C3URVCCN.js";

// node_modules/@cloudscape-design/components/container/use-sticky-header.js
var import_react = __toESM(require_react());
function computeOffset({ isMobile, isVisualRefresh, customCssProps, __stickyOffset, __mobileStickyOffset, mobileBarHeight = 0, stickyOffsetTop, hasInnerOverflowParents }) {
  const effectiveStickyOffset = __stickyOffset !== null && __stickyOffset !== void 0 ? __stickyOffset : hasInnerOverflowParents ? 0 : stickyOffsetTop;
  let computedOffset = `${effectiveStickyOffset}px`;
  if (isMobile) {
    const classicOffset = `${stickyOffsetTop + mobileBarHeight + (__stickyOffset !== null && __stickyOffset !== void 0 ? __stickyOffset : 0) - (__mobileStickyOffset !== null && __mobileStickyOffset !== void 0 ? __mobileStickyOffset : 0)}px`;
    const visualRefreshOffset = `calc(var(${customCssProps.offsetTop}, 0px) + var(${customCssProps.mobileBarHeight}, 0px) + ${(__stickyOffset !== null && __stickyOffset !== void 0 ? __stickyOffset : 0) - (__mobileStickyOffset !== null && __mobileStickyOffset !== void 0 ? __mobileStickyOffset : 0)}px)`;
    computedOffset = isVisualRefresh ? visualRefreshOffset : classicOffset;
  } else if (isVisualRefresh && !hasInnerOverflowParents) {
    computedOffset = `var(${customCssProps.offsetTopWithNotifications}, ${computedOffset})`;
  }
  return computedOffset;
}
var StickyHeaderContext = (0, import_react.createContext)({
  isStuck: false
});
var useStickyHeader = (rootRef, headerRef, __stickyHeader, __stickyOffset, __mobileStickyOffset, __disableMobile = true) => {
  const isMobile = useMobile();
  const { stickyOffsetTop, mobileBarHeight } = useAppLayoutContext();
  const disableSticky = isMobile && __disableMobile;
  const isSticky = supportsStickyPosition() && !disableSticky && !!__stickyHeader;
  const isVisualRefresh = useVisualRefresh();
  const [hasInnerOverflowParents, setHasInnerOverflowParents] = (0, import_react.useState)(false);
  const [isStuck, setIsStuck] = (0, import_react.useState)(false);
  (0, import_react.useLayoutEffect)(() => {
    if (rootRef.current) {
      const overflowParents = getOverflowParents(rootRef.current);
      const mainElement = findUpUntil(rootRef.current, (elem) => elem.tagName === "MAIN");
      setHasInnerOverflowParents(overflowParents.length > 0 && overflowParents[0] !== mainElement);
    }
  }, [rootRef]);
  const computedOffset = computeOffset({
    isMobile,
    isVisualRefresh,
    customCssProps: custom_css_properties_default,
    __stickyOffset,
    __mobileStickyOffset,
    mobileBarHeight,
    stickyOffsetTop,
    hasInnerOverflowParents
  });
  const stickyStyles = isSticky ? {
    style: {
      top: computedOffset
    }
  } : {};
  const checkIfStuck = (0, import_react.useCallback)(() => {
    if (rootRef.current && headerRef.current) {
      const rootTop = rootRef.current.getBoundingClientRect().top;
      const headerTop = headerRef.current.getBoundingClientRect().top;
      if (rootTop < headerTop) {
        setIsStuck(true);
      } else {
        setIsStuck(false);
      }
    }
  }, [rootRef, headerRef]);
  (0, import_react.useEffect)(() => {
    if (isSticky) {
      window.addEventListener("scroll", checkIfStuck, true);
      window.addEventListener("resize", checkIfStuck);
      return () => {
        window.removeEventListener("scroll", checkIfStuck, true);
        window.removeEventListener("resize", checkIfStuck);
      };
    }
  }, [isSticky, checkIfStuck]);
  return {
    isSticky,
    isStuck,
    stickyStyles
  };
};

export {
  StickyHeaderContext,
  useStickyHeader
};
//# sourceMappingURL=chunk-3ZST7P5D.js.map

import {
  browserScrollbarSize
} from "./chunk-MFOZ2YBE.js";
import {
  FormFieldContext
} from "./chunk-SLVYPT42.js";
import {
  InternalHeader
} from "./chunk-7534UZLX.js";
import {
  Portal
} from "./chunk-TM5SCOBX.js";
import {
  focus_lock_default
} from "./chunk-NUB4MB4Q.js";
import {
  InternalButton
} from "./chunk-WKOYGYGF.js";
import {
  useInternalI18n
} from "./chunk-VOJM65QS.js";
import {
  useUniqueId
} from "./chunk-ZOQJCCJI.js";
import {
  fireNonCancelableEvent
} from "./chunk-CTALK4OT.js";
import {
  useContainerBreakpoints,
  useContainerQuery
} from "./chunk-6QG3XHFW.js";
import {
  useMergeRefs
} from "./chunk-INN7TUPO.js";
import {
  KeyCode,
  __rest,
  clsx_m_default,
  getBaseProps,
  useVisualRefresh
} from "./chunk-BATVD76T.js";
import {
  __toESM,
  require_react
} from "./chunk-C3URVCCN.js";

// node_modules/@cloudscape-design/components/modal/internal.js
var import_react2 = __toESM(require_react());

// node_modules/@cloudscape-design/components/modal/styles.css.js
import "/local/home/samilafo/final_epa_project/cloudscape_wrkshp/cloudscape-design-system-workshop/node_modules/@cloudscape-design/components/modal/styles.scoped.css";
var styles_css_default = {
  "dialog": "awsui_dialog_1d2i7_k6v6r_105",
  "modal-slide-up": "awsui_modal-slide-up_1d2i7_k6v6r_1",
  "awsui-motion-fade-in-0": "awsui_awsui-motion-fade-in-0_1d2i7_k6v6r_1",
  "refresh": "awsui_refresh_1d2i7_k6v6r_128",
  "awsui-motion-scale-popup": "awsui_awsui-motion-scale-popup_1d2i7_k6v6r_1",
  "root": "awsui_root_1d2i7_k6v6r_161",
  "awsui-motion-fade-in": "awsui_awsui-motion-fade-in_1d2i7_k6v6r_1",
  "hidden": "awsui_hidden_1d2i7_k6v6r_226",
  "focus-lock": "awsui_focus-lock_1d2i7_k6v6r_230",
  "small": "awsui_small_1d2i7_k6v6r_248",
  "medium": "awsui_medium_1d2i7_k6v6r_251",
  "large": "awsui_large_1d2i7_k6v6r_254",
  "max": "awsui_max_1d2i7_k6v6r_257",
  "breakpoint-xs": "awsui_breakpoint-xs_1d2i7_k6v6r_257",
  "container": "awsui_container_1d2i7_k6v6r_262",
  "content": "awsui_content_1d2i7_k6v6r_281",
  "no-paddings": "awsui_no-paddings_1d2i7_k6v6r_284",
  "header": "awsui_header_1d2i7_k6v6r_288",
  "header--text": "awsui_header--text_1d2i7_k6v6r_295",
  "footer": "awsui_footer_1d2i7_k6v6r_299",
  "footer--stuck": "awsui_footer--stuck_1d2i7_k6v6r_307",
  "dismiss-control": "awsui_dismiss-control_1d2i7_k6v6r_316",
  "modal-open": "awsui_modal-open_1d2i7_k6v6r_320"
};

// node_modules/@cloudscape-design/components/modal/body-scroll.js
var initialBodyPaddingRightStyle = void 0;
function disableBodyScrolling() {
  setBodyScrollbarPadding();
  document.body.classList.add(styles_css_default["modal-open"]);
}
function enableBodyScrolling() {
  document.body.classList.remove(styles_css_default["modal-open"]);
  restoreBodyScrollbarPadding();
}
function setBodyScrollbarPadding() {
  if (bodyHasScrollbar()) {
    initialBodyPaddingRightStyle = document.body.style.paddingRight;
    const initialBodyPaddingRight = computedBodyPaddingRightPixels();
    const scrollbarWidth = browserScrollbarSize().width;
    const newBodyPaddingRight = initialBodyPaddingRight + scrollbarWidth;
    document.body.style.paddingRight = newBodyPaddingRight + "px";
  }
}
function computedBodyPaddingRightPixels() {
  return parseInt(window.getComputedStyle(document.body).paddingRight, 10);
}
function restoreBodyScrollbarPadding() {
  if (initialBodyPaddingRightStyle) {
    document.body.style.setProperty("padding-right", initialBodyPaddingRightStyle);
  } else {
    document.body.style.removeProperty("padding-right");
  }
  initialBodyPaddingRightStyle = void 0;
}
function bodyHasScrollbar() {
  return document.body.clientWidth < window.innerWidth;
}

// node_modules/@cloudscape-design/components/internal/hooks/use-intersection-observer/index.js
var import_react = __toESM(require_react());
function useIntersectionObserver() {
  const observerRef = (0, import_react.useRef)(null);
  const [isIntersecting, setIsIntersecting] = (0, import_react.useState)(false);
  const ref = (0, import_react.useCallback)((targetElement) => {
    if (typeof IntersectionObserver === "undefined") {
      return;
    }
    if (observerRef.current) {
      observerRef.current.disconnect();
    }
    if (targetElement) {
      observerRef.current = new IntersectionObserver(([entry]) => setIsIntersecting(entry.isIntersecting));
      observerRef.current.observe(targetElement);
    }
  }, []);
  return { ref, isIntersecting };
}

// node_modules/@cloudscape-design/components/modal/internal.js
function InternalModal(_a) {
  var { modalRoot } = _a, rest = __rest(_a, ["modalRoot"]);
  return import_react2.default.createElement(
    Portal,
    { container: modalRoot },
    import_react2.default.createElement(InnerModal, Object.assign({}, rest))
  );
}
function InnerModal(_a) {
  var { size, visible, header, children, footer, disableContentPaddings, onDismiss, __internalRootRef = null } = _a, rest = __rest(_a, ["size", "visible", "header", "children", "footer", "disableContentPaddings", "onDismiss", "__internalRootRef"]);
  const instanceUniqueId = useUniqueId();
  const headerId = `${rest.id || instanceUniqueId}-header`;
  const lastMouseDownElementRef = (0, import_react2.useRef)(null);
  const [breakpoint, breakpointsRef] = useContainerBreakpoints(["xs"]);
  const i18n = useInternalI18n("modal");
  const closeAriaLabel = i18n("closeAriaLabel", rest.closeAriaLabel);
  const refObject = (0, import_react2.useRef)(null);
  const mergedRef = useMergeRefs(breakpointsRef, refObject, __internalRootRef);
  const isRefresh = useVisualRefresh();
  const baseProps = getBaseProps(rest);
  (0, import_react2.useEffect)(() => {
    return () => {
      enableBodyScrolling();
    };
  }, []);
  (0, import_react2.useEffect)(() => {
    if (visible) {
      disableBodyScrolling();
    } else {
      enableBodyScrolling();
    }
  }, [visible]);
  (0, import_react2.useEffect)(() => {
    if (visible && refObject.current) {
      refObject.current.scrollTop = 0;
    }
  }, [visible]);
  const dismiss = (reason) => fireNonCancelableEvent(onDismiss, { reason });
  const onOverlayMouseDown = (event) => {
    lastMouseDownElementRef.current = event.target;
  };
  const onOverlayClick = (event) => {
    const overlay = refObject.current;
    const lastClicked = lastMouseDownElementRef.current;
    if (event.target === overlay && lastClicked === overlay) {
      dismiss("overlay");
    }
  };
  const onCloseButtonClick = () => dismiss("closeButton");
  const escKeyHandler = (event) => {
    if (event.keyCode === KeyCode.escape) {
      dismiss("keyboard");
    }
  };
  const { ref: stickySentinelRef, isIntersecting: footerStuck } = useIntersectionObserver();
  const [footerHeight, footerRef] = useContainerQuery((rect) => rect.borderBoxHeight);
  return import_react2.default.createElement(
    FormFieldContext.Provider,
    { value: {} },
    import_react2.default.createElement(
      "div",
      Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default.root, { [styles_css_default.hidden]: !visible }, baseProps.className, isRefresh && styles_css_default.refresh), role: "dialog", "aria-modal": true, "aria-labelledby": headerId, onMouseDown: onOverlayMouseDown, onClick: onOverlayClick, ref: mergedRef, style: footerHeight ? { scrollPaddingBottom: footerHeight } : void 0 }),
      import_react2.default.createElement(
        focus_lock_default,
        { disabled: !visible, autoFocus: true, restoreFocus: true, className: styles_css_default["focus-lock"] },
        import_react2.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default.dialog, styles_css_default[size], styles_css_default[`breakpoint-${breakpoint}`], isRefresh && styles_css_default.refresh), onKeyDown: escKeyHandler },
          import_react2.default.createElement(
            "div",
            { className: styles_css_default.container },
            import_react2.default.createElement(
              "div",
              { className: styles_css_default.header },
              import_react2.default.createElement(
                InternalHeader,
                { variant: "h2", __disableActionsWrapping: true, actions: import_react2.default.createElement(InternalButton, { ariaLabel: closeAriaLabel, className: styles_css_default["dismiss-control"], variant: "modal-dismiss", iconName: "close", formAction: "none", onClick: onCloseButtonClick }) },
                import_react2.default.createElement("span", { id: headerId, className: styles_css_default["header--text"] }, header)
              )
            ),
            import_react2.default.createElement(
              "div",
              { className: clsx_m_default(styles_css_default.content, { [styles_css_default["no-paddings"]]: disableContentPaddings }) },
              children,
              import_react2.default.createElement("div", { ref: stickySentinelRef })
            ),
            footer && import_react2.default.createElement("div", { ref: footerRef, className: clsx_m_default(styles_css_default.footer, footerStuck && styles_css_default["footer--stuck"]) }, footer)
          )
        )
      )
    )
  );
}

export {
  InternalModal
};
//# sourceMappingURL=chunk-JWLED7O4.js.map

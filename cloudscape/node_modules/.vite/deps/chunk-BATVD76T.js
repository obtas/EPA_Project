import {
  require_react_dom
} from "./chunk-XY35XOXX.js";
import {
  __commonJS,
  __toESM,
  require_react
} from "./chunk-C3URVCCN.js";

// node_modules/balanced-match/index.js
var require_balanced_match = __commonJS({
  "node_modules/balanced-match/index.js"(exports, module) {
    "use strict";
    module.exports = balanced2;
    function balanced2(a, b, str) {
      if (a instanceof RegExp)
        a = maybeMatch(a, str);
      if (b instanceof RegExp)
        b = maybeMatch(b, str);
      var r2 = range(a, b, str);
      return r2 && {
        start: r2[0],
        end: r2[1],
        pre: str.slice(0, r2[0]),
        body: str.slice(r2[0] + a.length, r2[1]),
        post: str.slice(r2[1] + b.length)
      };
    }
    function maybeMatch(reg, str) {
      var m = str.match(reg);
      return m ? m[0] : null;
    }
    balanced2.range = range;
    function range(a, b, str) {
      var begs, beg, left, right, result;
      var ai = str.indexOf(a);
      var bi = str.indexOf(b, ai + 1);
      var i = ai;
      if (ai >= 0 && bi > 0) {
        if (a === b) {
          return [ai, bi];
        }
        begs = [];
        left = str.length;
        while (i >= 0 && !result) {
          if (i == ai) {
            begs.push(i);
            ai = str.indexOf(a, i + 1);
          } else if (begs.length == 1) {
            result = [begs.pop(), bi];
          } else {
            beg = begs.pop();
            if (beg < left) {
              left = beg;
              right = bi;
            }
            bi = str.indexOf(b, i + 1);
          }
          i = ai < bi && ai >= 0 ? ai : bi;
        }
        if (begs.length) {
          result = [left, right];
        }
      }
      return result;
    }
  }
});

// node_modules/tslib/tslib.es6.js
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

// node_modules/@cloudscape-design/components/internal/utils/apply-display-name.js
function applyDisplayName(component, displayName) {
  component.displayName = displayName;
}

// node_modules/@cloudscape-design/component-toolkit/lib/internal/is-development.js
var isDevelopment = true;

// node_modules/@cloudscape-design/component-toolkit/lib/internal/logging.js
var messageCache = {};
function warnOnce(component, message) {
  if (isDevelopment) {
    var warning = "[AwsUi] [".concat(component, "] ").concat(message);
    if (!messageCache[warning]) {
      messageCache[warning] = true;
      console.warn(warning);
    }
  }
}

// node_modules/@cloudscape-design/component-toolkit/lib/internal/base-component/component-metadata.js
var import_react = __toESM(require_react());
var COMPONENT_METADATA_KEY = "__awsuiMetadata__";
function useComponentMetadata(componentName, packageVersion) {
  var elementRef = (0, import_react.useRef)(null);
  (0, import_react.useEffect)(function() {
    if (elementRef.current && !Object.prototype.hasOwnProperty.call(elementRef.current, COMPONENT_METADATA_KEY)) {
      var node = elementRef.current;
      var metadata = { name: componentName, version: packageVersion };
      Object.freeze(metadata);
      Object.defineProperty(node, COMPONENT_METADATA_KEY, { value: metadata, writable: false });
    }
  }, [elementRef.current]);
  return elementRef;
}

// node_modules/@cloudscape-design/component-toolkit/lib/internal/base-component/component-metrics.js
var import_react2 = __toESM(require_react());

// node_modules/@cloudscape-design/component-toolkit/lib/internal/base-component/metrics/log-clients.js
var CLogClient = function() {
  function CLogClient2() {
  }
  CLogClient2.prototype.sendMetric = function(metricName, value, detail) {
    if (!metricName || !/^[a-zA-Z0-9_-]{1,32}$/.test(metricName)) {
      console.error("Invalid metric name: ".concat(metricName));
      return;
    }
    if (detail && detail.length > 200) {
      console.error("Detail for metric ".concat(metricName, " is too long: ").concat(detail));
      return;
    }
    var AWSC = this.findAWSC(window);
    if (typeof AWSC === "object" && typeof AWSC.Clog === "object" && typeof AWSC.Clog.log === "function") {
      AWSC.Clog.log(metricName, value, detail);
    }
  };
  CLogClient2.prototype.findAWSC = function(currentWindow) {
    try {
      if (typeof (currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.AWSC) === "object") {
        return currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.AWSC;
      }
      if (!currentWindow || currentWindow.parent === currentWindow) {
        return void 0;
      }
      return this.findAWSC(currentWindow.parent);
    } catch (ex) {
      return void 0;
    }
  };
  return CLogClient2;
}();
var PanoramaClient = function() {
  function PanoramaClient2() {
  }
  PanoramaClient2.prototype.sendMetric = function(metric) {
    if (typeof metric.eventDetail === "object") {
      metric.eventDetail = JSON.stringify(metric.eventDetail);
    }
    if (metric.eventDetail && metric.eventDetail.length > 200) {
      console.error("Detail for metric is too long: ".concat(metric.eventDetail));
      return;
    }
    if (typeof metric.eventValue === "object") {
      metric.eventValue = JSON.stringify(metric.eventValue);
    }
    var panorama = this.findPanorama(window);
    if (typeof panorama === "function") {
      panorama("trackCustomEvent", __assign(__assign({}, metric), { timestamp: Date.now() }));
    }
  };
  PanoramaClient2.prototype.findPanorama = function(currentWindow) {
    try {
      if (typeof (currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.panorama) === "function") {
        return currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.panorama;
      }
      if (!currentWindow || currentWindow.parent === currentWindow) {
        return void 0;
      }
      return this.findPanorama(currentWindow.parent);
    } catch (ex) {
      return void 0;
    }
  };
  return PanoramaClient2;
}();

// node_modules/@cloudscape-design/component-toolkit/lib/internal/base-component/metrics/formatters.js
var framework = "react";
function buildMetricHash(_a) {
  var source = _a.source, action = _a.action;
  return ["src".concat(source), "action".concat(action)].join("_");
}
function buildMetricDetail(_a, theme2) {
  var source = _a.source, action = _a.action, version = _a.version;
  var metricOrigin = typeof AWSUI_METRIC_ORIGIN !== "undefined" ? AWSUI_METRIC_ORIGIN : "main";
  var detailObject = {
    o: metricOrigin,
    s: source,
    t: theme2,
    a: action,
    f: framework,
    v: formatMajorVersionForMetricDetail(version)
  };
  return JSON.stringify(detailObject);
}
function buildMetricName(_a, theme2) {
  var source = _a.source, version = _a.version;
  return ["awsui", source, "".concat(formatVersionForMetricName(theme2, version))].join("_");
}
function formatMajorVersionForMetricDetail(version) {
  return version.replace(/\s/g, "");
}
function formatVersionForMetricName(theme2, version) {
  return "".concat(theme2.charAt(0)).concat(getMajorVersion(version).replace(".", ""));
}
function getMajorVersion(versionString) {
  var majorVersionMatch = versionString.match(/^(\d+\.\d+)/);
  return majorVersionMatch ? majorVersionMatch[1] : "";
}

// node_modules/@cloudscape-design/component-toolkit/lib/internal/base-component/metrics/metrics.js
var oneTimeMetrics = {};
var theme = "";
function setTheme(newTheme) {
  theme = newTheme;
}
var Metrics = function() {
  function Metrics2(source, packageVersion) {
    this.clog = new CLogClient();
    this.panorama = new PanoramaClient();
    this.source = source;
    this.packageVersion = packageVersion;
  }
  Metrics2.prototype.initMetrics = function(theme2) {
    setTheme(theme2);
  };
  Metrics2.prototype.sendMetric = function(metricName, value, detail) {
    if (!theme) {
      console.error("Metrics need to be initialized first.");
      return;
    }
    this.clog.sendMetric(metricName, value, detail);
  };
  Metrics2.prototype.sendPanoramaMetric = function(metric) {
    this.panorama.sendMetric(metric);
  };
  Metrics2.prototype.sendMetricObject = function(metric, value) {
    this.sendMetric(buildMetricName(metric, theme), value, buildMetricDetail(metric, theme));
  };
  Metrics2.prototype.sendMetricObjectOnce = function(metric, value) {
    var metricHash = buildMetricHash(metric);
    if (!oneTimeMetrics[metricHash]) {
      this.sendMetricObject(metric, value);
      oneTimeMetrics[metricHash] = true;
    }
  };
  Metrics2.prototype.sendMetricOnce = function(metricName, value, detail) {
    if (!oneTimeMetrics[metricName]) {
      this.sendMetric(metricName, value, detail);
      oneTimeMetrics[metricName] = true;
    }
  };
  Metrics2.prototype.logComponentLoaded = function() {
    this.sendMetricObjectOnce({ source: this.source, action: "loaded", version: this.packageVersion }, 1);
  };
  Metrics2.prototype.logComponentUsed = function(componentName) {
    this.sendMetricObjectOnce({
      source: componentName,
      action: "used",
      version: this.packageVersion
    }, 1);
  };
  return Metrics2;
}();
var MetricsTestHelper = function() {
  function MetricsTestHelper2() {
  }
  MetricsTestHelper2.prototype.resetOneTimeMetricsCache = function() {
    for (var prop in oneTimeMetrics) {
      delete oneTimeMetrics[prop];
    }
  };
  return MetricsTestHelper2;
}();

// node_modules/@cloudscape-design/component-toolkit/lib/internal/base-component/component-metrics.js
function useComponentMetrics(componentName, _a) {
  var packageSource = _a.packageSource, packageVersion = _a.packageVersion, theme2 = _a.theme;
  (0, import_react2.useEffect)(function() {
    var metrics = new Metrics(packageSource, packageVersion);
    metrics.initMetrics(theme2);
    if (typeof window !== "undefined") {
      metrics.sendMetricOnce("awsui-viewport-width", window.innerWidth || 0);
      metrics.sendMetricOnce("awsui-viewport-height", window.innerHeight || 0);
    }
    metrics.logComponentLoaded();
    metrics.logComponentUsed(componentName.toLowerCase());
  }, []);
}

// node_modules/@cloudscape-design/component-toolkit/lib/internal/base-component/init-awsui-versions.js
function initAwsUiVersions(source, packageVersion) {
  if (typeof window !== "undefined") {
    if (!window.awsuiVersions) {
      window.awsuiVersions = {};
    }
    if (!window.awsuiVersions[source]) {
      window.awsuiVersions[source] = [];
    }
    window.awsuiVersions[source].push(packageVersion);
  }
}

// node_modules/@cloudscape-design/components/internal/utils/dom.js
var import_balanced_match = __toESM(require_balanced_match());

// node_modules/@cloudscape-design/components/internal/utils/calculate-once.js
function calculateOnce(callback) {
  let result = void 0;
  return () => {
    if (result === void 0) {
      result = callback();
    }
    return result;
  };
}

// node_modules/@cloudscape-design/components/internal/utils/dom.js
function findUpUntil(node, callback) {
  let current = node;
  while (current && !callback(current)) {
    current = current.parentElement;
    while (current && !(current instanceof HTMLElement)) {
      current = current.parentElement;
    }
  }
  return current;
}
function supportsStickyPosition() {
  var _a, _b, _c;
  if (typeof window === "undefined") {
    return false;
  }
  return (_c = (_b = (_a = window.CSS) === null || _a === void 0 ? void 0 : _a.supports) === null || _b === void 0 ? void 0 : _b.call(_a, "position", "sticky")) !== null && _c !== void 0 ? _c : false;
}
var supportsContainingBlockPositioning = calculateOnce(() => {
  const parent = document.createElement("div");
  parent.style.transform = "translateY(5px)";
  document.body.appendChild(parent);
  const child = document.createElement("div");
  child.style.position = "fixed";
  child.style.top = "0";
  parent.appendChild(child);
  const result = parent.getBoundingClientRect().top === child.getBoundingClientRect().top;
  document.body.removeChild(parent);
  return result;
});
function getContainingBlock(startElement) {
  if (!startElement.parentElement) {
    return null;
  }
  return supportsContainingBlockPositioning() ? findUpUntil(startElement.parentElement, (element) => {
    const computedStyle = getComputedStyle(element);
    return !!computedStyle.transform && computedStyle.transform !== "none" || !!computedStyle.perspective && computedStyle.perspective !== "none";
  }) : null;
}
var cssVariableExpression = /--.+?\s*,\s*(.+)/;
function parseCssVariable(value) {
  var _a, _b, _c;
  if ((_c = (_b = (_a = window.CSS) === null || _a === void 0 ? void 0 : _a.supports) === null || _b === void 0 ? void 0 : _b.call(_a, "color", "var(--dummy, #000)")) !== null && _c !== void 0 ? _c : false) {
    return value;
  }
  const varIndex = value.lastIndexOf("var(");
  if (varIndex === -1) {
    return value;
  }
  const expr = (0, import_balanced_match.default)("(", ")", value.substr(varIndex));
  if (!expr) {
    return value;
  }
  const match = expr.body.match(cssVariableExpression);
  return match ? match[1] : value;
}
function nodeContains(parent, descendant) {
  if (!parent || !descendant) {
    return false;
  }
  if (parent.contains && descendant.nodeType === Node.ELEMENT_NODE) {
    return parent === descendant || parent.contains(descendant);
  }
  let upperNode = descendant;
  while (upperNode && parent !== upperNode) {
    upperNode = upperNode.parentNode;
  }
  return upperNode === parent;
}
function containsOrEqual(container, node) {
  if (container === null) {
    return false;
  }
  return container === node || container.contains(node);
}

// node_modules/@cloudscape-design/components/internal/hooks/use-stable-event-handler/index.js
var import_react3 = __toESM(require_react());
function useStableEventHandler(fn) {
  const ref = (0, import_react3.useRef)();
  (0, import_react3.useEffect)(() => {
    ref.current = fn;
  });
  return (0, import_react3.useCallback)((...args) => {
    var _a;
    return (_a = ref.current) === null || _a === void 0 ? void 0 : _a.apply(void 0, args);
  }, []);
}

// node_modules/@cloudscape-design/components/internal/is-development.js
var isDevelopment2 = true;

// node_modules/@cloudscape-design/components/internal/hooks/use-visual-mode/index.js
var import_react6 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/environment.js
var PACKAGE_SOURCE = "components";
var PACKAGE_VERSION = "3.0.0 (10d03b6)";
var THEME = "open-source-visual-refresh";
var ALWAYS_VISUAL_REFRESH = true;

// node_modules/@cloudscape-design/components/internal/motion.js
var isMotionDisabled = (element) => {
  var _a, _b;
  return !!findUpUntil(element, (node) => node.classList.contains("awsui-motion-disabled")) || ((_b = (_a = window.matchMedia) === null || _a === void 0 ? void 0 : _a.call(window, "(prefers-reduced-motion: reduce)").matches) !== null && _b !== void 0 ? _b : false);
};

// node_modules/@cloudscape-design/components/internal/hooks/use-mutation-observer/index.js
var import_react5 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/use-singleton-handler/index.js
var import_react4 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
function createSingletonHandler(factory) {
  const listeners = [];
  const callback = (value) => {
    (0, import_react_dom.unstable_batchedUpdates)(() => {
      for (const listener of listeners) {
        listener(value);
      }
    });
  };
  let cleanup;
  return function useSingleton(listener) {
    (0, import_react4.useEffect)(() => {
      if (listeners.length === 0) {
        cleanup = factory(callback);
      }
      listeners.push(listener);
      return () => {
        listeners.splice(listeners.indexOf(listener), 1);
        if (listeners.length === 0) {
          cleanup();
          cleanup = void 0;
        }
      };
    }, []);
  };
}
function createSingletonState({ factory, initialState }) {
  const useSingleton = createSingletonHandler(factory);
  let value = initialState;
  return function useSingletonState() {
    const [state, setState] = (0, import_react4.useState)(value);
    useSingleton((newValue) => {
      value = newValue;
      setState(newValue);
    });
    return state;
  };
}

// node_modules/@cloudscape-design/components/internal/hooks/use-mutation-observer/index.js
var useMutationSingleton = createSingletonHandler((handler) => {
  const observer = new MutationObserver(() => handler());
  observer.observe(document.body, { attributes: true, subtree: true });
  return () => observer.disconnect();
});
function useMutationObserver(elementRef, onChange) {
  const handler = useStableEventHandler(() => {
    if (elementRef.current) {
      onChange(elementRef.current);
    }
  });
  useMutationSingleton(handler);
  (0, import_react5.useEffect)(() => {
    handler();
  }, [handler]);
}

// node_modules/@cloudscape-design/components/internal/hooks/use-visual-mode/index.js
function useCurrentMode(elementRef) {
  const [value, setValue] = (0, import_react6.useState)("light");
  useMutationObserver(elementRef, (node) => {
    const darkModeParent = findUpUntil(node, (node2) => node2.classList.contains("awsui-polaris-dark-mode") || node2.classList.contains("awsui-dark-mode"));
    setValue(darkModeParent ? "dark" : "light");
  });
  return value;
}
function useDensityMode(elementRef) {
  const [value, setValue] = (0, import_react6.useState)("comfortable");
  useMutationObserver(elementRef, (node) => {
    const compactModeParent = findUpUntil(node, (node2) => node2.classList.contains("awsui-polaris-compact-mode") || node2.classList.contains("awsui-compact-mode"));
    setValue(compactModeParent ? "compact" : "comfortable");
  });
  return value;
}
var useVisualRefresh = ALWAYS_VISUAL_REFRESH ? () => true : useVisualRefreshDynamic;
var visualRefreshState = void 0;
function detectVisualRefresh() {
  return typeof document !== "undefined" && !!document.querySelector(".awsui-visual-refresh");
}
function useVisualRefreshDynamic() {
  if (visualRefreshState === void 0) {
    visualRefreshState = detectVisualRefresh();
  }
  if (isDevelopment2) {
    const newVisualRefreshState = detectVisualRefresh();
    if (newVisualRefreshState !== visualRefreshState) {
      warnOnce("Visual Refresh", "Dynamic visual refresh change detected. This is not supported. Make sure `awsui-visual-refresh` is attached to the `<body>` element before initial React render");
    }
  }
  return visualRefreshState;
}
function useReducedMotion(elementRef) {
  const [value, setValue] = (0, import_react6.useState)(false);
  useMutationObserver(elementRef, (node) => {
    setValue(isMotionDisabled(node));
  });
  return value;
}

// node_modules/@cloudscape-design/components/internal/hooks/use-telemetry/index.js
function useTelemetry(componentName) {
  const theme2 = useVisualRefresh() ? "vr" : THEME;
  useComponentMetrics(componentName, { packageSource: PACKAGE_SOURCE, packageVersion: PACKAGE_VERSION, theme: theme2 });
}

// node_modules/@cloudscape-design/components/internal/hooks/focus-visible/index.js
var import_react7 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/keycode.js
var KeyCode;
(function(KeyCode2) {
  KeyCode2[KeyCode2["pageUp"] = 33] = "pageUp";
  KeyCode2[KeyCode2["pageDown"] = 34] = "pageDown";
  KeyCode2[KeyCode2["end"] = 35] = "end";
  KeyCode2[KeyCode2["home"] = 36] = "home";
  KeyCode2[KeyCode2["backspace"] = 8] = "backspace";
  KeyCode2[KeyCode2["space"] = 32] = "space";
  KeyCode2[KeyCode2["down"] = 40] = "down";
  KeyCode2[KeyCode2["left"] = 37] = "left";
  KeyCode2[KeyCode2["right"] = 39] = "right";
  KeyCode2[KeyCode2["up"] = 38] = "up";
  KeyCode2[KeyCode2["escape"] = 27] = "escape";
  KeyCode2[KeyCode2["enter"] = 13] = "enter";
  KeyCode2[KeyCode2["tab"] = 9] = "tab";
  KeyCode2[KeyCode2["shift"] = 16] = "shift";
  KeyCode2[KeyCode2["control"] = 17] = "control";
  KeyCode2[KeyCode2["alt"] = 18] = "alt";
  KeyCode2[KeyCode2["meta"] = 91] = "meta";
})(KeyCode || (KeyCode = {}));

// node_modules/@cloudscape-design/components/internal/hooks/focus-visible/index.js
function isModifierKey(event) {
  return [KeyCode.shift, KeyCode.alt, KeyCode.control, KeyCode.meta].indexOf(event.keyCode) > -1;
}
function setIsKeyboard(active) {
  if (active) {
    document.body.setAttribute("data-awsui-focus-visible", "true");
  } else {
    document.body.removeAttribute("data-awsui-focus-visible");
  }
}
function handleMousedown() {
  return setIsKeyboard(false);
}
function handleKeydown(event) {
  if (!isModifierKey(event)) {
    setIsKeyboard(true);
  }
}
var componentsCount = 0;
function addListeners() {
  document.addEventListener("mousedown", handleMousedown);
  document.addEventListener("keydown", handleKeydown);
}
function removeListeners() {
  document.removeEventListener("mousedown", handleMousedown);
  document.removeEventListener("keydown", handleKeydown);
}
function useFocusVisible() {
  (0, import_react7.useEffect)(() => {
    if (componentsCount === 0) {
      addListeners();
    }
    componentsCount++;
    return () => {
      componentsCount--;
      if (componentsCount === 0) {
        removeListeners();
      }
    };
  }, []);
}

// node_modules/@cloudscape-design/components/internal/hooks/use-base-component/index.js
function useBaseComponent(componentName) {
  useTelemetry(componentName);
  useFocusVisible();
  const elementRef = useComponentMetadata(componentName, PACKAGE_VERSION);
  return { __internalRootRef: elementRef };
}

// node_modules/clsx/dist/clsx.m.js
function r(e) {
  var t, f, n = "";
  if ("string" == typeof e || "number" == typeof e)
    n += e;
  else if ("object" == typeof e)
    if (Array.isArray(e))
      for (t = 0; t < e.length; t++)
        e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
    else
      for (t in e)
        e[t] && (n && (n += " "), n += t);
  return n;
}
function clsx() {
  for (var e, t, f = 0, n = ""; f < arguments.length; )
    (e = arguments[f++]) && (t = r(e)) && (n && (n += " "), n += t);
  return n;
}
var clsx_m_default = clsx;

// node_modules/@cloudscape-design/components/internal/base-component/styles.css.js
import "/local/home/samilafo/final_epa_project/cloudscape_wrkshp/cloudscape-design-system-workshop/node_modules/@cloudscape-design/components/internal/base-component/styles.scoped.css";

// node_modules/@cloudscape-design/components/internal/base-component/index.js
initAwsUiVersions(PACKAGE_SOURCE, PACKAGE_VERSION);
function getBaseProps(props) {
  const baseProps = {};
  Object.keys(props).forEach((prop) => {
    if (prop === "id" || prop === "className" || prop.match(/^data-/)) {
      baseProps[prop] = props[prop];
    }
  });
  return baseProps;
}

export {
  __rest,
  __awaiter,
  applyDisplayName,
  Metrics,
  warnOnce,
  PACKAGE_SOURCE,
  PACKAGE_VERSION,
  calculateOnce,
  findUpUntil,
  supportsStickyPosition,
  getContainingBlock,
  parseCssVariable,
  nodeContains,
  containsOrEqual,
  isMotionDisabled,
  useStableEventHandler,
  createSingletonHandler,
  createSingletonState,
  isDevelopment2 as isDevelopment,
  useCurrentMode,
  useDensityMode,
  useVisualRefresh,
  useReducedMotion,
  useTelemetry,
  KeyCode,
  isModifierKey,
  useBaseComponent,
  clsx_m_default,
  getBaseProps
};
//# sourceMappingURL=chunk-BATVD76T.js.map

import {
  useUniqueId
} from "./chunk-ZOQJCCJI.js";
import {
  FunnelContext,
  FunnelMetrics,
  FunnelStepContext,
  FunnelSubStepContext,
  useFunnel,
  useFunnelStep
} from "./chunk-7FZ3ZYD3.js";
import {
  DATA_ATTR_FUNNEL_STEP,
  getFunnelNameSelector,
  getNameFromSelector,
  getSubStepAllSelector,
  getSubStepNameSelector,
  getSubStepSelector
} from "./chunk-AX3SE4VV.js";
import {
  PACKAGE_VERSION,
  __rest,
  useVisualRefresh
} from "./chunk-BATVD76T.js";
import {
  __toESM,
  require_react
} from "./chunk-C3URVCCN.js";

// node_modules/@cloudscape-design/components/internal/analytics/components/analytics-funnel.js
var import_react = __toESM(require_react());
var FUNNEL_VERSION = "1.0";
var AnalyticsFunnel = (_a) => {
  var { children } = _a, props = __rest(_a, ["children"]);
  const [funnelInteractionId, setFunnelInteractionId] = (0, import_react.useState)("");
  const [submissionAttempt, setSubmissionAttempt] = (0, import_react.useState)(0);
  const isVisualRefresh = useVisualRefresh();
  const funnelState = (0, import_react.useRef)("default");
  const errorCount = (0, import_react.useRef)(0);
  const loadingButtonCount = (0, import_react.useRef)(0);
  (0, import_react.useEffect)(() => {
    funnelState.current = "default";
    const funnelInteractionId2 = FunnelMetrics.funnelStart({
      funnelNameSelector: getFunnelNameSelector(),
      optionalStepNumbers: props.optionalStepNumbers,
      funnelType: props.funnelType,
      totalFunnelSteps: props.totalFunnelSteps,
      componentVersion: PACKAGE_VERSION,
      theme: isVisualRefresh ? "vr" : "classic",
      funnelVersion: FUNNEL_VERSION
    });
    setFunnelInteractionId(funnelInteractionId2);
    return () => {
      if (funnelState.current === "validating") {
        FunnelMetrics.funnelComplete({ funnelInteractionId: funnelInteractionId2 });
        funnelState.current = "complete";
      }
      if (funnelState.current === "complete") {
        FunnelMetrics.funnelSuccessful({ funnelInteractionId: funnelInteractionId2 });
      } else {
        FunnelMetrics.funnelCancelled({ funnelInteractionId: funnelInteractionId2 });
        funnelState.current === "cancelled";
      }
    };
  }, []);
  const funnelSubmit = () => {
    funnelState.current = "validating";
    const VALIDATION_WAIT_DELAY = 50;
    const LOADING_WAIT_DELAY = 100;
    const checkForCompleteness = () => {
      if (funnelState.current === "complete") {
        return;
      }
      if (loadingButtonCount.current > 0) {
        setTimeout(checkForCompleteness, LOADING_WAIT_DELAY);
        return;
      }
      if (errorCount.current === 0) {
        FunnelMetrics.funnelComplete({ funnelInteractionId });
        funnelState.current = "complete";
      } else {
        funnelState.current = "default";
      }
    };
    setTimeout(checkForCompleteness, VALIDATION_WAIT_DELAY);
  };
  const funnelNextOrSubmitAttempt = () => setSubmissionAttempt((i) => i + 1);
  const funnelCancel = () => {
  };
  const funnelContextValue = {
    funnelInteractionId,
    setFunnelInteractionId,
    funnelType: props.funnelType,
    optionalStepNumbers: props.optionalStepNumbers,
    totalFunnelSteps: props.totalFunnelSteps,
    funnelSubmit,
    funnelCancel,
    submissionAttempt,
    funnelNextOrSubmitAttempt,
    funnelState,
    errorCount,
    loadingButtonCount
  };
  return import_react.default.createElement(FunnelContext.Provider, { value: funnelContextValue }, children);
};
var AnalyticsFunnelStep = ({ children, stepNumber, stepNameSelector }) => {
  const { funnelInteractionId, funnelState } = useFunnel();
  const funnelStepProps = { [DATA_ATTR_FUNNEL_STEP]: stepNumber };
  (0, import_react.useEffect)(() => {
    const stepName = getNameFromSelector(stepNameSelector);
    if (funnelInteractionId && funnelState.current === "default") {
      FunnelMetrics.funnelStepStart({
        funnelInteractionId,
        stepNumber,
        stepName,
        stepNameSelector,
        subStepAllSelector: getSubStepAllSelector()
      });
    }
    return () => {
      if (funnelInteractionId && funnelState.current === "default") {
        FunnelMetrics.funnelStepComplete({
          funnelInteractionId,
          stepNumber,
          stepName,
          stepNameSelector,
          subStepAllSelector: getSubStepAllSelector()
        });
      }
    };
  }, [funnelInteractionId, stepNumber, stepNameSelector]);
  const contextValue = { funnelInteractionId, stepNumber, stepNameSelector, funnelStepProps };
  return import_react.default.createElement(FunnelStepContext.Provider, { value: contextValue }, typeof children === "function" ? children(contextValue) : children);
};
var AnalyticsFunnelSubStep = ({ children }) => {
  const { funnelInteractionId } = useFunnel();
  const { stepNumber, stepNameSelector } = useFunnelStep();
  const subStepId = useUniqueId("substep");
  const subStepSelector = getSubStepSelector(subStepId);
  const subStepNameSelector = getSubStepNameSelector(subStepId);
  return import_react.default.createElement(FunnelSubStepContext.Provider, { value: {
    funnelInteractionId,
    stepNumber,
    stepNameSelector,
    subStepSelector,
    subStepNameSelector,
    subStepId
  } }, children);
};

export {
  AnalyticsFunnel,
  AnalyticsFunnelStep,
  AnalyticsFunnelSubStep
};
//# sourceMappingURL=chunk-JM6WPI6L.js.map
